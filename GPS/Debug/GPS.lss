
GPS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000141e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014c  00800060  0000141e  000014b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  008001ac  008001ac  000015fe  2**0
                  ALLOC
  3 .stab         00001a34  00000000  00000000  00001600  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b04  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000060  00000000  00000000  00003b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000082  00000000  00000000  00003b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000006a5  00000000  00000000  00003c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000445  00000000  00000000  000042bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000003de  00000000  00000000  00004704  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000060  00000000  00000000  00004ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001f7  00000000  00000000  00004b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000021e  00000000  00000000  00004d3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e1       	ldi	r30, 0x1E	; 30
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3a       	cpi	r26, 0xAC	; 172
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac ea       	ldi	r26, 0xAC	; 172
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3b       	cpi	r26, 0xB7	; 183
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 83 09 	call	0x1306	; 0x1306 <main>
      8a:	0c 94 0d 0a 	jmp	0x141a	; 0x141a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__floatunsisf>:
      92:	a8 e0       	ldi	r26, 0x08	; 8
      94:	b0 e0       	ldi	r27, 0x00	; 0
      96:	ef e4       	ldi	r30, 0x4F	; 79
      98:	f0 e0       	ldi	r31, 0x00	; 0
      9a:	0c 94 de 09 	jmp	0x13bc	; 0x13bc <__prologue_saves__+0x10>
      9e:	7b 01       	movw	r14, r22
      a0:	8c 01       	movw	r16, r24
      a2:	61 15       	cp	r22, r1
      a4:	71 05       	cpc	r23, r1
      a6:	81 05       	cpc	r24, r1
      a8:	91 05       	cpc	r25, r1
      aa:	19 f4       	brne	.+6      	; 0xb2 <__floatunsisf+0x20>
      ac:	82 e0       	ldi	r24, 0x02	; 2
      ae:	89 83       	std	Y+1, r24	; 0x01
      b0:	60 c0       	rjmp	.+192    	; 0x172 <__floatunsisf+0xe0>
      b2:	83 e0       	ldi	r24, 0x03	; 3
      b4:	89 83       	std	Y+1, r24	; 0x01
      b6:	8e e1       	ldi	r24, 0x1E	; 30
      b8:	c8 2e       	mov	r12, r24
      ba:	d1 2c       	mov	r13, r1
      bc:	dc 82       	std	Y+4, r13	; 0x04
      be:	cb 82       	std	Y+3, r12	; 0x03
      c0:	ed 82       	std	Y+5, r14	; 0x05
      c2:	fe 82       	std	Y+6, r15	; 0x06
      c4:	0f 83       	std	Y+7, r16	; 0x07
      c6:	18 87       	std	Y+8, r17	; 0x08
      c8:	c8 01       	movw	r24, r16
      ca:	b7 01       	movw	r22, r14
      cc:	0e 94 c2 00 	call	0x184	; 0x184 <__clzsi2>
      d0:	fc 01       	movw	r30, r24
      d2:	31 97       	sbiw	r30, 0x01	; 1
      d4:	f7 ff       	sbrs	r31, 7
      d6:	3b c0       	rjmp	.+118    	; 0x14e <__floatunsisf+0xbc>
      d8:	22 27       	eor	r18, r18
      da:	33 27       	eor	r19, r19
      dc:	2e 1b       	sub	r18, r30
      de:	3f 0b       	sbc	r19, r31
      e0:	57 01       	movw	r10, r14
      e2:	68 01       	movw	r12, r16
      e4:	02 2e       	mov	r0, r18
      e6:	04 c0       	rjmp	.+8      	; 0xf0 <__floatunsisf+0x5e>
      e8:	d6 94       	lsr	r13
      ea:	c7 94       	ror	r12
      ec:	b7 94       	ror	r11
      ee:	a7 94       	ror	r10
      f0:	0a 94       	dec	r0
      f2:	d2 f7       	brpl	.-12     	; 0xe8 <__floatunsisf+0x56>
      f4:	40 e0       	ldi	r20, 0x00	; 0
      f6:	50 e0       	ldi	r21, 0x00	; 0
      f8:	60 e0       	ldi	r22, 0x00	; 0
      fa:	70 e0       	ldi	r23, 0x00	; 0
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	a0 e0       	ldi	r26, 0x00	; 0
     102:	b0 e0       	ldi	r27, 0x00	; 0
     104:	04 c0       	rjmp	.+8      	; 0x10e <__floatunsisf+0x7c>
     106:	88 0f       	add	r24, r24
     108:	99 1f       	adc	r25, r25
     10a:	aa 1f       	adc	r26, r26
     10c:	bb 1f       	adc	r27, r27
     10e:	2a 95       	dec	r18
     110:	d2 f7       	brpl	.-12     	; 0x106 <__floatunsisf+0x74>
     112:	01 97       	sbiw	r24, 0x01	; 1
     114:	a1 09       	sbc	r26, r1
     116:	b1 09       	sbc	r27, r1
     118:	8e 21       	and	r24, r14
     11a:	9f 21       	and	r25, r15
     11c:	a0 23       	and	r26, r16
     11e:	b1 23       	and	r27, r17
     120:	00 97       	sbiw	r24, 0x00	; 0
     122:	a1 05       	cpc	r26, r1
     124:	b1 05       	cpc	r27, r1
     126:	21 f0       	breq	.+8      	; 0x130 <__floatunsisf+0x9e>
     128:	41 e0       	ldi	r20, 0x01	; 1
     12a:	50 e0       	ldi	r21, 0x00	; 0
     12c:	60 e0       	ldi	r22, 0x00	; 0
     12e:	70 e0       	ldi	r23, 0x00	; 0
     130:	4a 29       	or	r20, r10
     132:	5b 29       	or	r21, r11
     134:	6c 29       	or	r22, r12
     136:	7d 29       	or	r23, r13
     138:	4d 83       	std	Y+5, r20	; 0x05
     13a:	5e 83       	std	Y+6, r21	; 0x06
     13c:	6f 83       	std	Y+7, r22	; 0x07
     13e:	78 87       	std	Y+8, r23	; 0x08
     140:	8e e1       	ldi	r24, 0x1E	; 30
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	8e 1b       	sub	r24, r30
     146:	9f 0b       	sbc	r25, r31
     148:	9c 83       	std	Y+4, r25	; 0x04
     14a:	8b 83       	std	Y+3, r24	; 0x03
     14c:	12 c0       	rjmp	.+36     	; 0x172 <__floatunsisf+0xe0>
     14e:	30 97       	sbiw	r30, 0x00	; 0
     150:	81 f0       	breq	.+32     	; 0x172 <__floatunsisf+0xe0>
     152:	0e 2e       	mov	r0, r30
     154:	04 c0       	rjmp	.+8      	; 0x15e <__floatunsisf+0xcc>
     156:	ee 0c       	add	r14, r14
     158:	ff 1c       	adc	r15, r15
     15a:	00 1f       	adc	r16, r16
     15c:	11 1f       	adc	r17, r17
     15e:	0a 94       	dec	r0
     160:	d2 f7       	brpl	.-12     	; 0x156 <__floatunsisf+0xc4>
     162:	ed 82       	std	Y+5, r14	; 0x05
     164:	fe 82       	std	Y+6, r15	; 0x06
     166:	0f 83       	std	Y+7, r16	; 0x07
     168:	18 87       	std	Y+8, r17	; 0x08
     16a:	ce 1a       	sub	r12, r30
     16c:	df 0a       	sbc	r13, r31
     16e:	dc 82       	std	Y+4, r13	; 0x04
     170:	cb 82       	std	Y+3, r12	; 0x03
     172:	1a 82       	std	Y+2, r1	; 0x02
     174:	ce 01       	movw	r24, r28
     176:	01 96       	adiw	r24, 0x01	; 1
     178:	0e 94 11 01 	call	0x222	; 0x222 <__pack_f>
     17c:	28 96       	adiw	r28, 0x08	; 8
     17e:	ea e0       	ldi	r30, 0x0A	; 10
     180:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__epilogue_restores__+0x10>

00000184 <__clzsi2>:
     184:	ef 92       	push	r14
     186:	ff 92       	push	r15
     188:	0f 93       	push	r16
     18a:	1f 93       	push	r17
     18c:	7b 01       	movw	r14, r22
     18e:	8c 01       	movw	r16, r24
     190:	80 e0       	ldi	r24, 0x00	; 0
     192:	e8 16       	cp	r14, r24
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	f8 06       	cpc	r15, r24
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	08 07       	cpc	r16, r24
     19c:	80 e0       	ldi	r24, 0x00	; 0
     19e:	18 07       	cpc	r17, r24
     1a0:	88 f4       	brcc	.+34     	; 0x1c4 <__clzsi2+0x40>
     1a2:	8f ef       	ldi	r24, 0xFF	; 255
     1a4:	e8 16       	cp	r14, r24
     1a6:	f1 04       	cpc	r15, r1
     1a8:	01 05       	cpc	r16, r1
     1aa:	11 05       	cpc	r17, r1
     1ac:	31 f0       	breq	.+12     	; 0x1ba <__clzsi2+0x36>
     1ae:	28 f0       	brcs	.+10     	; 0x1ba <__clzsi2+0x36>
     1b0:	88 e0       	ldi	r24, 0x08	; 8
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	a0 e0       	ldi	r26, 0x00	; 0
     1b6:	b0 e0       	ldi	r27, 0x00	; 0
     1b8:	17 c0       	rjmp	.+46     	; 0x1e8 <__clzsi2+0x64>
     1ba:	80 e0       	ldi	r24, 0x00	; 0
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	a0 e0       	ldi	r26, 0x00	; 0
     1c0:	b0 e0       	ldi	r27, 0x00	; 0
     1c2:	12 c0       	rjmp	.+36     	; 0x1e8 <__clzsi2+0x64>
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	e8 16       	cp	r14, r24
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     1ca:	f8 06       	cpc	r15, r24
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	08 07       	cpc	r16, r24
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	18 07       	cpc	r17, r24
     1d4:	28 f0       	brcs	.+10     	; 0x1e0 <__clzsi2+0x5c>
     1d6:	88 e1       	ldi	r24, 0x18	; 24
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	a0 e0       	ldi	r26, 0x00	; 0
     1dc:	b0 e0       	ldi	r27, 0x00	; 0
     1de:	04 c0       	rjmp	.+8      	; 0x1e8 <__clzsi2+0x64>
     1e0:	80 e1       	ldi	r24, 0x10	; 16
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	20 e2       	ldi	r18, 0x20	; 32
     1ea:	30 e0       	ldi	r19, 0x00	; 0
     1ec:	40 e0       	ldi	r20, 0x00	; 0
     1ee:	50 e0       	ldi	r21, 0x00	; 0
     1f0:	28 1b       	sub	r18, r24
     1f2:	39 0b       	sbc	r19, r25
     1f4:	4a 0b       	sbc	r20, r26
     1f6:	5b 0b       	sbc	r21, r27
     1f8:	04 c0       	rjmp	.+8      	; 0x202 <__clzsi2+0x7e>
     1fa:	16 95       	lsr	r17
     1fc:	07 95       	ror	r16
     1fe:	f7 94       	ror	r15
     200:	e7 94       	ror	r14
     202:	8a 95       	dec	r24
     204:	d2 f7       	brpl	.-12     	; 0x1fa <__clzsi2+0x76>
     206:	f7 01       	movw	r30, r14
     208:	e0 5a       	subi	r30, 0xA0	; 160
     20a:	ff 4f       	sbci	r31, 0xFF	; 255
     20c:	80 81       	ld	r24, Z
     20e:	28 1b       	sub	r18, r24
     210:	31 09       	sbc	r19, r1
     212:	41 09       	sbc	r20, r1
     214:	51 09       	sbc	r21, r1
     216:	c9 01       	movw	r24, r18
     218:	1f 91       	pop	r17
     21a:	0f 91       	pop	r16
     21c:	ff 90       	pop	r15
     21e:	ef 90       	pop	r14
     220:	08 95       	ret

00000222 <__pack_f>:
     222:	df 92       	push	r13
     224:	ef 92       	push	r14
     226:	ff 92       	push	r15
     228:	0f 93       	push	r16
     22a:	1f 93       	push	r17
     22c:	fc 01       	movw	r30, r24
     22e:	e4 80       	ldd	r14, Z+4	; 0x04
     230:	f5 80       	ldd	r15, Z+5	; 0x05
     232:	06 81       	ldd	r16, Z+6	; 0x06
     234:	17 81       	ldd	r17, Z+7	; 0x07
     236:	d1 80       	ldd	r13, Z+1	; 0x01
     238:	80 81       	ld	r24, Z
     23a:	82 30       	cpi	r24, 0x02	; 2
     23c:	48 f4       	brcc	.+18     	; 0x250 <__pack_f+0x2e>
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	a0 e1       	ldi	r26, 0x10	; 16
     244:	b0 e0       	ldi	r27, 0x00	; 0
     246:	e8 2a       	or	r14, r24
     248:	f9 2a       	or	r15, r25
     24a:	0a 2b       	or	r16, r26
     24c:	1b 2b       	or	r17, r27
     24e:	a5 c0       	rjmp	.+330    	; 0x39a <__pack_f+0x178>
     250:	84 30       	cpi	r24, 0x04	; 4
     252:	09 f4       	brne	.+2      	; 0x256 <__pack_f+0x34>
     254:	9f c0       	rjmp	.+318    	; 0x394 <__pack_f+0x172>
     256:	82 30       	cpi	r24, 0x02	; 2
     258:	21 f4       	brne	.+8      	; 0x262 <__pack_f+0x40>
     25a:	ee 24       	eor	r14, r14
     25c:	ff 24       	eor	r15, r15
     25e:	87 01       	movw	r16, r14
     260:	05 c0       	rjmp	.+10     	; 0x26c <__pack_f+0x4a>
     262:	e1 14       	cp	r14, r1
     264:	f1 04       	cpc	r15, r1
     266:	01 05       	cpc	r16, r1
     268:	11 05       	cpc	r17, r1
     26a:	19 f4       	brne	.+6      	; 0x272 <__pack_f+0x50>
     26c:	e0 e0       	ldi	r30, 0x00	; 0
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	96 c0       	rjmp	.+300    	; 0x39e <__pack_f+0x17c>
     272:	62 81       	ldd	r22, Z+2	; 0x02
     274:	73 81       	ldd	r23, Z+3	; 0x03
     276:	9f ef       	ldi	r25, 0xFF	; 255
     278:	62 38       	cpi	r22, 0x82	; 130
     27a:	79 07       	cpc	r23, r25
     27c:	0c f0       	brlt	.+2      	; 0x280 <__pack_f+0x5e>
     27e:	5b c0       	rjmp	.+182    	; 0x336 <__pack_f+0x114>
     280:	22 e8       	ldi	r18, 0x82	; 130
     282:	3f ef       	ldi	r19, 0xFF	; 255
     284:	26 1b       	sub	r18, r22
     286:	37 0b       	sbc	r19, r23
     288:	2a 31       	cpi	r18, 0x1A	; 26
     28a:	31 05       	cpc	r19, r1
     28c:	2c f0       	brlt	.+10     	; 0x298 <__pack_f+0x76>
     28e:	20 e0       	ldi	r18, 0x00	; 0
     290:	30 e0       	ldi	r19, 0x00	; 0
     292:	40 e0       	ldi	r20, 0x00	; 0
     294:	50 e0       	ldi	r21, 0x00	; 0
     296:	2a c0       	rjmp	.+84     	; 0x2ec <__pack_f+0xca>
     298:	b8 01       	movw	r22, r16
     29a:	a7 01       	movw	r20, r14
     29c:	02 2e       	mov	r0, r18
     29e:	04 c0       	rjmp	.+8      	; 0x2a8 <__pack_f+0x86>
     2a0:	76 95       	lsr	r23
     2a2:	67 95       	ror	r22
     2a4:	57 95       	ror	r21
     2a6:	47 95       	ror	r20
     2a8:	0a 94       	dec	r0
     2aa:	d2 f7       	brpl	.-12     	; 0x2a0 <__pack_f+0x7e>
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	a0 e0       	ldi	r26, 0x00	; 0
     2b2:	b0 e0       	ldi	r27, 0x00	; 0
     2b4:	04 c0       	rjmp	.+8      	; 0x2be <__pack_f+0x9c>
     2b6:	88 0f       	add	r24, r24
     2b8:	99 1f       	adc	r25, r25
     2ba:	aa 1f       	adc	r26, r26
     2bc:	bb 1f       	adc	r27, r27
     2be:	2a 95       	dec	r18
     2c0:	d2 f7       	brpl	.-12     	; 0x2b6 <__pack_f+0x94>
     2c2:	01 97       	sbiw	r24, 0x01	; 1
     2c4:	a1 09       	sbc	r26, r1
     2c6:	b1 09       	sbc	r27, r1
     2c8:	8e 21       	and	r24, r14
     2ca:	9f 21       	and	r25, r15
     2cc:	a0 23       	and	r26, r16
     2ce:	b1 23       	and	r27, r17
     2d0:	00 97       	sbiw	r24, 0x00	; 0
     2d2:	a1 05       	cpc	r26, r1
     2d4:	b1 05       	cpc	r27, r1
     2d6:	21 f0       	breq	.+8      	; 0x2e0 <__pack_f+0xbe>
     2d8:	81 e0       	ldi	r24, 0x01	; 1
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	a0 e0       	ldi	r26, 0x00	; 0
     2de:	b0 e0       	ldi	r27, 0x00	; 0
     2e0:	9a 01       	movw	r18, r20
     2e2:	ab 01       	movw	r20, r22
     2e4:	28 2b       	or	r18, r24
     2e6:	39 2b       	or	r19, r25
     2e8:	4a 2b       	or	r20, r26
     2ea:	5b 2b       	or	r21, r27
     2ec:	da 01       	movw	r26, r20
     2ee:	c9 01       	movw	r24, r18
     2f0:	8f 77       	andi	r24, 0x7F	; 127
     2f2:	90 70       	andi	r25, 0x00	; 0
     2f4:	a0 70       	andi	r26, 0x00	; 0
     2f6:	b0 70       	andi	r27, 0x00	; 0
     2f8:	80 34       	cpi	r24, 0x40	; 64
     2fa:	91 05       	cpc	r25, r1
     2fc:	a1 05       	cpc	r26, r1
     2fe:	b1 05       	cpc	r27, r1
     300:	39 f4       	brne	.+14     	; 0x310 <__pack_f+0xee>
     302:	27 ff       	sbrs	r18, 7
     304:	09 c0       	rjmp	.+18     	; 0x318 <__pack_f+0xf6>
     306:	20 5c       	subi	r18, 0xC0	; 192
     308:	3f 4f       	sbci	r19, 0xFF	; 255
     30a:	4f 4f       	sbci	r20, 0xFF	; 255
     30c:	5f 4f       	sbci	r21, 0xFF	; 255
     30e:	04 c0       	rjmp	.+8      	; 0x318 <__pack_f+0xf6>
     310:	21 5c       	subi	r18, 0xC1	; 193
     312:	3f 4f       	sbci	r19, 0xFF	; 255
     314:	4f 4f       	sbci	r20, 0xFF	; 255
     316:	5f 4f       	sbci	r21, 0xFF	; 255
     318:	e0 e0       	ldi	r30, 0x00	; 0
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	20 30       	cpi	r18, 0x00	; 0
     31e:	a0 e0       	ldi	r26, 0x00	; 0
     320:	3a 07       	cpc	r19, r26
     322:	a0 e0       	ldi	r26, 0x00	; 0
     324:	4a 07       	cpc	r20, r26
     326:	a0 e4       	ldi	r26, 0x40	; 64
     328:	5a 07       	cpc	r21, r26
     32a:	10 f0       	brcs	.+4      	; 0x330 <__pack_f+0x10e>
     32c:	e1 e0       	ldi	r30, 0x01	; 1
     32e:	f0 e0       	ldi	r31, 0x00	; 0
     330:	79 01       	movw	r14, r18
     332:	8a 01       	movw	r16, r20
     334:	27 c0       	rjmp	.+78     	; 0x384 <__pack_f+0x162>
     336:	60 38       	cpi	r22, 0x80	; 128
     338:	71 05       	cpc	r23, r1
     33a:	64 f5       	brge	.+88     	; 0x394 <__pack_f+0x172>
     33c:	fb 01       	movw	r30, r22
     33e:	e1 58       	subi	r30, 0x81	; 129
     340:	ff 4f       	sbci	r31, 0xFF	; 255
     342:	d8 01       	movw	r26, r16
     344:	c7 01       	movw	r24, r14
     346:	8f 77       	andi	r24, 0x7F	; 127
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	80 34       	cpi	r24, 0x40	; 64
     350:	91 05       	cpc	r25, r1
     352:	a1 05       	cpc	r26, r1
     354:	b1 05       	cpc	r27, r1
     356:	39 f4       	brne	.+14     	; 0x366 <__pack_f+0x144>
     358:	e7 fe       	sbrs	r14, 7
     35a:	0d c0       	rjmp	.+26     	; 0x376 <__pack_f+0x154>
     35c:	80 e4       	ldi	r24, 0x40	; 64
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	a0 e0       	ldi	r26, 0x00	; 0
     362:	b0 e0       	ldi	r27, 0x00	; 0
     364:	04 c0       	rjmp	.+8      	; 0x36e <__pack_f+0x14c>
     366:	8f e3       	ldi	r24, 0x3F	; 63
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	a0 e0       	ldi	r26, 0x00	; 0
     36c:	b0 e0       	ldi	r27, 0x00	; 0
     36e:	e8 0e       	add	r14, r24
     370:	f9 1e       	adc	r15, r25
     372:	0a 1f       	adc	r16, r26
     374:	1b 1f       	adc	r17, r27
     376:	17 ff       	sbrs	r17, 7
     378:	05 c0       	rjmp	.+10     	; 0x384 <__pack_f+0x162>
     37a:	16 95       	lsr	r17
     37c:	07 95       	ror	r16
     37e:	f7 94       	ror	r15
     380:	e7 94       	ror	r14
     382:	31 96       	adiw	r30, 0x01	; 1
     384:	87 e0       	ldi	r24, 0x07	; 7
     386:	16 95       	lsr	r17
     388:	07 95       	ror	r16
     38a:	f7 94       	ror	r15
     38c:	e7 94       	ror	r14
     38e:	8a 95       	dec	r24
     390:	d1 f7       	brne	.-12     	; 0x386 <__pack_f+0x164>
     392:	05 c0       	rjmp	.+10     	; 0x39e <__pack_f+0x17c>
     394:	ee 24       	eor	r14, r14
     396:	ff 24       	eor	r15, r15
     398:	87 01       	movw	r16, r14
     39a:	ef ef       	ldi	r30, 0xFF	; 255
     39c:	f0 e0       	ldi	r31, 0x00	; 0
     39e:	6e 2f       	mov	r22, r30
     3a0:	67 95       	ror	r22
     3a2:	66 27       	eor	r22, r22
     3a4:	67 95       	ror	r22
     3a6:	90 2f       	mov	r25, r16
     3a8:	9f 77       	andi	r25, 0x7F	; 127
     3aa:	d7 94       	ror	r13
     3ac:	dd 24       	eor	r13, r13
     3ae:	d7 94       	ror	r13
     3b0:	8e 2f       	mov	r24, r30
     3b2:	86 95       	lsr	r24
     3b4:	49 2f       	mov	r20, r25
     3b6:	46 2b       	or	r20, r22
     3b8:	58 2f       	mov	r21, r24
     3ba:	5d 29       	or	r21, r13
     3bc:	b7 01       	movw	r22, r14
     3be:	ca 01       	movw	r24, r20
     3c0:	1f 91       	pop	r17
     3c2:	0f 91       	pop	r16
     3c4:	ff 90       	pop	r15
     3c6:	ef 90       	pop	r14
     3c8:	df 90       	pop	r13
     3ca:	08 95       	ret

000003cc <UART_enuInit>:
#include "UART_Priv.h"
#include "UART_Cnfg.h"


void UART_enuInit( void )
{
     3cc:	df 93       	push	r29
     3ce:	cf 93       	push	r28
     3d0:	cd b7       	in	r28, 0x3d	; 61
     3d2:	de b7       	in	r29, 0x3e	; 62
	 *                                                                           *
	 *                               5.4_ For Asynchronous mode .                *
	 *                                          Clear UCPOL Bit.                 *
	 *                                                                           *
	 ****************************************************************************/
	UCSRC =( (UART_MSK_BIT<<URSEL)|(UART_MSK_BIT<<UCSZ0)|(UART_MSK_BIT<<UCSZ1)  );
     3d4:	e0 e4       	ldi	r30, 0x40	; 64
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	86 e8       	ldi	r24, 0x86	; 134
     3da:	80 83       	st	Z, r24

	UCSRA  &=~(UART_MSK_BIT<<U2X);

#elif UART_SPEED_MODE == DOUBLE

	UCSRA  |=(UART_MSK_BIT<<U2X);
     3dc:	ab e2       	ldi	r26, 0x2B	; 43
     3de:	b0 e0       	ldi	r27, 0x00	; 0
     3e0:	eb e2       	ldi	r30, 0x2B	; 43
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	80 81       	ld	r24, Z
     3e6:	82 60       	ori	r24, 0x02	; 2
     3e8:	8c 93       	st	X, r24

#endif



	UBRRL = MY_UBRRL  ;
     3ea:	e9 e2       	ldi	r30, 0x29	; 41
     3ec:	f0 e0       	ldi	r31, 0x00	; 0
     3ee:	8c e0       	ldi	r24, 0x0C	; 12
     3f0:	80 83       	st	Z, r24
	UBRRH = MY_UBRRH  ;
     3f2:	e0 e4       	ldi	r30, 0x40	; 64
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	10 82       	st	Z, r1
	UART_RX_START();

#elif   UART_MODE   == TRANSCEIVER

	//3.Enable the  RXEN and TXEN Bit
	UART_TX_START();
     3f8:	aa e2       	ldi	r26, 0x2A	; 42
     3fa:	b0 e0       	ldi	r27, 0x00	; 0
     3fc:	ea e2       	ldi	r30, 0x2A	; 42
     3fe:	f0 e0       	ldi	r31, 0x00	; 0
     400:	80 81       	ld	r24, Z
     402:	88 60       	ori	r24, 0x08	; 8
     404:	8c 93       	st	X, r24
	UART_RX_START();
     406:	aa e2       	ldi	r26, 0x2A	; 42
     408:	b0 e0       	ldi	r27, 0x00	; 0
     40a:	ea e2       	ldi	r30, 0x2A	; 42
     40c:	f0 e0       	ldi	r31, 0x00	; 0
     40e:	80 81       	ld	r24, Z
     410:	80 61       	ori	r24, 0x10	; 16
     412:	8c 93       	st	X, r24


	//2.Configure the UART Multi-processor Communication Mode.
#if  UART_MPC_MODE   ==  DISABLE_MPCM

	UCSRA  &=~(UART_MSK_BIT<<MPCM);
     414:	ab e2       	ldi	r26, 0x2B	; 43
     416:	b0 e0       	ldi	r27, 0x00	; 0
     418:	eb e2       	ldi	r30, 0x2B	; 43
     41a:	f0 e0       	ldi	r31, 0x00	; 0
     41c:	80 81       	ld	r24, Z
     41e:	8e 7f       	andi	r24, 0xFE	; 254
     420:	8c 93       	st	X, r24

	UCSRA  |=(UART_MSK_BIT<<MPCM);

#endif

}//End of UART_
     422:	cf 91       	pop	r28
     424:	df 91       	pop	r29
     426:	08 95       	ret

00000428 <UART_enuSendByte>:



ES_t UART_enuSendByte(u8 Copy_u8Data)
{
     428:	df 93       	push	r29
     42a:	cf 93       	push	r28
     42c:	00 d0       	rcall	.+0      	; 0x42e <UART_enuSendByte+0x6>
     42e:	cd b7       	in	r28, 0x3d	; 61
     430:	de b7       	in	r29, 0x3e	; 62
     432:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState  = ES_NOK ;
     434:	19 82       	std	Y+1, r1	; 0x01

	// Poll the for the UDRE
	while( !((UCSRA>>UDRE)&1) );
     436:	eb e2       	ldi	r30, 0x2B	; 43
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	80 81       	ld	r24, Z
     43c:	82 95       	swap	r24
     43e:	86 95       	lsr	r24
     440:	87 70       	andi	r24, 0x07	; 7
     442:	88 2f       	mov	r24, r24
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	81 70       	andi	r24, 0x01	; 1
     448:	90 70       	andi	r25, 0x00	; 0
     44a:	00 97       	sbiw	r24, 0x00	; 0
     44c:	a1 f3       	breq	.-24     	; 0x436 <UART_enuSendByte+0xe>

	UDR = Copy_u8Data  ;
     44e:	ec e2       	ldi	r30, 0x2C	; 44
     450:	f0 e0       	ldi	r31, 0x00	; 0
     452:	8a 81       	ldd	r24, Y+2	; 0x02
     454:	80 83       	st	Z, r24

	//Check for the Completion of Transmittioin.
	if( (UCSRA>>TXC)&1 )
     456:	eb e2       	ldi	r30, 0x2B	; 43
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	80 81       	ld	r24, Z
     45c:	82 95       	swap	r24
     45e:	86 95       	lsr	r24
     460:	86 95       	lsr	r24
     462:	83 70       	andi	r24, 0x03	; 3
     464:	88 2f       	mov	r24, r24
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	81 70       	andi	r24, 0x01	; 1
     46a:	90 70       	andi	r25, 0x00	; 0
     46c:	88 23       	and	r24, r24
     46e:	49 f0       	breq	.+18     	; 0x482 <UART_enuSendByte+0x5a>
	{
		//Clear the flag.
		UCSRA |=(UART_MSK_BIT<<TXC);
     470:	ab e2       	ldi	r26, 0x2B	; 43
     472:	b0 e0       	ldi	r27, 0x00	; 0
     474:	eb e2       	ldi	r30, 0x2B	; 43
     476:	f0 e0       	ldi	r31, 0x00	; 0
     478:	80 81       	ld	r24, Z
     47a:	80 64       	ori	r24, 0x40	; 64
     47c:	8c 93       	st	X, r24

		Local_enuErrorState = ES_OK ;
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		//Do nothing.
	}

	return Local_enuErrorState  ;
     482:	89 81       	ldd	r24, Y+1	; 0x01
}//End of UART_enuSendByte().
     484:	0f 90       	pop	r0
     486:	0f 90       	pop	r0
     488:	cf 91       	pop	r28
     48a:	df 91       	pop	r29
     48c:	08 95       	ret

0000048e <UART_enuRecieveByte>:


ES_t UART_enuRecieveByte( u8* Copy_u8Data )
{
     48e:	df 93       	push	r29
     490:	cf 93       	push	r28
     492:	00 d0       	rcall	.+0      	; 0x494 <UART_enuRecieveByte+0x6>
     494:	0f 92       	push	r0
     496:	cd b7       	in	r28, 0x3d	; 61
     498:	de b7       	in	r29, 0x3e	; 62
     49a:	9b 83       	std	Y+3, r25	; 0x03
     49c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState  = ES_NOK ;
     49e:	19 82       	std	Y+1, r1	; 0x01

	if(  Copy_u8Data != NULL  )
     4a0:	8a 81       	ldd	r24, Y+2	; 0x02
     4a2:	9b 81       	ldd	r25, Y+3	; 0x03
     4a4:	00 97       	sbiw	r24, 0x00	; 0
     4a6:	71 f0       	breq	.+28     	; 0x4c4 <UART_enuRecieveByte+0x36>
	{
		//There is NO Data to Read.
		while( !(( UCSRA>>RXC)&1) );
     4a8:	eb e2       	ldi	r30, 0x2B	; 43
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	80 81       	ld	r24, Z
     4ae:	88 23       	and	r24, r24
     4b0:	dc f7       	brge	.-10     	; 0x4a8 <UART_enuRecieveByte+0x1a>

		*Copy_u8Data = UDR ;
     4b2:	ec e2       	ldi	r30, 0x2C	; 44
     4b4:	f0 e0       	ldi	r31, 0x00	; 0
     4b6:	80 81       	ld	r24, Z
     4b8:	ea 81       	ldd	r30, Y+2	; 0x02
     4ba:	fb 81       	ldd	r31, Y+3	; 0x03
     4bc:	80 83       	st	Z, r24

		Local_enuErrorState  = ES_OK ;
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	89 83       	std	Y+1, r24	; 0x01
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <UART_enuRecieveByte+0x3a>
	}
	else
	{
		Local_enuErrorState  = ES_NULL_POINTER;
     4c4:	82 e0       	ldi	r24, 0x02	; 2
     4c6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState  ;
     4c8:	89 81       	ldd	r24, Y+1	; 0x01
}//End of UART_enuRecieveByte().
     4ca:	0f 90       	pop	r0
     4cc:	0f 90       	pop	r0
     4ce:	0f 90       	pop	r0
     4d0:	cf 91       	pop	r28
     4d2:	df 91       	pop	r29
     4d4:	08 95       	ret

000004d6 <UART_enuSendString>:

//          UART_enuSendString( arr );

ES_t UART_enuSendString( const u8* Copy_pcData)
{
     4d6:	df 93       	push	r29
     4d8:	cf 93       	push	r28
     4da:	00 d0       	rcall	.+0      	; 0x4dc <UART_enuSendString+0x6>
     4dc:	0f 92       	push	r0
     4de:	cd b7       	in	r28, 0x3d	; 61
     4e0:	de b7       	in	r29, 0x3e	; 62
     4e2:	9b 83       	std	Y+3, r25	; 0x03
     4e4:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState  = ES_NOK ;
     4e6:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_pcData != NULL )
     4e8:	8a 81       	ldd	r24, Y+2	; 0x02
     4ea:	9b 81       	ldd	r25, Y+3	; 0x03
     4ec:	00 97       	sbiw	r24, 0x00	; 0
     4ee:	01 f1       	breq	.+64     	; 0x530 <UART_enuSendString+0x5a>
     4f0:	17 c0       	rjmp	.+46     	; 0x520 <UART_enuSendString+0x4a>
	{

		while( *Copy_pcData != '\0')
		{

			while( !((UCSRA>>UDRE)&1) );
     4f2:	eb e2       	ldi	r30, 0x2B	; 43
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	80 81       	ld	r24, Z
     4f8:	82 95       	swap	r24
     4fa:	86 95       	lsr	r24
     4fc:	87 70       	andi	r24, 0x07	; 7
     4fe:	88 2f       	mov	r24, r24
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	81 70       	andi	r24, 0x01	; 1
     504:	90 70       	andi	r25, 0x00	; 0
     506:	00 97       	sbiw	r24, 0x00	; 0
     508:	a1 f3       	breq	.-24     	; 0x4f2 <UART_enuSendString+0x1c>

			UDR = *Copy_pcData ;
     50a:	ac e2       	ldi	r26, 0x2C	; 44
     50c:	b0 e0       	ldi	r27, 0x00	; 0
     50e:	ea 81       	ldd	r30, Y+2	; 0x02
     510:	fb 81       	ldd	r31, Y+3	; 0x03
     512:	80 81       	ld	r24, Z
     514:	8c 93       	st	X, r24

			Copy_pcData++ ;
     516:	8a 81       	ldd	r24, Y+2	; 0x02
     518:	9b 81       	ldd	r25, Y+3	; 0x03
     51a:	01 96       	adiw	r24, 0x01	; 1
     51c:	9b 83       	std	Y+3, r25	; 0x03
     51e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState  = ES_NOK ;

	if( Copy_pcData != NULL )
	{

		while( *Copy_pcData != '\0')
     520:	ea 81       	ldd	r30, Y+2	; 0x02
     522:	fb 81       	ldd	r31, Y+3	; 0x03
     524:	80 81       	ld	r24, Z
     526:	88 23       	and	r24, r24
     528:	21 f7       	brne	.-56     	; 0x4f2 <UART_enuSendString+0x1c>

			Copy_pcData++ ;

		}

		Local_enuErrorState  = ES_OK ;
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	89 83       	std	Y+1, r24	; 0x01
     52e:	02 c0       	rjmp	.+4      	; 0x534 <UART_enuSendString+0x5e>
	}
	else
	{
		Local_enuErrorState  = ES_NULL_POINTER ;
     530:	82 e0       	ldi	r24, 0x02	; 2
     532:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState  ;
     534:	89 81       	ldd	r24, Y+1	; 0x01
}//End of UART_enuRecieveByte().
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
     53a:	0f 90       	pop	r0
     53c:	cf 91       	pop	r28
     53e:	df 91       	pop	r29
     540:	08 95       	ret

00000542 <UART_enuReceiveString>:



ES_t UART_enuReceiveString(u8*  Copy_pcData)
{
     542:	df 93       	push	r29
     544:	cf 93       	push	r28
     546:	00 d0       	rcall	.+0      	; 0x548 <UART_enuReceiveString+0x6>
     548:	00 d0       	rcall	.+0      	; 0x54a <UART_enuReceiveString+0x8>
     54a:	00 d0       	rcall	.+0      	; 0x54c <UART_enuReceiveString+0xa>
     54c:	cd b7       	in	r28, 0x3d	; 61
     54e:	de b7       	in	r29, 0x3e	; 62
     550:	9e 83       	std	Y+6, r25	; 0x06
     552:	8d 83       	std	Y+5, r24	; 0x05
	ES_t Local_enuErrorState  = ES_NOK ;
     554:	1c 82       	std	Y+4, r1	; 0x04

	if( Copy_pcData != 	NULL )
     556:	8d 81       	ldd	r24, Y+5	; 0x05
     558:	9e 81       	ldd	r25, Y+6	; 0x06
     55a:	00 97       	sbiw	r24, 0x00	; 0
     55c:	91 f1       	breq	.+100    	; 0x5c2 <UART_enuReceiveString+0x80>
	{
		u8 Local_u8Data  = 0  ;
     55e:	1b 82       	std	Y+3, r1	; 0x03

		u8 Local_u8Index = 0  ;
     560:	1a 82       	std	Y+2, r1	; 0x02

		while( !((UCSRA>>RXC)&1) );
     562:	eb e2       	ldi	r30, 0x2B	; 43
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	80 81       	ld	r24, Z
     568:	88 23       	and	r24, r24
     56a:	dc f7       	brge	.-10     	; 0x562 <UART_enuReceiveString+0x20>

		u8 Local_u8Terminator = UDR ;
     56c:	ec e2       	ldi	r30, 0x2C	; 44
     56e:	f0 e0       	ldi	r31, 0x00	; 0
     570:	80 81       	ld	r24, Z
     572:	89 83       	std	Y+1, r24	; 0x01

		while(1)
		{
			while( !((UCSRA>>RXC)&1) );
     574:	eb e2       	ldi	r30, 0x2B	; 43
     576:	f0 e0       	ldi	r31, 0x00	; 0
     578:	80 81       	ld	r24, Z
     57a:	88 23       	and	r24, r24
     57c:	dc f7       	brge	.-10     	; 0x574 <UART_enuReceiveString+0x32>

			Local_u8Data = UDR ;
     57e:	ec e2       	ldi	r30, 0x2C	; 44
     580:	f0 e0       	ldi	r31, 0x00	; 0
     582:	80 81       	ld	r24, Z
     584:	8b 83       	std	Y+3, r24	; 0x03

			if(Local_u8Data == Local_u8Terminator )
     586:	9b 81       	ldd	r25, Y+3	; 0x03
     588:	89 81       	ldd	r24, Y+1	; 0x01
     58a:	98 17       	cp	r25, r24
     58c:	61 f4       	brne	.+24     	; 0x5a6 <UART_enuReceiveString+0x64>
			{
				Copy_pcData[Local_u8Index] = '\0' ;
     58e:	8a 81       	ldd	r24, Y+2	; 0x02
     590:	28 2f       	mov	r18, r24
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	8d 81       	ldd	r24, Y+5	; 0x05
     596:	9e 81       	ldd	r25, Y+6	; 0x06
     598:	fc 01       	movw	r30, r24
     59a:	e2 0f       	add	r30, r18
     59c:	f3 1f       	adc	r31, r19
     59e:	10 82       	st	Z, r1
				Local_u8Index++ ;
			}

		}

		Local_enuErrorState = ES_OK ;
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	8c 83       	std	Y+4, r24	; 0x04
     5a4:	10 c0       	rjmp	.+32     	; 0x5c6 <UART_enuReceiveString+0x84>

				break;
			}
			else
			{
				Copy_pcData[Local_u8Index] = Local_u8Data ;
     5a6:	8a 81       	ldd	r24, Y+2	; 0x02
     5a8:	28 2f       	mov	r18, r24
     5aa:	30 e0       	ldi	r19, 0x00	; 0
     5ac:	8d 81       	ldd	r24, Y+5	; 0x05
     5ae:	9e 81       	ldd	r25, Y+6	; 0x06
     5b0:	fc 01       	movw	r30, r24
     5b2:	e2 0f       	add	r30, r18
     5b4:	f3 1f       	adc	r31, r19
     5b6:	8b 81       	ldd	r24, Y+3	; 0x03
     5b8:	80 83       	st	Z, r24

				Local_u8Index++ ;
     5ba:	8a 81       	ldd	r24, Y+2	; 0x02
     5bc:	8f 5f       	subi	r24, 0xFF	; 255
     5be:	8a 83       	std	Y+2, r24	; 0x02
     5c0:	d9 cf       	rjmp	.-78     	; 0x574 <UART_enuReceiveString+0x32>

		Local_enuErrorState = ES_OK ;
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER ;
     5c2:	82 e0       	ldi	r24, 0x02	; 2
     5c4:	8c 83       	std	Y+4, r24	; 0x04
	}

	return Local_enuErrorState  ;
     5c6:	8c 81       	ldd	r24, Y+4	; 0x04
}//End of UART_enuRecieveByte().
     5c8:	26 96       	adiw	r28, 0x06	; 6
     5ca:	0f b6       	in	r0, 0x3f	; 63
     5cc:	f8 94       	cli
     5ce:	de bf       	out	0x3e, r29	; 62
     5d0:	0f be       	out	0x3f, r0	; 63
     5d2:	cd bf       	out	0x3d, r28	; 61
     5d4:	cf 91       	pop	r28
     5d6:	df 91       	pop	r29
     5d8:	08 95       	ret

000005da <DIO_enuSetPortDirection>:
/*                 : Arg.2: Copy_u8Dir:                                     */
/*                                        DIO_INPTU_PIN  ,   DIO_OUTPUT_PIN */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Dir)
{
     5da:	df 93       	push	r29
     5dc:	cf 93       	push	r28
     5de:	00 d0       	rcall	.+0      	; 0x5e0 <DIO_enuSetPortDirection+0x6>
     5e0:	00 d0       	rcall	.+0      	; 0x5e2 <DIO_enuSetPortDirection+0x8>
     5e2:	0f 92       	push	r0
     5e4:	cd b7       	in	r28, 0x3d	; 61
     5e6:	de b7       	in	r29, 0x3e	; 62
     5e8:	8a 83       	std	Y+2, r24	; 0x02
     5ea:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuerrorState = ES_NOK ;
     5ec:	19 82       	std	Y+1, r1	; 0x01

	if( (Copy_u8PortID <= DIO_PORTD )&& (Copy_u8Dir <= OUTPUT_PORT)  )
     5ee:	8a 81       	ldd	r24, Y+2	; 0x02
     5f0:	84 30       	cpi	r24, 0x04	; 4
     5f2:	a8 f5       	brcc	.+106    	; 0x65e <DIO_enuSetPortDirection+0x84>
	{
		switch( Copy_u8PortID )
     5f4:	8a 81       	ldd	r24, Y+2	; 0x02
     5f6:	28 2f       	mov	r18, r24
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	3d 83       	std	Y+5, r19	; 0x05
     5fc:	2c 83       	std	Y+4, r18	; 0x04
     5fe:	8c 81       	ldd	r24, Y+4	; 0x04
     600:	9d 81       	ldd	r25, Y+5	; 0x05
     602:	81 30       	cpi	r24, 0x01	; 1
     604:	91 05       	cpc	r25, r1
     606:	d1 f0       	breq	.+52     	; 0x63c <DIO_enuSetPortDirection+0x62>
     608:	2c 81       	ldd	r18, Y+4	; 0x04
     60a:	3d 81       	ldd	r19, Y+5	; 0x05
     60c:	22 30       	cpi	r18, 0x02	; 2
     60e:	31 05       	cpc	r19, r1
     610:	2c f4       	brge	.+10     	; 0x61c <DIO_enuSetPortDirection+0x42>
     612:	8c 81       	ldd	r24, Y+4	; 0x04
     614:	9d 81       	ldd	r25, Y+5	; 0x05
     616:	00 97       	sbiw	r24, 0x00	; 0
     618:	61 f0       	breq	.+24     	; 0x632 <DIO_enuSetPortDirection+0x58>
     61a:	1e c0       	rjmp	.+60     	; 0x658 <DIO_enuSetPortDirection+0x7e>
     61c:	2c 81       	ldd	r18, Y+4	; 0x04
     61e:	3d 81       	ldd	r19, Y+5	; 0x05
     620:	22 30       	cpi	r18, 0x02	; 2
     622:	31 05       	cpc	r19, r1
     624:	81 f0       	breq	.+32     	; 0x646 <DIO_enuSetPortDirection+0x6c>
     626:	8c 81       	ldd	r24, Y+4	; 0x04
     628:	9d 81       	ldd	r25, Y+5	; 0x05
     62a:	83 30       	cpi	r24, 0x03	; 3
     62c:	91 05       	cpc	r25, r1
     62e:	81 f0       	breq	.+32     	; 0x650 <DIO_enuSetPortDirection+0x76>
     630:	13 c0       	rjmp	.+38     	; 0x658 <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA :
			DDRA = Copy_u8Dir;
     632:	ea e3       	ldi	r30, 0x3A	; 58
     634:	f0 e0       	ldi	r31, 0x00	; 0
     636:	8b 81       	ldd	r24, Y+3	; 0x03
     638:	80 83       	st	Z, r24
     63a:	0e c0       	rjmp	.+28     	; 0x658 <DIO_enuSetPortDirection+0x7e>
			break;

		case DIO_PORTB :
			DDRB = Copy_u8Dir;
     63c:	e7 e3       	ldi	r30, 0x37	; 55
     63e:	f0 e0       	ldi	r31, 0x00	; 0
     640:	8b 81       	ldd	r24, Y+3	; 0x03
     642:	80 83       	st	Z, r24
     644:	09 c0       	rjmp	.+18     	; 0x658 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC :
			DDRC = Copy_u8Dir;
     646:	e4 e3       	ldi	r30, 0x34	; 52
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	8b 81       	ldd	r24, Y+3	; 0x03
     64c:	80 83       	st	Z, r24
     64e:	04 c0       	rjmp	.+8      	; 0x658 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD :
			DDRD = Copy_u8Dir;
     650:	e1 e3       	ldi	r30, 0x31	; 49
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	8b 81       	ldd	r24, Y+3	; 0x03
     656:	80 83       	st	Z, r24
			break;
		}
		Local_enuerrorState = ES_OK;
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	89 83       	std	Y+1, r24	; 0x01
     65c:	02 c0       	rjmp	.+4      	; 0x662 <DIO_enuSetPortDirection+0x88>

	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
     65e:	83 e0       	ldi	r24, 0x03	; 3
     660:	89 83       	std	Y+1, r24	; 0x01

	}


	return Local_enuerrorState  ;
     662:	89 81       	ldd	r24, Y+1	; 0x01

}//End of DIO_enuSetPortDirection().
     664:	0f 90       	pop	r0
     666:	0f 90       	pop	r0
     668:	0f 90       	pop	r0
     66a:	0f 90       	pop	r0
     66c:	0f 90       	pop	r0
     66e:	cf 91       	pop	r28
     670:	df 91       	pop	r29
     672:	08 95       	ret

00000674 <DIO_enuSetPortValue>:
/*                 : Arg.2: Copy_u8Val:                                     */
/*                                        DIO_INPTU_PIN  ,  DIO_OUTPUT_PIN  */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuSetPortValue(u8 Copy_u8PortID, u8 Copy_u8Val)
{
     674:	df 93       	push	r29
     676:	cf 93       	push	r28
     678:	00 d0       	rcall	.+0      	; 0x67a <DIO_enuSetPortValue+0x6>
     67a:	00 d0       	rcall	.+0      	; 0x67c <DIO_enuSetPortValue+0x8>
     67c:	0f 92       	push	r0
     67e:	cd b7       	in	r28, 0x3d	; 61
     680:	de b7       	in	r29, 0x3e	; 62
     682:	8a 83       	std	Y+2, r24	; 0x02
     684:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuerrorState = ES_NOK ;
     686:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8PortID <= DIO_PORTD )
     688:	8a 81       	ldd	r24, Y+2	; 0x02
     68a:	84 30       	cpi	r24, 0x04	; 4
     68c:	a8 f5       	brcc	.+106    	; 0x6f8 <DIO_enuSetPortValue+0x84>
	{
		switch( Copy_u8PortID )
     68e:	8a 81       	ldd	r24, Y+2	; 0x02
     690:	28 2f       	mov	r18, r24
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	3d 83       	std	Y+5, r19	; 0x05
     696:	2c 83       	std	Y+4, r18	; 0x04
     698:	8c 81       	ldd	r24, Y+4	; 0x04
     69a:	9d 81       	ldd	r25, Y+5	; 0x05
     69c:	81 30       	cpi	r24, 0x01	; 1
     69e:	91 05       	cpc	r25, r1
     6a0:	d1 f0       	breq	.+52     	; 0x6d6 <DIO_enuSetPortValue+0x62>
     6a2:	2c 81       	ldd	r18, Y+4	; 0x04
     6a4:	3d 81       	ldd	r19, Y+5	; 0x05
     6a6:	22 30       	cpi	r18, 0x02	; 2
     6a8:	31 05       	cpc	r19, r1
     6aa:	2c f4       	brge	.+10     	; 0x6b6 <DIO_enuSetPortValue+0x42>
     6ac:	8c 81       	ldd	r24, Y+4	; 0x04
     6ae:	9d 81       	ldd	r25, Y+5	; 0x05
     6b0:	00 97       	sbiw	r24, 0x00	; 0
     6b2:	61 f0       	breq	.+24     	; 0x6cc <DIO_enuSetPortValue+0x58>
     6b4:	1e c0       	rjmp	.+60     	; 0x6f2 <DIO_enuSetPortValue+0x7e>
     6b6:	2c 81       	ldd	r18, Y+4	; 0x04
     6b8:	3d 81       	ldd	r19, Y+5	; 0x05
     6ba:	22 30       	cpi	r18, 0x02	; 2
     6bc:	31 05       	cpc	r19, r1
     6be:	81 f0       	breq	.+32     	; 0x6e0 <DIO_enuSetPortValue+0x6c>
     6c0:	8c 81       	ldd	r24, Y+4	; 0x04
     6c2:	9d 81       	ldd	r25, Y+5	; 0x05
     6c4:	83 30       	cpi	r24, 0x03	; 3
     6c6:	91 05       	cpc	r25, r1
     6c8:	81 f0       	breq	.+32     	; 0x6ea <DIO_enuSetPortValue+0x76>
     6ca:	13 c0       	rjmp	.+38     	; 0x6f2 <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA :
			PORTA = Copy_u8Val;
     6cc:	eb e3       	ldi	r30, 0x3B	; 59
     6ce:	f0 e0       	ldi	r31, 0x00	; 0
     6d0:	8b 81       	ldd	r24, Y+3	; 0x03
     6d2:	80 83       	st	Z, r24
     6d4:	0e c0       	rjmp	.+28     	; 0x6f2 <DIO_enuSetPortValue+0x7e>
			break;

		case DIO_PORTB :
			PORTB = Copy_u8Val;
     6d6:	e8 e3       	ldi	r30, 0x38	; 56
     6d8:	f0 e0       	ldi	r31, 0x00	; 0
     6da:	8b 81       	ldd	r24, Y+3	; 0x03
     6dc:	80 83       	st	Z, r24
     6de:	09 c0       	rjmp	.+18     	; 0x6f2 <DIO_enuSetPortValue+0x7e>
			break;

		case DIO_PORTC :
			PORTC = Copy_u8Val;
     6e0:	e5 e3       	ldi	r30, 0x35	; 53
     6e2:	f0 e0       	ldi	r31, 0x00	; 0
     6e4:	8b 81       	ldd	r24, Y+3	; 0x03
     6e6:	80 83       	st	Z, r24
     6e8:	04 c0       	rjmp	.+8      	; 0x6f2 <DIO_enuSetPortValue+0x7e>
			break;

		case DIO_PORTD :
			PORTD = Copy_u8Val;
     6ea:	e2 e3       	ldi	r30, 0x32	; 50
     6ec:	f0 e0       	ldi	r31, 0x00	; 0
     6ee:	8b 81       	ldd	r24, Y+3	; 0x03
     6f0:	80 83       	st	Z, r24
			break;
		}

		Local_enuerrorState = ES_OK;
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	89 83       	std	Y+1, r24	; 0x01
     6f6:	02 c0       	rjmp	.+4      	; 0x6fc <DIO_enuSetPortValue+0x88>

	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
     6f8:	83 e0       	ldi	r24, 0x03	; 3
     6fa:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuerrorState  ;
     6fc:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuSetPortValue().
     6fe:	0f 90       	pop	r0
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	0f 90       	pop	r0
     706:	0f 90       	pop	r0
     708:	cf 91       	pop	r28
     70a:	df 91       	pop	r29
     70c:	08 95       	ret

0000070e <DIO_enuToggelPort>:
/*                                        DIO_PORTA      ,   DIO_PORTA      */
/*                                        DIO_PORTA      ,   DIO_PORTA      */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuToggelPort(u8  Copy_u8PortID )
{
     70e:	df 93       	push	r29
     710:	cf 93       	push	r28
     712:	00 d0       	rcall	.+0      	; 0x714 <DIO_enuToggelPort+0x6>
     714:	00 d0       	rcall	.+0      	; 0x716 <DIO_enuToggelPort+0x8>
     716:	cd b7       	in	r28, 0x3d	; 61
     718:	de b7       	in	r29, 0x3e	; 62
     71a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuerrorState = ES_NOK ;
     71c:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8PortID <= DIO_PORTD )
     71e:	8a 81       	ldd	r24, Y+2	; 0x02
     720:	84 30       	cpi	r24, 0x04	; 4
     722:	08 f0       	brcs	.+2      	; 0x726 <DIO_enuToggelPort+0x18>
     724:	41 c0       	rjmp	.+130    	; 0x7a8 <DIO_enuToggelPort+0x9a>
	{
		switch( Copy_u8PortID )
     726:	8a 81       	ldd	r24, Y+2	; 0x02
     728:	28 2f       	mov	r18, r24
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	3c 83       	std	Y+4, r19	; 0x04
     72e:	2b 83       	std	Y+3, r18	; 0x03
     730:	8b 81       	ldd	r24, Y+3	; 0x03
     732:	9c 81       	ldd	r25, Y+4	; 0x04
     734:	81 30       	cpi	r24, 0x01	; 1
     736:	91 05       	cpc	r25, r1
     738:	e9 f0       	breq	.+58     	; 0x774 <DIO_enuToggelPort+0x66>
     73a:	2b 81       	ldd	r18, Y+3	; 0x03
     73c:	3c 81       	ldd	r19, Y+4	; 0x04
     73e:	22 30       	cpi	r18, 0x02	; 2
     740:	31 05       	cpc	r19, r1
     742:	2c f4       	brge	.+10     	; 0x74e <DIO_enuToggelPort+0x40>
     744:	8b 81       	ldd	r24, Y+3	; 0x03
     746:	9c 81       	ldd	r25, Y+4	; 0x04
     748:	00 97       	sbiw	r24, 0x00	; 0
     74a:	61 f0       	breq	.+24     	; 0x764 <DIO_enuToggelPort+0x56>
     74c:	2a c0       	rjmp	.+84     	; 0x7a2 <DIO_enuToggelPort+0x94>
     74e:	2b 81       	ldd	r18, Y+3	; 0x03
     750:	3c 81       	ldd	r19, Y+4	; 0x04
     752:	22 30       	cpi	r18, 0x02	; 2
     754:	31 05       	cpc	r19, r1
     756:	b1 f0       	breq	.+44     	; 0x784 <DIO_enuToggelPort+0x76>
     758:	8b 81       	ldd	r24, Y+3	; 0x03
     75a:	9c 81       	ldd	r25, Y+4	; 0x04
     75c:	83 30       	cpi	r24, 0x03	; 3
     75e:	91 05       	cpc	r25, r1
     760:	c9 f0       	breq	.+50     	; 0x794 <DIO_enuToggelPort+0x86>
     762:	1f c0       	rjmp	.+62     	; 0x7a2 <DIO_enuToggelPort+0x94>
		{
		case DIO_PORTA :
			PORTA = ~PORTA;
     764:	ab e3       	ldi	r26, 0x3B	; 59
     766:	b0 e0       	ldi	r27, 0x00	; 0
     768:	eb e3       	ldi	r30, 0x3B	; 59
     76a:	f0 e0       	ldi	r31, 0x00	; 0
     76c:	80 81       	ld	r24, Z
     76e:	80 95       	com	r24
     770:	8c 93       	st	X, r24
     772:	17 c0       	rjmp	.+46     	; 0x7a2 <DIO_enuToggelPort+0x94>
			break;

		case DIO_PORTB :
			PORTB = ~PORTB;
     774:	a8 e3       	ldi	r26, 0x38	; 56
     776:	b0 e0       	ldi	r27, 0x00	; 0
     778:	e8 e3       	ldi	r30, 0x38	; 56
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	80 81       	ld	r24, Z
     77e:	80 95       	com	r24
     780:	8c 93       	st	X, r24
     782:	0f c0       	rjmp	.+30     	; 0x7a2 <DIO_enuToggelPort+0x94>
			break;

		case DIO_PORTC :
			PORTC = ~PORTC;
     784:	a5 e3       	ldi	r26, 0x35	; 53
     786:	b0 e0       	ldi	r27, 0x00	; 0
     788:	e5 e3       	ldi	r30, 0x35	; 53
     78a:	f0 e0       	ldi	r31, 0x00	; 0
     78c:	80 81       	ld	r24, Z
     78e:	80 95       	com	r24
     790:	8c 93       	st	X, r24
     792:	07 c0       	rjmp	.+14     	; 0x7a2 <DIO_enuToggelPort+0x94>
			break;

		case DIO_PORTD :
			PORTD = ~PORTD ;
     794:	a2 e3       	ldi	r26, 0x32	; 50
     796:	b0 e0       	ldi	r27, 0x00	; 0
     798:	e2 e3       	ldi	r30, 0x32	; 50
     79a:	f0 e0       	ldi	r31, 0x00	; 0
     79c:	80 81       	ld	r24, Z
     79e:	80 95       	com	r24
     7a0:	8c 93       	st	X, r24
			break;
		}

		Local_enuerrorState = ES_OK;
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	89 83       	std	Y+1, r24	; 0x01
     7a6:	02 c0       	rjmp	.+4      	; 0x7ac <DIO_enuToggelPort+0x9e>

	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
     7a8:	83 e0       	ldi	r24, 0x03	; 3
     7aa:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuerrorState  ;
     7ac:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuToggelPort().
     7ae:	0f 90       	pop	r0
     7b0:	0f 90       	pop	r0
     7b2:	0f 90       	pop	r0
     7b4:	0f 90       	pop	r0
     7b6:	cf 91       	pop	r28
     7b8:	df 91       	pop	r29
     7ba:	08 95       	ret

000007bc <DIO_enuGetPortVlaue>:
/*                                                                          */
/*                 : Arg.2: Address of u8 variable.                         */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuGetPortVlaue(u8 Copy_u8PortID, u8* Copy_pu8PortVal)
{
     7bc:	df 93       	push	r29
     7be:	cf 93       	push	r28
     7c0:	00 d0       	rcall	.+0      	; 0x7c2 <DIO_enuGetPortVlaue+0x6>
     7c2:	00 d0       	rcall	.+0      	; 0x7c4 <DIO_enuGetPortVlaue+0x8>
     7c4:	00 d0       	rcall	.+0      	; 0x7c6 <DIO_enuGetPortVlaue+0xa>
     7c6:	cd b7       	in	r28, 0x3d	; 61
     7c8:	de b7       	in	r29, 0x3e	; 62
     7ca:	8a 83       	std	Y+2, r24	; 0x02
     7cc:	7c 83       	std	Y+4, r23	; 0x04
     7ce:	6b 83       	std	Y+3, r22	; 0x03
	//Local Variable to
	ES_t Local_enuerrorState = ES_NOK ;
     7d0:	19 82       	std	Y+1, r1	; 0x01

	// Check to ensure that the passed address is not equal Null.
	if( Copy_pu8PortVal != NULL )
     7d2:	8b 81       	ldd	r24, Y+3	; 0x03
     7d4:	9c 81       	ldd	r25, Y+4	; 0x04
     7d6:	00 97       	sbiw	r24, 0x00	; 0
     7d8:	09 f4       	brne	.+2      	; 0x7dc <DIO_enuGetPortVlaue+0x20>
     7da:	43 c0       	rjmp	.+134    	; 0x862 <__stack+0x3>
	{
		// Check to ensure that the passed PortID is in range.
		if( Copy_u8PortID <= DIO_PORTD )
     7dc:	8a 81       	ldd	r24, Y+2	; 0x02
     7de:	84 30       	cpi	r24, 0x04	; 4
     7e0:	e8 f5       	brcc	.+122    	; 0x85c <DIO_enuGetPortVlaue+0xa0>
		{

			/**********************************************************
			 * Switching for the suitable case .
			 **********************************************************/
			switch( Copy_u8PortID )
     7e2:	8a 81       	ldd	r24, Y+2	; 0x02
     7e4:	28 2f       	mov	r18, r24
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	3e 83       	std	Y+6, r19	; 0x06
     7ea:	2d 83       	std	Y+5, r18	; 0x05
     7ec:	8d 81       	ldd	r24, Y+5	; 0x05
     7ee:	9e 81       	ldd	r25, Y+6	; 0x06
     7f0:	81 30       	cpi	r24, 0x01	; 1
     7f2:	91 05       	cpc	r25, r1
     7f4:	e1 f0       	breq	.+56     	; 0x82e <DIO_enuGetPortVlaue+0x72>
     7f6:	2d 81       	ldd	r18, Y+5	; 0x05
     7f8:	3e 81       	ldd	r19, Y+6	; 0x06
     7fa:	22 30       	cpi	r18, 0x02	; 2
     7fc:	31 05       	cpc	r19, r1
     7fe:	2c f4       	brge	.+10     	; 0x80a <DIO_enuGetPortVlaue+0x4e>
     800:	8d 81       	ldd	r24, Y+5	; 0x05
     802:	9e 81       	ldd	r25, Y+6	; 0x06
     804:	00 97       	sbiw	r24, 0x00	; 0
     806:	61 f0       	breq	.+24     	; 0x820 <DIO_enuGetPortVlaue+0x64>
     808:	26 c0       	rjmp	.+76     	; 0x856 <DIO_enuGetPortVlaue+0x9a>
     80a:	2d 81       	ldd	r18, Y+5	; 0x05
     80c:	3e 81       	ldd	r19, Y+6	; 0x06
     80e:	22 30       	cpi	r18, 0x02	; 2
     810:	31 05       	cpc	r19, r1
     812:	a1 f0       	breq	.+40     	; 0x83c <DIO_enuGetPortVlaue+0x80>
     814:	8d 81       	ldd	r24, Y+5	; 0x05
     816:	9e 81       	ldd	r25, Y+6	; 0x06
     818:	83 30       	cpi	r24, 0x03	; 3
     81a:	91 05       	cpc	r25, r1
     81c:	b1 f0       	breq	.+44     	; 0x84a <DIO_enuGetPortVlaue+0x8e>
     81e:	1b c0       	rjmp	.+54     	; 0x856 <DIO_enuGetPortVlaue+0x9a>
			{
			case DIO_PORTA :
				*Copy_pu8PortVal = PINA;
     820:	e9 e3       	ldi	r30, 0x39	; 57
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	80 81       	ld	r24, Z
     826:	eb 81       	ldd	r30, Y+3	; 0x03
     828:	fc 81       	ldd	r31, Y+4	; 0x04
     82a:	80 83       	st	Z, r24
     82c:	14 c0       	rjmp	.+40     	; 0x856 <DIO_enuGetPortVlaue+0x9a>
				break;

			case DIO_PORTB :
				*Copy_pu8PortVal = PINB;
     82e:	e6 e3       	ldi	r30, 0x36	; 54
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	80 81       	ld	r24, Z
     834:	eb 81       	ldd	r30, Y+3	; 0x03
     836:	fc 81       	ldd	r31, Y+4	; 0x04
     838:	80 83       	st	Z, r24
     83a:	0d c0       	rjmp	.+26     	; 0x856 <DIO_enuGetPortVlaue+0x9a>
				break;

			case DIO_PORTC :
				*Copy_pu8PortVal = PINC;
     83c:	e3 e3       	ldi	r30, 0x33	; 51
     83e:	f0 e0       	ldi	r31, 0x00	; 0
     840:	80 81       	ld	r24, Z
     842:	eb 81       	ldd	r30, Y+3	; 0x03
     844:	fc 81       	ldd	r31, Y+4	; 0x04
     846:	80 83       	st	Z, r24
     848:	06 c0       	rjmp	.+12     	; 0x856 <DIO_enuGetPortVlaue+0x9a>
				break;

			case DIO_PORTD :
				*Copy_pu8PortVal = PIND ;
     84a:	e0 e3       	ldi	r30, 0x30	; 48
     84c:	f0 e0       	ldi	r31, 0x00	; 0
     84e:	80 81       	ld	r24, Z
     850:	eb 81       	ldd	r30, Y+3	; 0x03
     852:	fc 81       	ldd	r31, Y+4	; 0x04
     854:	80 83       	st	Z, r24
				break;
			}

			Local_enuerrorState = ES_OK;
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	89 83       	std	Y+1, r24	; 0x01
     85a:	05 c0       	rjmp	.+10     	; 0x866 <__stack+0x7>
		else
		{
			/**********************************************************
			 * Handle Out Of Range case.
			 **********************************************************/
			Local_enuerrorState = ES_OUT_OF_RANGE;
     85c:	83 e0       	ldi	r24, 0x03	; 3
     85e:	89 83       	std	Y+1, r24	; 0x01
     860:	02 c0       	rjmp	.+4      	; 0x866 <__stack+0x7>
	else
	{
		/**********************************************************
		 * Handle null pointer case.
		 **********************************************************/
		Local_enuerrorState = ES_NULL_POINTER;
     862:	82 e0       	ldi	r24, 0x02	; 2
     864:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuerrorState  ;
     866:	89 81       	ldd	r24, Y+1	; 0x01

}//End of DIO_enuGetPortVlaue().
     868:	26 96       	adiw	r28, 0x06	; 6
     86a:	0f b6       	in	r0, 0x3f	; 63
     86c:	f8 94       	cli
     86e:	de bf       	out	0x3e, r29	; 62
     870:	0f be       	out	0x3f, r0	; 63
     872:	cd bf       	out	0x3d, r28	; 61
     874:	cf 91       	pop	r28
     876:	df 91       	pop	r29
     878:	08 95       	ret

0000087a <DIO_enuSetPinDirection>:
/*                 : Arg.3: Copy_u8Dir.                                     */
/*                                       DIO_INPTU_PIN   ,   DIO_OUTPUT_PIN */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID, u8 Copy_u8PinID , u8 Copy_u8Dir)
{
     87a:	df 93       	push	r29
     87c:	cf 93       	push	r28
     87e:	00 d0       	rcall	.+0      	; 0x880 <DIO_enuSetPinDirection+0x6>
     880:	00 d0       	rcall	.+0      	; 0x882 <DIO_enuSetPinDirection+0x8>
     882:	00 d0       	rcall	.+0      	; 0x884 <DIO_enuSetPinDirection+0xa>
     884:	cd b7       	in	r28, 0x3d	; 61
     886:	de b7       	in	r29, 0x3e	; 62
     888:	8a 83       	std	Y+2, r24	; 0x02
     88a:	6b 83       	std	Y+3, r22	; 0x03
     88c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuerrorState = ES_NOK ;
     88e:	19 82       	std	Y+1, r1	; 0x01

	if( (Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <= DIO_PIN7) &&( Copy_u8Dir<= OUTPUT_PIN))
     890:	8a 81       	ldd	r24, Y+2	; 0x02
     892:	84 30       	cpi	r24, 0x04	; 4
     894:	08 f0       	brcs	.+2      	; 0x898 <DIO_enuSetPinDirection+0x1e>
     896:	dc c0       	rjmp	.+440    	; 0xa50 <DIO_enuSetPinDirection+0x1d6>
     898:	8b 81       	ldd	r24, Y+3	; 0x03
     89a:	88 30       	cpi	r24, 0x08	; 8
     89c:	08 f0       	brcs	.+2      	; 0x8a0 <DIO_enuSetPinDirection+0x26>
     89e:	d8 c0       	rjmp	.+432    	; 0xa50 <DIO_enuSetPinDirection+0x1d6>
     8a0:	8c 81       	ldd	r24, Y+4	; 0x04
     8a2:	82 30       	cpi	r24, 0x02	; 2
     8a4:	08 f0       	brcs	.+2      	; 0x8a8 <DIO_enuSetPinDirection+0x2e>
     8a6:	d4 c0       	rjmp	.+424    	; 0xa50 <DIO_enuSetPinDirection+0x1d6>
	{

		/**********************************************************
		 * Switching for the suitable case .
		 **********************************************************/
		switch( Copy_u8PortID )
     8a8:	8a 81       	ldd	r24, Y+2	; 0x02
     8aa:	28 2f       	mov	r18, r24
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	3e 83       	std	Y+6, r19	; 0x06
     8b0:	2d 83       	std	Y+5, r18	; 0x05
     8b2:	8d 81       	ldd	r24, Y+5	; 0x05
     8b4:	9e 81       	ldd	r25, Y+6	; 0x06
     8b6:	81 30       	cpi	r24, 0x01	; 1
     8b8:	91 05       	cpc	r25, r1
     8ba:	09 f4       	brne	.+2      	; 0x8be <DIO_enuSetPinDirection+0x44>
     8bc:	43 c0       	rjmp	.+134    	; 0x944 <DIO_enuSetPinDirection+0xca>
     8be:	2d 81       	ldd	r18, Y+5	; 0x05
     8c0:	3e 81       	ldd	r19, Y+6	; 0x06
     8c2:	22 30       	cpi	r18, 0x02	; 2
     8c4:	31 05       	cpc	r19, r1
     8c6:	2c f4       	brge	.+10     	; 0x8d2 <DIO_enuSetPinDirection+0x58>
     8c8:	8d 81       	ldd	r24, Y+5	; 0x05
     8ca:	9e 81       	ldd	r25, Y+6	; 0x06
     8cc:	00 97       	sbiw	r24, 0x00	; 0
     8ce:	71 f0       	breq	.+28     	; 0x8ec <DIO_enuSetPinDirection+0x72>
     8d0:	bc c0       	rjmp	.+376    	; 0xa4a <DIO_enuSetPinDirection+0x1d0>
     8d2:	2d 81       	ldd	r18, Y+5	; 0x05
     8d4:	3e 81       	ldd	r19, Y+6	; 0x06
     8d6:	22 30       	cpi	r18, 0x02	; 2
     8d8:	31 05       	cpc	r19, r1
     8da:	09 f4       	brne	.+2      	; 0x8de <DIO_enuSetPinDirection+0x64>
     8dc:	5f c0       	rjmp	.+190    	; 0x99c <DIO_enuSetPinDirection+0x122>
     8de:	8d 81       	ldd	r24, Y+5	; 0x05
     8e0:	9e 81       	ldd	r25, Y+6	; 0x06
     8e2:	83 30       	cpi	r24, 0x03	; 3
     8e4:	91 05       	cpc	r25, r1
     8e6:	09 f4       	brne	.+2      	; 0x8ea <DIO_enuSetPinDirection+0x70>
     8e8:	85 c0       	rjmp	.+266    	; 0x9f4 <DIO_enuSetPinDirection+0x17a>
     8ea:	af c0       	rjmp	.+350    	; 0xa4a <DIO_enuSetPinDirection+0x1d0>
		{
		case DIO_PORTA :
			if( Copy_u8Dir == INPTU_PIN)
     8ec:	8c 81       	ldd	r24, Y+4	; 0x04
     8ee:	88 23       	and	r24, r24
     8f0:	a9 f4       	brne	.+42     	; 0x91c <DIO_enuSetPinDirection+0xa2>
			{
				DDRA &=~(DIO_MASK_BIT<<Copy_u8PinID);
     8f2:	aa e3       	ldi	r26, 0x3A	; 58
     8f4:	b0 e0       	ldi	r27, 0x00	; 0
     8f6:	ea e3       	ldi	r30, 0x3A	; 58
     8f8:	f0 e0       	ldi	r31, 0x00	; 0
     8fa:	80 81       	ld	r24, Z
     8fc:	48 2f       	mov	r20, r24
     8fe:	8b 81       	ldd	r24, Y+3	; 0x03
     900:	28 2f       	mov	r18, r24
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	02 2e       	mov	r0, r18
     90a:	02 c0       	rjmp	.+4      	; 0x910 <DIO_enuSetPinDirection+0x96>
     90c:	88 0f       	add	r24, r24
     90e:	99 1f       	adc	r25, r25
     910:	0a 94       	dec	r0
     912:	e2 f7       	brpl	.-8      	; 0x90c <DIO_enuSetPinDirection+0x92>
     914:	80 95       	com	r24
     916:	84 23       	and	r24, r20
     918:	8c 93       	st	X, r24
     91a:	97 c0       	rjmp	.+302    	; 0xa4a <DIO_enuSetPinDirection+0x1d0>
			}
			else
			{
				DDRA |=(DIO_MASK_BIT<<Copy_u8PinID);
     91c:	aa e3       	ldi	r26, 0x3A	; 58
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	ea e3       	ldi	r30, 0x3A	; 58
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	80 81       	ld	r24, Z
     926:	48 2f       	mov	r20, r24
     928:	8b 81       	ldd	r24, Y+3	; 0x03
     92a:	28 2f       	mov	r18, r24
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	02 2e       	mov	r0, r18
     934:	02 c0       	rjmp	.+4      	; 0x93a <DIO_enuSetPinDirection+0xc0>
     936:	88 0f       	add	r24, r24
     938:	99 1f       	adc	r25, r25
     93a:	0a 94       	dec	r0
     93c:	e2 f7       	brpl	.-8      	; 0x936 <DIO_enuSetPinDirection+0xbc>
     93e:	84 2b       	or	r24, r20
     940:	8c 93       	st	X, r24
     942:	83 c0       	rjmp	.+262    	; 0xa4a <DIO_enuSetPinDirection+0x1d0>
			}

			break;

		case DIO_PORTB :
			if( Copy_u8Dir == INPTU_PIN)
     944:	8c 81       	ldd	r24, Y+4	; 0x04
     946:	88 23       	and	r24, r24
     948:	a9 f4       	brne	.+42     	; 0x974 <DIO_enuSetPinDirection+0xfa>
			{
				DDRB &=~(DIO_MASK_BIT<<Copy_u8PinID);
     94a:	a7 e3       	ldi	r26, 0x37	; 55
     94c:	b0 e0       	ldi	r27, 0x00	; 0
     94e:	e7 e3       	ldi	r30, 0x37	; 55
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	80 81       	ld	r24, Z
     954:	48 2f       	mov	r20, r24
     956:	8b 81       	ldd	r24, Y+3	; 0x03
     958:	28 2f       	mov	r18, r24
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	02 2e       	mov	r0, r18
     962:	02 c0       	rjmp	.+4      	; 0x968 <DIO_enuSetPinDirection+0xee>
     964:	88 0f       	add	r24, r24
     966:	99 1f       	adc	r25, r25
     968:	0a 94       	dec	r0
     96a:	e2 f7       	brpl	.-8      	; 0x964 <DIO_enuSetPinDirection+0xea>
     96c:	80 95       	com	r24
     96e:	84 23       	and	r24, r20
     970:	8c 93       	st	X, r24
     972:	6b c0       	rjmp	.+214    	; 0xa4a <DIO_enuSetPinDirection+0x1d0>
			}
			else
			{
				DDRB |=(DIO_MASK_BIT<<Copy_u8PinID);
     974:	a7 e3       	ldi	r26, 0x37	; 55
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e7 e3       	ldi	r30, 0x37	; 55
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	80 81       	ld	r24, Z
     97e:	48 2f       	mov	r20, r24
     980:	8b 81       	ldd	r24, Y+3	; 0x03
     982:	28 2f       	mov	r18, r24
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	02 2e       	mov	r0, r18
     98c:	02 c0       	rjmp	.+4      	; 0x992 <DIO_enuSetPinDirection+0x118>
     98e:	88 0f       	add	r24, r24
     990:	99 1f       	adc	r25, r25
     992:	0a 94       	dec	r0
     994:	e2 f7       	brpl	.-8      	; 0x98e <DIO_enuSetPinDirection+0x114>
     996:	84 2b       	or	r24, r20
     998:	8c 93       	st	X, r24
     99a:	57 c0       	rjmp	.+174    	; 0xa4a <DIO_enuSetPinDirection+0x1d0>
			}
			break;

		case DIO_PORTC :

			if( Copy_u8Dir == INPTU_PIN)
     99c:	8c 81       	ldd	r24, Y+4	; 0x04
     99e:	88 23       	and	r24, r24
     9a0:	a9 f4       	brne	.+42     	; 0x9cc <DIO_enuSetPinDirection+0x152>
			{
				DDRC &=~(DIO_MASK_BIT<<Copy_u8PinID);
     9a2:	a4 e3       	ldi	r26, 0x34	; 52
     9a4:	b0 e0       	ldi	r27, 0x00	; 0
     9a6:	e4 e3       	ldi	r30, 0x34	; 52
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	80 81       	ld	r24, Z
     9ac:	48 2f       	mov	r20, r24
     9ae:	8b 81       	ldd	r24, Y+3	; 0x03
     9b0:	28 2f       	mov	r18, r24
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	02 2e       	mov	r0, r18
     9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <DIO_enuSetPinDirection+0x146>
     9bc:	88 0f       	add	r24, r24
     9be:	99 1f       	adc	r25, r25
     9c0:	0a 94       	dec	r0
     9c2:	e2 f7       	brpl	.-8      	; 0x9bc <DIO_enuSetPinDirection+0x142>
     9c4:	80 95       	com	r24
     9c6:	84 23       	and	r24, r20
     9c8:	8c 93       	st	X, r24
     9ca:	3f c0       	rjmp	.+126    	; 0xa4a <DIO_enuSetPinDirection+0x1d0>
			}
			else
			{
				DDRC |=(DIO_MASK_BIT<<Copy_u8PinID);
     9cc:	a4 e3       	ldi	r26, 0x34	; 52
     9ce:	b0 e0       	ldi	r27, 0x00	; 0
     9d0:	e4 e3       	ldi	r30, 0x34	; 52
     9d2:	f0 e0       	ldi	r31, 0x00	; 0
     9d4:	80 81       	ld	r24, Z
     9d6:	48 2f       	mov	r20, r24
     9d8:	8b 81       	ldd	r24, Y+3	; 0x03
     9da:	28 2f       	mov	r18, r24
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	02 2e       	mov	r0, r18
     9e4:	02 c0       	rjmp	.+4      	; 0x9ea <DIO_enuSetPinDirection+0x170>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	0a 94       	dec	r0
     9ec:	e2 f7       	brpl	.-8      	; 0x9e6 <DIO_enuSetPinDirection+0x16c>
     9ee:	84 2b       	or	r24, r20
     9f0:	8c 93       	st	X, r24
     9f2:	2b c0       	rjmp	.+86     	; 0xa4a <DIO_enuSetPinDirection+0x1d0>
			}
			break;

		case DIO_PORTD :
			if( Copy_u8Dir == INPTU_PIN)
     9f4:	8c 81       	ldd	r24, Y+4	; 0x04
     9f6:	88 23       	and	r24, r24
     9f8:	a9 f4       	brne	.+42     	; 0xa24 <DIO_enuSetPinDirection+0x1aa>
			{
				DDRD &=~(DIO_MASK_BIT<<Copy_u8PinID);
     9fa:	a1 e3       	ldi	r26, 0x31	; 49
     9fc:	b0 e0       	ldi	r27, 0x00	; 0
     9fe:	e1 e3       	ldi	r30, 0x31	; 49
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	80 81       	ld	r24, Z
     a04:	48 2f       	mov	r20, r24
     a06:	8b 81       	ldd	r24, Y+3	; 0x03
     a08:	28 2f       	mov	r18, r24
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	02 2e       	mov	r0, r18
     a12:	02 c0       	rjmp	.+4      	; 0xa18 <DIO_enuSetPinDirection+0x19e>
     a14:	88 0f       	add	r24, r24
     a16:	99 1f       	adc	r25, r25
     a18:	0a 94       	dec	r0
     a1a:	e2 f7       	brpl	.-8      	; 0xa14 <DIO_enuSetPinDirection+0x19a>
     a1c:	80 95       	com	r24
     a1e:	84 23       	and	r24, r20
     a20:	8c 93       	st	X, r24
     a22:	13 c0       	rjmp	.+38     	; 0xa4a <DIO_enuSetPinDirection+0x1d0>
			}
			else
			{
				DDRD |=(DIO_MASK_BIT<<Copy_u8PinID);
     a24:	a1 e3       	ldi	r26, 0x31	; 49
     a26:	b0 e0       	ldi	r27, 0x00	; 0
     a28:	e1 e3       	ldi	r30, 0x31	; 49
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	80 81       	ld	r24, Z
     a2e:	48 2f       	mov	r20, r24
     a30:	8b 81       	ldd	r24, Y+3	; 0x03
     a32:	28 2f       	mov	r18, r24
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	02 2e       	mov	r0, r18
     a3c:	02 c0       	rjmp	.+4      	; 0xa42 <DIO_enuSetPinDirection+0x1c8>
     a3e:	88 0f       	add	r24, r24
     a40:	99 1f       	adc	r25, r25
     a42:	0a 94       	dec	r0
     a44:	e2 f7       	brpl	.-8      	; 0xa3e <DIO_enuSetPinDirection+0x1c4>
     a46:	84 2b       	or	r24, r20
     a48:	8c 93       	st	X, r24
			}
			break;

		}
		Local_enuerrorState = ES_OK;
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	89 83       	std	Y+1, r24	; 0x01
     a4e:	02 c0       	rjmp	.+4      	; 0xa54 <DIO_enuSetPinDirection+0x1da>
	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
     a50:	83 e0       	ldi	r24, 0x03	; 3
     a52:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuerrorState  ;
     a54:	89 81       	ldd	r24, Y+1	; 0x01

}//End of DIO_enuSetPinDirection().
     a56:	26 96       	adiw	r28, 0x06	; 6
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	f8 94       	cli
     a5c:	de bf       	out	0x3e, r29	; 62
     a5e:	0f be       	out	0x3f, r0	; 63
     a60:	cd bf       	out	0x3d, r28	; 61
     a62:	cf 91       	pop	r28
     a64:	df 91       	pop	r29
     a66:	08 95       	ret

00000a68 <DIO_enuSetPinValue>:
/*                 : Arg.3: Copy_u8Val.                                     */
/*                                        DIO_LOW        ,   DIO_HIGH       */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuSetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID ,u8 Copy_u8Val)
{
     a68:	df 93       	push	r29
     a6a:	cf 93       	push	r28
     a6c:	00 d0       	rcall	.+0      	; 0xa6e <DIO_enuSetPinValue+0x6>
     a6e:	00 d0       	rcall	.+0      	; 0xa70 <DIO_enuSetPinValue+0x8>
     a70:	00 d0       	rcall	.+0      	; 0xa72 <DIO_enuSetPinValue+0xa>
     a72:	cd b7       	in	r28, 0x3d	; 61
     a74:	de b7       	in	r29, 0x3e	; 62
     a76:	8a 83       	std	Y+2, r24	; 0x02
     a78:	6b 83       	std	Y+3, r22	; 0x03
     a7a:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuerrorState = ES_NOK ;
     a7c:	19 82       	std	Y+1, r1	; 0x01

	if( (Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <= DIO_PIN7) &&( Copy_u8Val<=DIO_HIGH))
     a7e:	8a 81       	ldd	r24, Y+2	; 0x02
     a80:	84 30       	cpi	r24, 0x04	; 4
     a82:	08 f0       	brcs	.+2      	; 0xa86 <DIO_enuSetPinValue+0x1e>
     a84:	dc c0       	rjmp	.+440    	; 0xc3e <DIO_enuSetPinValue+0x1d6>
     a86:	8b 81       	ldd	r24, Y+3	; 0x03
     a88:	88 30       	cpi	r24, 0x08	; 8
     a8a:	08 f0       	brcs	.+2      	; 0xa8e <DIO_enuSetPinValue+0x26>
     a8c:	d8 c0       	rjmp	.+432    	; 0xc3e <DIO_enuSetPinValue+0x1d6>
     a8e:	8c 81       	ldd	r24, Y+4	; 0x04
     a90:	82 30       	cpi	r24, 0x02	; 2
     a92:	08 f0       	brcs	.+2      	; 0xa96 <DIO_enuSetPinValue+0x2e>
     a94:	d4 c0       	rjmp	.+424    	; 0xc3e <DIO_enuSetPinValue+0x1d6>
	{

		/**********************************************************
		 * Switching for the suitable case .
		 **********************************************************/
		switch( Copy_u8PortID )
     a96:	8a 81       	ldd	r24, Y+2	; 0x02
     a98:	28 2f       	mov	r18, r24
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	3e 83       	std	Y+6, r19	; 0x06
     a9e:	2d 83       	std	Y+5, r18	; 0x05
     aa0:	8d 81       	ldd	r24, Y+5	; 0x05
     aa2:	9e 81       	ldd	r25, Y+6	; 0x06
     aa4:	81 30       	cpi	r24, 0x01	; 1
     aa6:	91 05       	cpc	r25, r1
     aa8:	09 f4       	brne	.+2      	; 0xaac <DIO_enuSetPinValue+0x44>
     aaa:	43 c0       	rjmp	.+134    	; 0xb32 <DIO_enuSetPinValue+0xca>
     aac:	2d 81       	ldd	r18, Y+5	; 0x05
     aae:	3e 81       	ldd	r19, Y+6	; 0x06
     ab0:	22 30       	cpi	r18, 0x02	; 2
     ab2:	31 05       	cpc	r19, r1
     ab4:	2c f4       	brge	.+10     	; 0xac0 <DIO_enuSetPinValue+0x58>
     ab6:	8d 81       	ldd	r24, Y+5	; 0x05
     ab8:	9e 81       	ldd	r25, Y+6	; 0x06
     aba:	00 97       	sbiw	r24, 0x00	; 0
     abc:	71 f0       	breq	.+28     	; 0xada <DIO_enuSetPinValue+0x72>
     abe:	bc c0       	rjmp	.+376    	; 0xc38 <DIO_enuSetPinValue+0x1d0>
     ac0:	2d 81       	ldd	r18, Y+5	; 0x05
     ac2:	3e 81       	ldd	r19, Y+6	; 0x06
     ac4:	22 30       	cpi	r18, 0x02	; 2
     ac6:	31 05       	cpc	r19, r1
     ac8:	09 f4       	brne	.+2      	; 0xacc <DIO_enuSetPinValue+0x64>
     aca:	5f c0       	rjmp	.+190    	; 0xb8a <DIO_enuSetPinValue+0x122>
     acc:	8d 81       	ldd	r24, Y+5	; 0x05
     ace:	9e 81       	ldd	r25, Y+6	; 0x06
     ad0:	83 30       	cpi	r24, 0x03	; 3
     ad2:	91 05       	cpc	r25, r1
     ad4:	09 f4       	brne	.+2      	; 0xad8 <DIO_enuSetPinValue+0x70>
     ad6:	85 c0       	rjmp	.+266    	; 0xbe2 <DIO_enuSetPinValue+0x17a>
     ad8:	af c0       	rjmp	.+350    	; 0xc38 <DIO_enuSetPinValue+0x1d0>
		{
		case DIO_PORTA :
			if( Copy_u8Val == DIO_LOW)
     ada:	8c 81       	ldd	r24, Y+4	; 0x04
     adc:	88 23       	and	r24, r24
     ade:	a9 f4       	brne	.+42     	; 0xb0a <DIO_enuSetPinValue+0xa2>
			{
				PORTA &=~(DIO_MASK_BIT<<Copy_u8PinID);
     ae0:	ab e3       	ldi	r26, 0x3B	; 59
     ae2:	b0 e0       	ldi	r27, 0x00	; 0
     ae4:	eb e3       	ldi	r30, 0x3B	; 59
     ae6:	f0 e0       	ldi	r31, 0x00	; 0
     ae8:	80 81       	ld	r24, Z
     aea:	48 2f       	mov	r20, r24
     aec:	8b 81       	ldd	r24, Y+3	; 0x03
     aee:	28 2f       	mov	r18, r24
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	02 2e       	mov	r0, r18
     af8:	02 c0       	rjmp	.+4      	; 0xafe <DIO_enuSetPinValue+0x96>
     afa:	88 0f       	add	r24, r24
     afc:	99 1f       	adc	r25, r25
     afe:	0a 94       	dec	r0
     b00:	e2 f7       	brpl	.-8      	; 0xafa <DIO_enuSetPinValue+0x92>
     b02:	80 95       	com	r24
     b04:	84 23       	and	r24, r20
     b06:	8c 93       	st	X, r24
     b08:	97 c0       	rjmp	.+302    	; 0xc38 <DIO_enuSetPinValue+0x1d0>
			}
			else
			{
				PORTA |=(DIO_MASK_BIT<<Copy_u8PinID);
     b0a:	ab e3       	ldi	r26, 0x3B	; 59
     b0c:	b0 e0       	ldi	r27, 0x00	; 0
     b0e:	eb e3       	ldi	r30, 0x3B	; 59
     b10:	f0 e0       	ldi	r31, 0x00	; 0
     b12:	80 81       	ld	r24, Z
     b14:	48 2f       	mov	r20, r24
     b16:	8b 81       	ldd	r24, Y+3	; 0x03
     b18:	28 2f       	mov	r18, r24
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	02 2e       	mov	r0, r18
     b22:	02 c0       	rjmp	.+4      	; 0xb28 <DIO_enuSetPinValue+0xc0>
     b24:	88 0f       	add	r24, r24
     b26:	99 1f       	adc	r25, r25
     b28:	0a 94       	dec	r0
     b2a:	e2 f7       	brpl	.-8      	; 0xb24 <DIO_enuSetPinValue+0xbc>
     b2c:	84 2b       	or	r24, r20
     b2e:	8c 93       	st	X, r24
     b30:	83 c0       	rjmp	.+262    	; 0xc38 <DIO_enuSetPinValue+0x1d0>
			}

			break;

		case DIO_PORTB :
			if( Copy_u8Val == DIO_LOW)
     b32:	8c 81       	ldd	r24, Y+4	; 0x04
     b34:	88 23       	and	r24, r24
     b36:	a9 f4       	brne	.+42     	; 0xb62 <DIO_enuSetPinValue+0xfa>
			{
				PORTB &=~(DIO_MASK_BIT<<Copy_u8PinID);
     b38:	a8 e3       	ldi	r26, 0x38	; 56
     b3a:	b0 e0       	ldi	r27, 0x00	; 0
     b3c:	e8 e3       	ldi	r30, 0x38	; 56
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	80 81       	ld	r24, Z
     b42:	48 2f       	mov	r20, r24
     b44:	8b 81       	ldd	r24, Y+3	; 0x03
     b46:	28 2f       	mov	r18, r24
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	02 2e       	mov	r0, r18
     b50:	02 c0       	rjmp	.+4      	; 0xb56 <DIO_enuSetPinValue+0xee>
     b52:	88 0f       	add	r24, r24
     b54:	99 1f       	adc	r25, r25
     b56:	0a 94       	dec	r0
     b58:	e2 f7       	brpl	.-8      	; 0xb52 <DIO_enuSetPinValue+0xea>
     b5a:	80 95       	com	r24
     b5c:	84 23       	and	r24, r20
     b5e:	8c 93       	st	X, r24
     b60:	6b c0       	rjmp	.+214    	; 0xc38 <DIO_enuSetPinValue+0x1d0>
			}
			else
			{
				PORTB |=(DIO_MASK_BIT<<Copy_u8PinID);
     b62:	a8 e3       	ldi	r26, 0x38	; 56
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 e3       	ldi	r30, 0x38	; 56
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	80 81       	ld	r24, Z
     b6c:	48 2f       	mov	r20, r24
     b6e:	8b 81       	ldd	r24, Y+3	; 0x03
     b70:	28 2f       	mov	r18, r24
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	02 2e       	mov	r0, r18
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <DIO_enuSetPinValue+0x118>
     b7c:	88 0f       	add	r24, r24
     b7e:	99 1f       	adc	r25, r25
     b80:	0a 94       	dec	r0
     b82:	e2 f7       	brpl	.-8      	; 0xb7c <DIO_enuSetPinValue+0x114>
     b84:	84 2b       	or	r24, r20
     b86:	8c 93       	st	X, r24
     b88:	57 c0       	rjmp	.+174    	; 0xc38 <DIO_enuSetPinValue+0x1d0>

			break;

		case DIO_PORTC :

			if( Copy_u8Val == DIO_LOW)
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	88 23       	and	r24, r24
     b8e:	a9 f4       	brne	.+42     	; 0xbba <DIO_enuSetPinValue+0x152>
			{
				PORTC &=~(DIO_MASK_BIT<<Copy_u8PinID);
     b90:	a5 e3       	ldi	r26, 0x35	; 53
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	e5 e3       	ldi	r30, 0x35	; 53
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	48 2f       	mov	r20, r24
     b9c:	8b 81       	ldd	r24, Y+3	; 0x03
     b9e:	28 2f       	mov	r18, r24
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	02 2e       	mov	r0, r18
     ba8:	02 c0       	rjmp	.+4      	; 0xbae <DIO_enuSetPinValue+0x146>
     baa:	88 0f       	add	r24, r24
     bac:	99 1f       	adc	r25, r25
     bae:	0a 94       	dec	r0
     bb0:	e2 f7       	brpl	.-8      	; 0xbaa <DIO_enuSetPinValue+0x142>
     bb2:	80 95       	com	r24
     bb4:	84 23       	and	r24, r20
     bb6:	8c 93       	st	X, r24
     bb8:	3f c0       	rjmp	.+126    	; 0xc38 <DIO_enuSetPinValue+0x1d0>
			}
			else
			{
				PORTC |=(DIO_MASK_BIT<<Copy_u8PinID);
     bba:	a5 e3       	ldi	r26, 0x35	; 53
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	e5 e3       	ldi	r30, 0x35	; 53
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	48 2f       	mov	r20, r24
     bc6:	8b 81       	ldd	r24, Y+3	; 0x03
     bc8:	28 2f       	mov	r18, r24
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	02 2e       	mov	r0, r18
     bd2:	02 c0       	rjmp	.+4      	; 0xbd8 <DIO_enuSetPinValue+0x170>
     bd4:	88 0f       	add	r24, r24
     bd6:	99 1f       	adc	r25, r25
     bd8:	0a 94       	dec	r0
     bda:	e2 f7       	brpl	.-8      	; 0xbd4 <DIO_enuSetPinValue+0x16c>
     bdc:	84 2b       	or	r24, r20
     bde:	8c 93       	st	X, r24
     be0:	2b c0       	rjmp	.+86     	; 0xc38 <DIO_enuSetPinValue+0x1d0>
			}

			break;

		case DIO_PORTD :
			if( Copy_u8Val == DIO_LOW)
     be2:	8c 81       	ldd	r24, Y+4	; 0x04
     be4:	88 23       	and	r24, r24
     be6:	a9 f4       	brne	.+42     	; 0xc12 <DIO_enuSetPinValue+0x1aa>
			{
				PORTD &=~(DIO_MASK_BIT<<Copy_u8PinID);
     be8:	a2 e3       	ldi	r26, 0x32	; 50
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	e2 e3       	ldi	r30, 0x32	; 50
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	48 2f       	mov	r20, r24
     bf4:	8b 81       	ldd	r24, Y+3	; 0x03
     bf6:	28 2f       	mov	r18, r24
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	02 2e       	mov	r0, r18
     c00:	02 c0       	rjmp	.+4      	; 0xc06 <DIO_enuSetPinValue+0x19e>
     c02:	88 0f       	add	r24, r24
     c04:	99 1f       	adc	r25, r25
     c06:	0a 94       	dec	r0
     c08:	e2 f7       	brpl	.-8      	; 0xc02 <DIO_enuSetPinValue+0x19a>
     c0a:	80 95       	com	r24
     c0c:	84 23       	and	r24, r20
     c0e:	8c 93       	st	X, r24
     c10:	13 c0       	rjmp	.+38     	; 0xc38 <DIO_enuSetPinValue+0x1d0>
			}
			else
			{
				PORTD |=(DIO_MASK_BIT<<Copy_u8PinID);
     c12:	a2 e3       	ldi	r26, 0x32	; 50
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	e2 e3       	ldi	r30, 0x32	; 50
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	48 2f       	mov	r20, r24
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	28 2f       	mov	r18, r24
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	02 2e       	mov	r0, r18
     c2a:	02 c0       	rjmp	.+4      	; 0xc30 <DIO_enuSetPinValue+0x1c8>
     c2c:	88 0f       	add	r24, r24
     c2e:	99 1f       	adc	r25, r25
     c30:	0a 94       	dec	r0
     c32:	e2 f7       	brpl	.-8      	; 0xc2c <DIO_enuSetPinValue+0x1c4>
     c34:	84 2b       	or	r24, r20
     c36:	8c 93       	st	X, r24
			}

			break;

		}
		Local_enuerrorState = ES_OK;
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	89 83       	std	Y+1, r24	; 0x01
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <DIO_enuSetPinValue+0x1da>
	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
     c3e:	83 e0       	ldi	r24, 0x03	; 3
     c40:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuerrorState  ;
     c42:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuSetPinValue().
     c44:	26 96       	adiw	r28, 0x06	; 6
     c46:	0f b6       	in	r0, 0x3f	; 63
     c48:	f8 94       	cli
     c4a:	de bf       	out	0x3e, r29	; 62
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	cd bf       	out	0x3d, r28	; 61
     c50:	cf 91       	pop	r28
     c52:	df 91       	pop	r29
     c54:	08 95       	ret

00000c56 <DIO_enuToggelPin>:
/*                                        DIO_PIN2       ,   DIO_PIN6       */
/*                                        DIO_PIN3       ,   DIO_PIN7       */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuToggelPin(u8  Copy_u8PortID, u8 Copy_u8PinID  )
{
     c56:	df 93       	push	r29
     c58:	cf 93       	push	r28
     c5a:	00 d0       	rcall	.+0      	; 0xc5c <DIO_enuToggelPin+0x6>
     c5c:	00 d0       	rcall	.+0      	; 0xc5e <DIO_enuToggelPin+0x8>
     c5e:	0f 92       	push	r0
     c60:	cd b7       	in	r28, 0x3d	; 61
     c62:	de b7       	in	r29, 0x3e	; 62
     c64:	8a 83       	std	Y+2, r24	; 0x02
     c66:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuerrorState = ES_NOK ;
     c68:	19 82       	std	Y+1, r1	; 0x01

	if( (Copy_u8PortID <= DIO_PORTD) &&  (Copy_u8PinID <= DIO_PIN7) )
     c6a:	8a 81       	ldd	r24, Y+2	; 0x02
     c6c:	84 30       	cpi	r24, 0x04	; 4
     c6e:	08 f0       	brcs	.+2      	; 0xc72 <DIO_enuToggelPin+0x1c>
     c70:	75 c0       	rjmp	.+234    	; 0xd5c <DIO_enuToggelPin+0x106>
     c72:	8b 81       	ldd	r24, Y+3	; 0x03
     c74:	88 30       	cpi	r24, 0x08	; 8
     c76:	08 f0       	brcs	.+2      	; 0xc7a <DIO_enuToggelPin+0x24>
     c78:	71 c0       	rjmp	.+226    	; 0xd5c <DIO_enuToggelPin+0x106>
	{
		/**********************************************************
		 * Switching for the suitable case .
		 **********************************************************/
		switch( Copy_u8PortID )
     c7a:	8a 81       	ldd	r24, Y+2	; 0x02
     c7c:	28 2f       	mov	r18, r24
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	3d 83       	std	Y+5, r19	; 0x05
     c82:	2c 83       	std	Y+4, r18	; 0x04
     c84:	8c 81       	ldd	r24, Y+4	; 0x04
     c86:	9d 81       	ldd	r25, Y+5	; 0x05
     c88:	81 30       	cpi	r24, 0x01	; 1
     c8a:	91 05       	cpc	r25, r1
     c8c:	49 f1       	breq	.+82     	; 0xce0 <DIO_enuToggelPin+0x8a>
     c8e:	2c 81       	ldd	r18, Y+4	; 0x04
     c90:	3d 81       	ldd	r19, Y+5	; 0x05
     c92:	22 30       	cpi	r18, 0x02	; 2
     c94:	31 05       	cpc	r19, r1
     c96:	2c f4       	brge	.+10     	; 0xca2 <DIO_enuToggelPin+0x4c>
     c98:	8c 81       	ldd	r24, Y+4	; 0x04
     c9a:	9d 81       	ldd	r25, Y+5	; 0x05
     c9c:	00 97       	sbiw	r24, 0x00	; 0
     c9e:	61 f0       	breq	.+24     	; 0xcb8 <DIO_enuToggelPin+0x62>
     ca0:	5a c0       	rjmp	.+180    	; 0xd56 <DIO_enuToggelPin+0x100>
     ca2:	2c 81       	ldd	r18, Y+4	; 0x04
     ca4:	3d 81       	ldd	r19, Y+5	; 0x05
     ca6:	22 30       	cpi	r18, 0x02	; 2
     ca8:	31 05       	cpc	r19, r1
     caa:	71 f1       	breq	.+92     	; 0xd08 <DIO_enuToggelPin+0xb2>
     cac:	8c 81       	ldd	r24, Y+4	; 0x04
     cae:	9d 81       	ldd	r25, Y+5	; 0x05
     cb0:	83 30       	cpi	r24, 0x03	; 3
     cb2:	91 05       	cpc	r25, r1
     cb4:	e9 f1       	breq	.+122    	; 0xd30 <DIO_enuToggelPin+0xda>
     cb6:	4f c0       	rjmp	.+158    	; 0xd56 <DIO_enuToggelPin+0x100>
		{
		case DIO_PORTA :
			PORTA ^=(DIO_MASK_BIT<<Copy_u8PinID);
     cb8:	ab e3       	ldi	r26, 0x3B	; 59
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	eb e3       	ldi	r30, 0x3B	; 59
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	48 2f       	mov	r20, r24
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	02 2e       	mov	r0, r18
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <DIO_enuToggelPin+0x80>
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	0a 94       	dec	r0
     cd8:	e2 f7       	brpl	.-8      	; 0xcd2 <DIO_enuToggelPin+0x7c>
     cda:	84 27       	eor	r24, r20
     cdc:	8c 93       	st	X, r24
     cde:	3b c0       	rjmp	.+118    	; 0xd56 <DIO_enuToggelPin+0x100>
			break;

		case DIO_PORTB :
			PORTB ^=(DIO_MASK_BIT<<Copy_u8PinID);
     ce0:	a8 e3       	ldi	r26, 0x38	; 56
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	e8 e3       	ldi	r30, 0x38	; 56
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	48 2f       	mov	r20, r24
     cec:	8b 81       	ldd	r24, Y+3	; 0x03
     cee:	28 2f       	mov	r18, r24
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	02 2e       	mov	r0, r18
     cf8:	02 c0       	rjmp	.+4      	; 0xcfe <DIO_enuToggelPin+0xa8>
     cfa:	88 0f       	add	r24, r24
     cfc:	99 1f       	adc	r25, r25
     cfe:	0a 94       	dec	r0
     d00:	e2 f7       	brpl	.-8      	; 0xcfa <DIO_enuToggelPin+0xa4>
     d02:	84 27       	eor	r24, r20
     d04:	8c 93       	st	X, r24
     d06:	27 c0       	rjmp	.+78     	; 0xd56 <DIO_enuToggelPin+0x100>
			break;

		case DIO_PORTC :
			PORTC ^=(DIO_MASK_BIT<<Copy_u8PinID);
     d08:	a5 e3       	ldi	r26, 0x35	; 53
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e5 e3       	ldi	r30, 0x35	; 53
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	48 2f       	mov	r20, r24
     d14:	8b 81       	ldd	r24, Y+3	; 0x03
     d16:	28 2f       	mov	r18, r24
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	02 2e       	mov	r0, r18
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <DIO_enuToggelPin+0xd0>
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	0a 94       	dec	r0
     d28:	e2 f7       	brpl	.-8      	; 0xd22 <DIO_enuToggelPin+0xcc>
     d2a:	84 27       	eor	r24, r20
     d2c:	8c 93       	st	X, r24
     d2e:	13 c0       	rjmp	.+38     	; 0xd56 <DIO_enuToggelPin+0x100>
			break;

		case DIO_PORTD :
			PORTD ^=(DIO_MASK_BIT<<Copy_u8PinID);
     d30:	a2 e3       	ldi	r26, 0x32	; 50
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	e2 e3       	ldi	r30, 0x32	; 50
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	48 2f       	mov	r20, r24
     d3c:	8b 81       	ldd	r24, Y+3	; 0x03
     d3e:	28 2f       	mov	r18, r24
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	02 2e       	mov	r0, r18
     d48:	02 c0       	rjmp	.+4      	; 0xd4e <DIO_enuToggelPin+0xf8>
     d4a:	88 0f       	add	r24, r24
     d4c:	99 1f       	adc	r25, r25
     d4e:	0a 94       	dec	r0
     d50:	e2 f7       	brpl	.-8      	; 0xd4a <DIO_enuToggelPin+0xf4>
     d52:	84 27       	eor	r24, r20
     d54:	8c 93       	st	X, r24
			break;
		}

		Local_enuerrorState = ES_OK;
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	89 83       	std	Y+1, r24	; 0x01
     d5a:	02 c0       	rjmp	.+4      	; 0xd60 <DIO_enuToggelPin+0x10a>

	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
     d5c:	83 e0       	ldi	r24, 0x03	; 3
     d5e:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuerrorState  ;
     d60:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuToggelPin().
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	0f 90       	pop	r0
     d6c:	cf 91       	pop	r28
     d6e:	df 91       	pop	r29
     d70:	08 95       	ret

00000d72 <DIO_enuGetPinVlaue>:
/*                 : Arg.3: Address of u8 variable.                              */
/*                                                                               */
/* Return          : ERROR_STATE eum.                                            */
/*********************************************************************************/
ES_t DIO_enuGetPinVlaue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8* Copy_pu8PinVal)
{
     d72:	df 93       	push	r29
     d74:	cf 93       	push	r28
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
     d7a:	27 97       	sbiw	r28, 0x07	; 7
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	f8 94       	cli
     d80:	de bf       	out	0x3e, r29	; 62
     d82:	0f be       	out	0x3f, r0	; 63
     d84:	cd bf       	out	0x3d, r28	; 61
     d86:	8a 83       	std	Y+2, r24	; 0x02
     d88:	6b 83       	std	Y+3, r22	; 0x03
     d8a:	5d 83       	std	Y+5, r21	; 0x05
     d8c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuerrorState = ES_NOK ;
     d8e:	19 82       	std	Y+1, r1	; 0x01

	// Check to ensure that the passed address is not equal Null.
	if( Copy_pu8PinVal != NULL )
     d90:	8c 81       	ldd	r24, Y+4	; 0x04
     d92:	9d 81       	ldd	r25, Y+5	; 0x05
     d94:	00 97       	sbiw	r24, 0x00	; 0
     d96:	09 f4       	brne	.+2      	; 0xd9a <DIO_enuGetPinVlaue+0x28>
     d98:	7e c0       	rjmp	.+252    	; 0xe96 <DIO_enuGetPinVlaue+0x124>
	{
		if( (Copy_u8PortID <= DIO_PORTD) &&  (Copy_u8PinID <= DIO_PIN7) )
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	84 30       	cpi	r24, 0x04	; 4
     d9e:	08 f0       	brcs	.+2      	; 0xda2 <DIO_enuGetPinVlaue+0x30>
     da0:	77 c0       	rjmp	.+238    	; 0xe90 <DIO_enuGetPinVlaue+0x11e>
     da2:	8b 81       	ldd	r24, Y+3	; 0x03
     da4:	88 30       	cpi	r24, 0x08	; 8
     da6:	08 f0       	brcs	.+2      	; 0xdaa <DIO_enuGetPinVlaue+0x38>
     da8:	73 c0       	rjmp	.+230    	; 0xe90 <DIO_enuGetPinVlaue+0x11e>
		{
			/**********************************************************
			 * Switching for the suitable case .
			 **********************************************************/
			switch( Copy_u8PortID )
     daa:	8a 81       	ldd	r24, Y+2	; 0x02
     dac:	28 2f       	mov	r18, r24
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	3f 83       	std	Y+7, r19	; 0x07
     db2:	2e 83       	std	Y+6, r18	; 0x06
     db4:	4e 81       	ldd	r20, Y+6	; 0x06
     db6:	5f 81       	ldd	r21, Y+7	; 0x07
     db8:	41 30       	cpi	r20, 0x01	; 1
     dba:	51 05       	cpc	r21, r1
     dbc:	59 f1       	breq	.+86     	; 0xe14 <DIO_enuGetPinVlaue+0xa2>
     dbe:	8e 81       	ldd	r24, Y+6	; 0x06
     dc0:	9f 81       	ldd	r25, Y+7	; 0x07
     dc2:	82 30       	cpi	r24, 0x02	; 2
     dc4:	91 05       	cpc	r25, r1
     dc6:	34 f4       	brge	.+12     	; 0xdd4 <DIO_enuGetPinVlaue+0x62>
     dc8:	2e 81       	ldd	r18, Y+6	; 0x06
     dca:	3f 81       	ldd	r19, Y+7	; 0x07
     dcc:	21 15       	cp	r18, r1
     dce:	31 05       	cpc	r19, r1
     dd0:	69 f0       	breq	.+26     	; 0xdec <DIO_enuGetPinVlaue+0x7a>
     dd2:	5b c0       	rjmp	.+182    	; 0xe8a <DIO_enuGetPinVlaue+0x118>
     dd4:	4e 81       	ldd	r20, Y+6	; 0x06
     dd6:	5f 81       	ldd	r21, Y+7	; 0x07
     dd8:	42 30       	cpi	r20, 0x02	; 2
     dda:	51 05       	cpc	r21, r1
     ddc:	79 f1       	breq	.+94     	; 0xe3c <DIO_enuGetPinVlaue+0xca>
     dde:	8e 81       	ldd	r24, Y+6	; 0x06
     de0:	9f 81       	ldd	r25, Y+7	; 0x07
     de2:	83 30       	cpi	r24, 0x03	; 3
     de4:	91 05       	cpc	r25, r1
     de6:	09 f4       	brne	.+2      	; 0xdea <DIO_enuGetPinVlaue+0x78>
     de8:	3d c0       	rjmp	.+122    	; 0xe64 <DIO_enuGetPinVlaue+0xf2>
     dea:	4f c0       	rjmp	.+158    	; 0xe8a <DIO_enuGetPinVlaue+0x118>
			{
			case DIO_PORTA :
				*Copy_pu8PinVal = (PINA>>Copy_u8PinID)&DIO_MASK_BIT;
     dec:	e9 e3       	ldi	r30, 0x39	; 57
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	28 2f       	mov	r18, r24
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	8b 81       	ldd	r24, Y+3	; 0x03
     df8:	88 2f       	mov	r24, r24
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	a9 01       	movw	r20, r18
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <DIO_enuGetPinVlaue+0x92>
     e00:	55 95       	asr	r21
     e02:	47 95       	ror	r20
     e04:	8a 95       	dec	r24
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <DIO_enuGetPinVlaue+0x8e>
     e08:	ca 01       	movw	r24, r20
     e0a:	81 70       	andi	r24, 0x01	; 1
     e0c:	ec 81       	ldd	r30, Y+4	; 0x04
     e0e:	fd 81       	ldd	r31, Y+5	; 0x05
     e10:	80 83       	st	Z, r24
     e12:	3b c0       	rjmp	.+118    	; 0xe8a <DIO_enuGetPinVlaue+0x118>
				break;

			case DIO_PORTB :
				*Copy_pu8PinVal = (PINB>>Copy_u8PinID)&DIO_MASK_BIT;
     e14:	e6 e3       	ldi	r30, 0x36	; 54
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	28 2f       	mov	r18, r24
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	8b 81       	ldd	r24, Y+3	; 0x03
     e20:	88 2f       	mov	r24, r24
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	a9 01       	movw	r20, r18
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <DIO_enuGetPinVlaue+0xba>
     e28:	55 95       	asr	r21
     e2a:	47 95       	ror	r20
     e2c:	8a 95       	dec	r24
     e2e:	e2 f7       	brpl	.-8      	; 0xe28 <DIO_enuGetPinVlaue+0xb6>
     e30:	ca 01       	movw	r24, r20
     e32:	81 70       	andi	r24, 0x01	; 1
     e34:	ec 81       	ldd	r30, Y+4	; 0x04
     e36:	fd 81       	ldd	r31, Y+5	; 0x05
     e38:	80 83       	st	Z, r24
     e3a:	27 c0       	rjmp	.+78     	; 0xe8a <DIO_enuGetPinVlaue+0x118>
				break;

			case DIO_PORTC :
				*Copy_pu8PinVal = (PINC>>Copy_u8PinID)&DIO_MASK_BIT;
     e3c:	e3 e3       	ldi	r30, 0x33	; 51
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	28 2f       	mov	r18, r24
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	88 2f       	mov	r24, r24
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	a9 01       	movw	r20, r18
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <DIO_enuGetPinVlaue+0xe2>
     e50:	55 95       	asr	r21
     e52:	47 95       	ror	r20
     e54:	8a 95       	dec	r24
     e56:	e2 f7       	brpl	.-8      	; 0xe50 <DIO_enuGetPinVlaue+0xde>
     e58:	ca 01       	movw	r24, r20
     e5a:	81 70       	andi	r24, 0x01	; 1
     e5c:	ec 81       	ldd	r30, Y+4	; 0x04
     e5e:	fd 81       	ldd	r31, Y+5	; 0x05
     e60:	80 83       	st	Z, r24
     e62:	13 c0       	rjmp	.+38     	; 0xe8a <DIO_enuGetPinVlaue+0x118>
				break;

			case DIO_PORTD :
				*Copy_pu8PinVal = (PIND>>Copy_u8PinID)&DIO_MASK_BIT;
     e64:	e0 e3       	ldi	r30, 0x30	; 48
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	28 2f       	mov	r18, r24
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	88 2f       	mov	r24, r24
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	a9 01       	movw	r20, r18
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <DIO_enuGetPinVlaue+0x10a>
     e78:	55 95       	asr	r21
     e7a:	47 95       	ror	r20
     e7c:	8a 95       	dec	r24
     e7e:	e2 f7       	brpl	.-8      	; 0xe78 <DIO_enuGetPinVlaue+0x106>
     e80:	ca 01       	movw	r24, r20
     e82:	81 70       	andi	r24, 0x01	; 1
     e84:	ec 81       	ldd	r30, Y+4	; 0x04
     e86:	fd 81       	ldd	r31, Y+5	; 0x05
     e88:	80 83       	st	Z, r24
				break;
			}

			Local_enuerrorState = ES_OK;
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	89 83       	std	Y+1, r24	; 0x01
     e8e:	05 c0       	rjmp	.+10     	; 0xe9a <DIO_enuGetPinVlaue+0x128>

		}
		else
		{
			Local_enuerrorState = ES_OUT_OF_RANGE;
     e90:	83 e0       	ldi	r24, 0x03	; 3
     e92:	89 83       	std	Y+1, r24	; 0x01
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <DIO_enuGetPinVlaue+0x128>
	else
	{
		/**********************************************************
		 * Handle null pointer case.
		 **********************************************************/
		Local_enuerrorState = ES_NULL_POINTER;
     e96:	82 e0       	ldi	r24, 0x02	; 2
     e98:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_enuerrorState  ;
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuGetPinVlaue().
     e9c:	27 96       	adiw	r28, 0x07	; 7
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	f8 94       	cli
     ea2:	de bf       	out	0x3e, r29	; 62
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	cd bf       	out	0x3d, r28	; 61
     ea8:	cf 91       	pop	r28
     eaa:	df 91       	pop	r29
     eac:	08 95       	ret

00000eae <GPS_inlinevidAsciiToInt>:
//
//
//}

void GPS_inlinevidAsciiToInt(const u8* GPS_p2Constu8_DataBuffer , f32** Copy_pf32Lat , f32** Copy_pf32Long , u8** Copy_pu8LatDir , u8** Copy_pu8LongDir  )
{
     eae:	0f 93       	push	r16
     eb0:	1f 93       	push	r17
     eb2:	df 93       	push	r29
     eb4:	cf 93       	push	r28
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
     eba:	2f 97       	sbiw	r28, 0x0f	; 15
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	f8 94       	cli
     ec0:	de bf       	out	0x3e, r29	; 62
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	cd bf       	out	0x3d, r28	; 61
     ec6:	9f 83       	std	Y+7, r25	; 0x07
     ec8:	8e 83       	std	Y+6, r24	; 0x06
     eca:	79 87       	std	Y+9, r23	; 0x09
     ecc:	68 87       	std	Y+8, r22	; 0x08
     ece:	5b 87       	std	Y+11, r21	; 0x0b
     ed0:	4a 87       	std	Y+10, r20	; 0x0a
     ed2:	3d 87       	std	Y+13, r19	; 0x0d
     ed4:	2c 87       	std	Y+12, r18	; 0x0c
     ed6:	1f 87       	std	Y+15, r17	; 0x0f
     ed8:	0e 87       	std	Y+14, r16	; 0x0e


	u16 Local_u16TempLat  = 0 ;
     eda:	1d 82       	std	Y+5, r1	; 0x05
     edc:	1c 82       	std	Y+4, r1	; 0x04
	u16 Local_u16TempLong = 0 ;
     ede:	1b 82       	std	Y+3, r1	; 0x03
     ee0:	1a 82       	std	Y+2, r1	; 0x02

	u8 Local_u8Temp = 10 ;
     ee2:	8a e0       	ldi	r24, 0x0A	; 10
     ee4:	89 83       	std	Y+1, r24	; 0x01
     ee6:	05 c0       	rjmp	.+10     	; 0xef2 <GPS_inlinevidAsciiToInt+0x44>
	//  0.........  10  ....  15 ....  20  .  22  .......... 33  .  35  .............................
	//  043338.100  ,   5404  .  2675  ,   N  ,   00159.7569  ,  W  ,   1,10,4.00,100.0,M,50.0,M,,*72
	//  |
	while( *GPS_p2Constu8_DataBuffer != ',' )
	{
		GPS_p2Constu8_DataBuffer++;
     ee8:	8e 81       	ldd	r24, Y+6	; 0x06
     eea:	9f 81       	ldd	r25, Y+7	; 0x07
     eec:	01 96       	adiw	r24, 0x01	; 1
     eee:	9f 83       	std	Y+7, r25	; 0x07
     ef0:	8e 83       	std	Y+6, r24	; 0x06
	u8 Local_u8Temp = 10 ;

	//  0.........  10  ....  15 ....  20  .  22  .......... 33  .  35  .............................
	//  043338.100  ,   5404  .  2675  ,   N  ,   00159.7569  ,  W  ,   1,10,4.00,100.0,M,50.0,M,,*72
	//  |
	while( *GPS_p2Constu8_DataBuffer != ',' )
     ef2:	ee 81       	ldd	r30, Y+6	; 0x06
     ef4:	ff 81       	ldd	r31, Y+7	; 0x07
     ef6:	80 81       	ld	r24, Z
     ef8:	8c 32       	cpi	r24, 0x2C	; 44
     efa:	b1 f7       	brne	.-20     	; 0xee8 <GPS_inlinevidAsciiToInt+0x3a>
	//  043338.100  ,   5404  .  2675  ,   N  ,   00159.7569  ,  W  ,   1,10,4.00,100.0,M,50.0,M,,*72
	//              |
	//P2Data:       10


	GPS_p2Constu8_DataBuffer++;
     efc:	8e 81       	ldd	r24, Y+6	; 0x06
     efe:	9f 81       	ldd	r25, Y+7	; 0x07
     f00:	01 96       	adiw	r24, 0x01	; 1
     f02:	9f 83       	std	Y+7, r25	; 0x07
     f04:	8e 83       	std	Y+6, r24	; 0x06
	do
	{
		// 540 4.2675
		// |

		Local_u16TempLat *= 10;
     f06:	8c 81       	ldd	r24, Y+4	; 0x04
     f08:	9d 81       	ldd	r25, Y+5	; 0x05
     f0a:	9c 01       	movw	r18, r24
     f0c:	22 0f       	add	r18, r18
     f0e:	33 1f       	adc	r19, r19
     f10:	c9 01       	movw	r24, r18
     f12:	88 0f       	add	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	82 0f       	add	r24, r18
     f1c:	93 1f       	adc	r25, r19
     f1e:	9d 83       	std	Y+5, r25	; 0x05
     f20:	8c 83       	std	Y+4, r24	; 0x04

		Local_u16TempLat += ((u16)(*(GPS_p2Constu8_DataBuffer)-0x30));
     f22:	ee 81       	ldd	r30, Y+6	; 0x06
     f24:	ff 81       	ldd	r31, Y+7	; 0x07
     f26:	80 81       	ld	r24, Z
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	8c 81       	ldd	r24, Y+4	; 0x04
     f2e:	9d 81       	ldd	r25, Y+5	; 0x05
     f30:	82 0f       	add	r24, r18
     f32:	93 1f       	adc	r25, r19
     f34:	c0 97       	sbiw	r24, 0x30	; 48
     f36:	9d 83       	std	Y+5, r25	; 0x05
     f38:	8c 83       	std	Y+4, r24	; 0x04
		//iter_#1      		0+5 = 5
		//iter_#2          50+4 = 54
		//iter_#3         540+0 = 540
		//iter_#4        5400+4 = 5404

		GPS_p2Constu8_DataBuffer++;
     f3a:	8e 81       	ldd	r24, Y+6	; 0x06
     f3c:	9f 81       	ldd	r25, Y+7	; 0x07
     f3e:	01 96       	adiw	r24, 0x01	; 1
     f40:	9f 83       	std	Y+7, r25	; 0x07
     f42:	8e 83       	std	Y+6, r24	; 0x06

	}while( (*GPS_p2Constu8_DataBuffer) != '.');
     f44:	ee 81       	ldd	r30, Y+6	; 0x06
     f46:	ff 81       	ldd	r31, Y+7	; 0x07
     f48:	80 81       	ld	r24, Z
     f4a:	8e 32       	cpi	r24, 0x2E	; 46
     f4c:	e1 f6       	brne	.-72     	; 0xf06 <GPS_inlinevidAsciiToInt+0x58>
	//  0.........  10  ....  15 ....  20  .  22  .......... 33  .  35  .............................
	//  043338.100  ,   5404  .  2675  ,   N  ,   00159.7569  ,  W  ,   1,10,4.00,100.0,M,50.0,M,,*72
	//                                 |
	//P2Data:                          20

	GPS_p2Constu8_DataBuffer++;
     f4e:	8e 81       	ldd	r24, Y+6	; 0x06
     f50:	9f 81       	ldd	r25, Y+7	; 0x07
     f52:	01 96       	adiw	r24, 0x01	; 1
     f54:	9f 83       	std	Y+7, r25	; 0x07
     f56:	8e 83       	std	Y+6, r24	; 0x06
	do
	{
		// 5404.2675,
		//          |

		Local_u16TempLat += ((u16)(*(GPS_p2Constu8_DataBuffer)-0x30)/Local_u8Temp);
     f58:	ee 81       	ldd	r30, Y+6	; 0x06
     f5a:	ff 81       	ldd	r31, Y+7	; 0x07
     f5c:	80 81       	ld	r24, Z
     f5e:	88 2f       	mov	r24, r24
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	c0 97       	sbiw	r24, 0x30	; 48
     f64:	ac 01       	movw	r20, r24
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	ca 01       	movw	r24, r20
     f6e:	b9 01       	movw	r22, r18
     f70:	0e 94 c2 09 	call	0x1384	; 0x1384 <__udivmodhi4>
     f74:	cb 01       	movw	r24, r22
     f76:	9c 01       	movw	r18, r24
     f78:	8c 81       	ldd	r24, Y+4	; 0x04
     f7a:	9d 81       	ldd	r25, Y+5	; 0x05
     f7c:	82 0f       	add	r24, r18
     f7e:	93 1f       	adc	r25, r19
     f80:	9d 83       	std	Y+5, r25	; 0x05
     f82:	8c 83       	std	Y+4, r24	; 0x04

		Local_u8Temp *= 10 ;
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	88 2f       	mov	r24, r24
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	9c 01       	movw	r18, r24
     f8c:	22 0f       	add	r18, r18
     f8e:	33 1f       	adc	r19, r19
     f90:	c9 01       	movw	r24, r18
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	82 0f       	add	r24, r18
     f9c:	93 1f       	adc	r25, r19
     f9e:	89 83       	std	Y+1, r24	; 0x01
		//iter_#2  Local_u16TempLat=   5404.2 + 0.06=  5404.26
		//iter_#3                      5404.26 + 0.007=  5404.267
		//iter_#4                      5404.267 + 0.0005=  5404.2675


		GPS_p2Constu8_DataBuffer++;
     fa0:	8e 81       	ldd	r24, Y+6	; 0x06
     fa2:	9f 81       	ldd	r25, Y+7	; 0x07
     fa4:	01 96       	adiw	r24, 0x01	; 1
     fa6:	9f 83       	std	Y+7, r25	; 0x07
     fa8:	8e 83       	std	Y+6, r24	; 0x06


	}while( *(GPS_p2Constu8_DataBuffer) != ',');
     faa:	ee 81       	ldd	r30, Y+6	; 0x06
     fac:	ff 81       	ldd	r31, Y+7	; 0x07
     fae:	80 81       	ld	r24, Z
     fb0:	8c 32       	cpi	r24, 0x2C	; 44
     fb2:	91 f6       	brne	.-92     	; 0xf58 <GPS_inlinevidAsciiToInt+0xaa>

	//  0.........  10  ....  15 ....  20  .  22  .......... 33  .  35  .............................
	//  043338.100  ,   5404  .  2675  ,   N  ,   00159.7569  ,  W  ,   1,10,4.00,100.0,M,50.0,M,,*72
	//  P2Data:                        |
	//
	GPS_p2Constu8_DataBuffer++;
     fb4:	8e 81       	ldd	r24, Y+6	; 0x06
     fb6:	9f 81       	ldd	r25, Y+7	; 0x07
     fb8:	01 96       	adiw	r24, 0x01	; 1
     fba:	9f 83       	std	Y+7, r25	; 0x07
     fbc:	8e 83       	std	Y+6, r24	; 0x06
	//  0.........  10  ....  15 ....  20  .  22  .......... 33  .  35  .............................
	//  043338.100  ,   5404  .  2675  ,   N  ,   00159.7569  ,  W  ,   1,10,4.00,100.0,M,50.0,M,,*72
	//  P2Data:                            |


	**Copy_pu8LatDir = *GPS_p2Constu8_DataBuffer ;
     fbe:	ec 85       	ldd	r30, Y+12	; 0x0c
     fc0:	fd 85       	ldd	r31, Y+13	; 0x0d
     fc2:	a0 81       	ld	r26, Z
     fc4:	b1 81       	ldd	r27, Z+1	; 0x01
     fc6:	ee 81       	ldd	r30, Y+6	; 0x06
     fc8:	ff 81       	ldd	r31, Y+7	; 0x07
     fca:	80 81       	ld	r24, Z
     fcc:	8c 93       	st	X, r24

	GPS_p2Constu8_DataBuffer++;
     fce:	8e 81       	ldd	r24, Y+6	; 0x06
     fd0:	9f 81       	ldd	r25, Y+7	; 0x07
     fd2:	01 96       	adiw	r24, 0x01	; 1
     fd4:	9f 83       	std	Y+7, r25	; 0x07
     fd6:	8e 83       	std	Y+6, r24	; 0x06

	//  0.........  10  ....  15 ....  20  .  22  .......... 33  .  35  .............................
	//  043338.100  ,   5404  .  2675  ,   N  ,   00159.7569  ,  W  ,   1,10,4.00,100.0,M,50.0,M,,*72
	//  P2Data:                               |

	GPS_p2Constu8_DataBuffer++;
     fd8:	8e 81       	ldd	r24, Y+6	; 0x06
     fda:	9f 81       	ldd	r25, Y+7	; 0x07
     fdc:	01 96       	adiw	r24, 0x01	; 1
     fde:	9f 83       	std	Y+7, r25	; 0x07
     fe0:	8e 83       	std	Y+6, r24	; 0x06
	do
	{
		// 00159.7569
		// |

		Local_u16TempLong *= 10;
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	9b 81       	ldd	r25, Y+3	; 0x03
     fe6:	9c 01       	movw	r18, r24
     fe8:	22 0f       	add	r18, r18
     fea:	33 1f       	adc	r19, r19
     fec:	c9 01       	movw	r24, r18
     fee:	88 0f       	add	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	82 0f       	add	r24, r18
     ff8:	93 1f       	adc	r25, r19
     ffa:	9b 83       	std	Y+3, r25	; 0x03
     ffc:	8a 83       	std	Y+2, r24	; 0x02

		Local_u16TempLong += ((u16)((*GPS_p2Constu8_DataBuffer)-0x30));
     ffe:	ee 81       	ldd	r30, Y+6	; 0x06
    1000:	ff 81       	ldd	r31, Y+7	; 0x07
    1002:	80 81       	ld	r24, Z
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	8a 81       	ldd	r24, Y+2	; 0x02
    100a:	9b 81       	ldd	r25, Y+3	; 0x03
    100c:	82 0f       	add	r24, r18
    100e:	93 1f       	adc	r25, r19
    1010:	c0 97       	sbiw	r24, 0x30	; 48
    1012:	9b 83       	std	Y+3, r25	; 0x03
    1014:	8a 83       	std	Y+2, r24	; 0x02
		//iter_#2          0 + 0 = 0
		//iter_#3          0 + 1 = 1
		//iter_#4         10 + 5 = 15
		//iter_#4        150 + 9 = 159

		GPS_p2Constu8_DataBuffer++;
    1016:	8e 81       	ldd	r24, Y+6	; 0x06
    1018:	9f 81       	ldd	r25, Y+7	; 0x07
    101a:	01 96       	adiw	r24, 0x01	; 1
    101c:	9f 83       	std	Y+7, r25	; 0x07
    101e:	8e 83       	std	Y+6, r24	; 0x06


	}while( (*GPS_p2Constu8_DataBuffer) != '.');
    1020:	ee 81       	ldd	r30, Y+6	; 0x06
    1022:	ff 81       	ldd	r31, Y+7	; 0x07
    1024:	80 81       	ld	r24, Z
    1026:	8e 32       	cpi	r24, 0x2E	; 46
    1028:	e1 f6       	brne	.-72     	; 0xfe2 <GPS_inlinevidAsciiToInt+0x134>


	// 00159.7569
	//      |
	GPS_p2Constu8_DataBuffer++;
    102a:	8e 81       	ldd	r24, Y+6	; 0x06
    102c:	9f 81       	ldd	r25, Y+7	; 0x07
    102e:	01 96       	adiw	r24, 0x01	; 1
    1030:	9f 83       	std	Y+7, r25	; 0x07
    1032:	8e 83       	std	Y+6, r24	; 0x06

	// 00159.7569
	//       |

	Local_u8Temp = 10 ;
    1034:	8a e0       	ldi	r24, 0x0A	; 10
    1036:	89 83       	std	Y+1, r24	; 0x01
	{

		// 00159.7569,W
		//       |

		Local_u16TempLong += ((u16)((*GPS_p2Constu8_DataBuffer)-0x30)/Local_u8Temp);
    1038:	ee 81       	ldd	r30, Y+6	; 0x06
    103a:	ff 81       	ldd	r31, Y+7	; 0x07
    103c:	80 81       	ld	r24, Z
    103e:	88 2f       	mov	r24, r24
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	c0 97       	sbiw	r24, 0x30	; 48
    1044:	ac 01       	movw	r20, r24
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	ca 01       	movw	r24, r20
    104e:	b9 01       	movw	r22, r18
    1050:	0e 94 c2 09 	call	0x1384	; 0x1384 <__udivmodhi4>
    1054:	cb 01       	movw	r24, r22
    1056:	9c 01       	movw	r18, r24
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	9b 81       	ldd	r25, Y+3	; 0x03
    105c:	82 0f       	add	r24, r18
    105e:	93 1f       	adc	r25, r19
    1060:	9b 83       	std	Y+3, r25	; 0x03
    1062:	8a 83       	std	Y+2, r24	; 0x02

		Local_u8Temp *= 10 ;
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	88 2f       	mov	r24, r24
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	9c 01       	movw	r18, r24
    106c:	22 0f       	add	r18, r18
    106e:	33 1f       	adc	r19, r19
    1070:	c9 01       	movw	r24, r18
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	82 0f       	add	r24, r18
    107c:	93 1f       	adc	r25, r19
    107e:	89 83       	std	Y+1, r24	; 0x01
		//iter_#2  Local_u16TempLat= 159.7+0.05 =  159.75           100
		//iter_#3                  159.75+0.006 =  159.756          1000
		//iter_#4                 159.756+0.0009 = 159.7569         10000                                   10000


		GPS_p2Constu8_DataBuffer++;
    1080:	8e 81       	ldd	r24, Y+6	; 0x06
    1082:	9f 81       	ldd	r25, Y+7	; 0x07
    1084:	01 96       	adiw	r24, 0x01	; 1
    1086:	9f 83       	std	Y+7, r25	; 0x07
    1088:	8e 83       	std	Y+6, r24	; 0x06


	}while( (*GPS_p2Constu8_DataBuffer) != ',');
    108a:	ee 81       	ldd	r30, Y+6	; 0x06
    108c:	ff 81       	ldd	r31, Y+7	; 0x07
    108e:	80 81       	ld	r24, Z
    1090:	8c 32       	cpi	r24, 0x2C	; 44
    1092:	91 f6       	brne	.-92     	; 0x1038 <GPS_inlinevidAsciiToInt+0x18a>

	// 00159.7569,W
	//           |


	GPS_p2Constu8_DataBuffer++;
    1094:	8e 81       	ldd	r24, Y+6	; 0x06
    1096:	9f 81       	ldd	r25, Y+7	; 0x07
    1098:	01 96       	adiw	r24, 0x01	; 1
    109a:	9f 83       	std	Y+7, r25	; 0x07
    109c:	8e 83       	std	Y+6, r24	; 0x06
	// 00159.7569,W
	//            |

	**Copy_pu8LongDir = *GPS_p2Constu8_DataBuffer;
    109e:	ee 85       	ldd	r30, Y+14	; 0x0e
    10a0:	ff 85       	ldd	r31, Y+15	; 0x0f
    10a2:	a0 81       	ld	r26, Z
    10a4:	b1 81       	ldd	r27, Z+1	; 0x01
    10a6:	ee 81       	ldd	r30, Y+6	; 0x06
    10a8:	ff 81       	ldd	r31, Y+7	; 0x07
    10aa:	80 81       	ld	r24, Z
    10ac:	8c 93       	st	X, r24

	**Copy_pf32Long   = Local_u16TempLong;
    10ae:	ea 85       	ldd	r30, Y+10	; 0x0a
    10b0:	fb 85       	ldd	r31, Y+11	; 0x0b
    10b2:	00 81       	ld	r16, Z
    10b4:	11 81       	ldd	r17, Z+1	; 0x01
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	9b 81       	ldd	r25, Y+3	; 0x03
    10ba:	cc 01       	movw	r24, r24
    10bc:	a0 e0       	ldi	r26, 0x00	; 0
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	bc 01       	movw	r22, r24
    10c2:	cd 01       	movw	r24, r26
    10c4:	0e 94 49 00 	call	0x92	; 0x92 <__floatunsisf>
    10c8:	dc 01       	movw	r26, r24
    10ca:	cb 01       	movw	r24, r22
    10cc:	f8 01       	movw	r30, r16
    10ce:	80 83       	st	Z, r24
    10d0:	91 83       	std	Z+1, r25	; 0x01
    10d2:	a2 83       	std	Z+2, r26	; 0x02
    10d4:	b3 83       	std	Z+3, r27	; 0x03
	**Copy_pf32Lat    = Local_u16TempLat ;
    10d6:	e8 85       	ldd	r30, Y+8	; 0x08
    10d8:	f9 85       	ldd	r31, Y+9	; 0x09
    10da:	00 81       	ld	r16, Z
    10dc:	11 81       	ldd	r17, Z+1	; 0x01
    10de:	8c 81       	ldd	r24, Y+4	; 0x04
    10e0:	9d 81       	ldd	r25, Y+5	; 0x05
    10e2:	cc 01       	movw	r24, r24
    10e4:	a0 e0       	ldi	r26, 0x00	; 0
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	bc 01       	movw	r22, r24
    10ea:	cd 01       	movw	r24, r26
    10ec:	0e 94 49 00 	call	0x92	; 0x92 <__floatunsisf>
    10f0:	dc 01       	movw	r26, r24
    10f2:	cb 01       	movw	r24, r22
    10f4:	f8 01       	movw	r30, r16
    10f6:	80 83       	st	Z, r24
    10f8:	91 83       	std	Z+1, r25	; 0x01
    10fa:	a2 83       	std	Z+2, r26	; 0x02
    10fc:	b3 83       	std	Z+3, r27	; 0x03

}//End of GPS_inlinevidAsciiToInt().
    10fe:	2f 96       	adiw	r28, 0x0f	; 15
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
    110a:	cf 91       	pop	r28
    110c:	df 91       	pop	r29
    110e:	1f 91       	pop	r17
    1110:	0f 91       	pop	r16
    1112:	08 95       	ret

00001114 <GPS_enuInit>:
 *                   according to the PGS Configurable structure.           *
 * Argument Type   : None .                                                 *
 * Return Type     : Error state of type ES_t.                              *
 **....................*****************************************************/
ES_t GPS_enuInit(void)
{
    1114:	df 93       	push	r29
    1116:	cf 93       	push	r28
    1118:	00 d0       	rcall	.+0      	; 0x111a <GPS_enuInit+0x6>
    111a:	0f 92       	push	r0
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62

	ES_t Local_enuErrorState = ES_NOK ;
    1120:	19 82       	std	Y+1, r1	; 0x01


	//Read the Status of gps module and make the appropriate configuration.
	switch( GPS.GPS_STATE_t )
    1122:	80 91 60 01 	lds	r24, 0x0160
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	3b 83       	std	Y+3, r19	; 0x03
    112c:	2a 83       	std	Y+2, r18	; 0x02
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	9b 81       	ldd	r25, Y+3	; 0x03
    1132:	00 97       	sbiw	r24, 0x00	; 0
    1134:	31 f0       	breq	.+12     	; 0x1142 <GPS_enuInit+0x2e>
    1136:	2a 81       	ldd	r18, Y+2	; 0x02
    1138:	3b 81       	ldd	r19, Y+3	; 0x03
    113a:	21 30       	cpi	r18, 0x01	; 1
    113c:	31 05       	cpc	r19, r1
    113e:	41 f1       	breq	.+80     	; 0x1190 <GPS_enuInit+0x7c>
    1140:	29 c0       	rjmp	.+82     	; 0x1194 <GPS_enuInit+0x80>

		/****************************************************************************
		 *-Initialize the Direction of pins that the gps module is connected on to  *
		 * be an output pins and Set the suitable value for each.                                                       *
		 ****************************************************************************/
		DIO_enuSetPinDirection( GPS.GPS_VCC_PORT , GPS.GPS_VCC_PIN , DIO_OUTPUT_PIN );
    1142:	80 91 61 01 	lds	r24, 0x0161
    1146:	90 91 62 01 	lds	r25, 0x0162
    114a:	69 2f       	mov	r22, r25
    114c:	41 e0       	ldi	r20, 0x01	; 1
    114e:	0e 94 3d 04 	call	0x87a	; 0x87a <DIO_enuSetPinDirection>
		DIO_enuSetPinValue( GPS.GPS_VCC_PORT , GPS.GPS_VCC_PIN , DIO_HIGH );
    1152:	80 91 61 01 	lds	r24, 0x0161
    1156:	90 91 62 01 	lds	r25, 0x0162
    115a:	69 2f       	mov	r22, r25
    115c:	41 e0       	ldi	r20, 0x01	; 1
    115e:	0e 94 34 05 	call	0xa68	; 0xa68 <DIO_enuSetPinValue>

		DIO_enuSetPinDirection( GPS.GPS_GND_PORT , GPS.GPS_GND_PIN , DIO_OUTPUT_PIN );
    1162:	80 91 63 01 	lds	r24, 0x0163
    1166:	90 91 64 01 	lds	r25, 0x0164
    116a:	69 2f       	mov	r22, r25
    116c:	41 e0       	ldi	r20, 0x01	; 1
    116e:	0e 94 3d 04 	call	0x87a	; 0x87a <DIO_enuSetPinDirection>
		DIO_enuSetPinValue( GPS.GPS_GND_PORT , GPS.GPS_GND_PIN , DIO_LOW );
    1172:	80 91 63 01 	lds	r24, 0x0163
    1176:	90 91 64 01 	lds	r25, 0x0164
    117a:	69 2f       	mov	r22, r25
    117c:	40 e0       	ldi	r20, 0x00	; 0
    117e:	0e 94 34 05 	call	0xa68	; 0xa68 <DIO_enuSetPinValue>

		GPS_CLEAR_ALL_FLAGSE();
    1182:	10 92 ac 01 	sts	0x01AC, r1

		//Initiate the UART to receive read the gps output.
		UART_enuInit();
    1186:	0e 94 e6 01 	call	0x3cc	; 0x3cc <UART_enuInit>

		Local_enuErrorState = ES_OK ;
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	89 83       	std	Y+1, r24	; 0x01
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <GPS_enuInit+0x80>

		break ;

	case gps_off :
		//Do nothing.
		Local_enuErrorState = ES_OK ;
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	89 83       	std	Y+1, r24	; 0x01
	default:
		break;

	}//End of switch.

	return Local_enuErrorState ;
    1194:	89 81       	ldd	r24, Y+1	; 0x01

}//End of GPS_enuInit(void).
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	08 95       	ret

000011a2 <GPS_enuGetLocation>:
 *                   Argu.4:         Address of u8 variable  --->  ~  ~ Longitude  ~ (E,w,N or S)                  *
 * Return Type     : Error state of type ES_t.                                                                     *
 **.....................................................................................................************/
//   GPS_inlinevidAsciiToInt( u8 const* GPS_constu8_Buffer , f32** Copy_pf32Lat , f32** Copy_pf32Long  , u8** Copy_pu8LatDir , u8** Copy_pu8LongDir  )
ES_t GPS_enuGetLocation(f32* Copy_pf32Lat , f32* Copy_pf32Long , u8* Copy_pu8LatDir , u8* Copy_pu8LongDir )
{
    11a2:	0f 93       	push	r16
    11a4:	1f 93       	push	r17
    11a6:	df 93       	push	r29
    11a8:	cf 93       	push	r28
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
    11ae:	2b 97       	sbiw	r28, 0x0b	; 11
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	de bf       	out	0x3e, r29	; 62
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	cd bf       	out	0x3d, r28	; 61
    11ba:	9d 83       	std	Y+5, r25	; 0x05
    11bc:	8c 83       	std	Y+4, r24	; 0x04
    11be:	7f 83       	std	Y+7, r23	; 0x07
    11c0:	6e 83       	std	Y+6, r22	; 0x06
    11c2:	59 87       	std	Y+9, r21	; 0x09
    11c4:	48 87       	std	Y+8, r20	; 0x08
    11c6:	3b 87       	std	Y+11, r19	; 0x0b
    11c8:	2a 87       	std	Y+10, r18	; 0x0a

	ES_t Local_enuErrorState = ES_NOK ;
    11ca:	1a 82       	std	Y+2, r1	; 0x02


	if(( Copy_pf32Lat != NULL) && (Copy_pf32Long != NULL) && ( Copy_pu8LatDir != NULL)&& ( Copy_pu8LongDir !=  NULL))
    11cc:	8c 81       	ldd	r24, Y+4	; 0x04
    11ce:	9d 81       	ldd	r25, Y+5	; 0x05
    11d0:	00 97       	sbiw	r24, 0x00	; 0
    11d2:	09 f4       	brne	.+2      	; 0x11d6 <GPS_enuGetLocation+0x34>
    11d4:	8a c0       	rjmp	.+276    	; 0x12ea <GPS_enuGetLocation+0x148>
    11d6:	8e 81       	ldd	r24, Y+6	; 0x06
    11d8:	9f 81       	ldd	r25, Y+7	; 0x07
    11da:	00 97       	sbiw	r24, 0x00	; 0
    11dc:	09 f4       	brne	.+2      	; 0x11e0 <GPS_enuGetLocation+0x3e>
    11de:	85 c0       	rjmp	.+266    	; 0x12ea <GPS_enuGetLocation+0x148>
    11e0:	88 85       	ldd	r24, Y+8	; 0x08
    11e2:	99 85       	ldd	r25, Y+9	; 0x09
    11e4:	00 97       	sbiw	r24, 0x00	; 0
    11e6:	09 f4       	brne	.+2      	; 0x11ea <GPS_enuGetLocation+0x48>
    11e8:	80 c0       	rjmp	.+256    	; 0x12ea <GPS_enuGetLocation+0x148>
    11ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    11ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    11ee:	00 97       	sbiw	r24, 0x00	; 0
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <GPS_enuGetLocation+0x52>
    11f2:	7b c0       	rjmp	.+246    	; 0x12ea <GPS_enuGetLocation+0x148>
	{

		u8 Local_u8TempChar =  0  ;
    11f4:	1b 82       	std	Y+3, r1	; 0x03
		u8 Local_u8Counter  =  0  ;
    11f6:	19 82       	std	Y+1, r1	; 0x01


		UART_enuRecieveByte(&Local_u8TempChar);
    11f8:	ce 01       	movw	r24, r28
    11fa:	03 96       	adiw	r24, 0x03	; 3
    11fc:	0e 94 47 02 	call	0x48e	; 0x48e <UART_enuRecieveByte>
		do
		{
			/************************************************
			 * 1.Catch the Start of line '$'.               *
			 ************************************************/
			if(Local_u8TempChar != '$')
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	84 32       	cpi	r24, 0x24	; 36
    1204:	39 f0       	breq	.+14     	; 0x1214 <GPS_enuGetLocation+0x72>
			{
				do
				{
					UART_enuRecieveByte(&Local_u8TempChar);
    1206:	ce 01       	movw	r24, r28
    1208:	03 96       	adiw	r24, 0x03	; 3
    120a:	0e 94 47 02 	call	0x48e	; 0x48e <UART_enuRecieveByte>

				}while( Local_u8TempChar!= '$' );
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	84 32       	cpi	r24, 0x24	; 36
    1212:	c9 f7       	brne	.-14     	; 0x1206 <GPS_enuGetLocation+0x64>
			 *                                      $GP  RMC, *
			 *                                      $GP  GSA, *
			 *                                      $GP  RMC, *
			 *                                                *
			 **************************************************/
			UART_enuRecieveByte(&Local_u8TempChar);
    1214:	ce 01       	movw	r24, r28
    1216:	03 96       	adiw	r24, 0x03	; 3
    1218:	0e 94 47 02 	call	0x48e	; 0x48e <UART_enuRecieveByte>
			UART_enuRecieveByte(&Local_u8TempChar);
    121c:	ce 01       	movw	r24, r28
    121e:	03 96       	adiw	r24, 0x03	; 3
    1220:	0e 94 47 02 	call	0x48e	; 0x48e <UART_enuRecieveByte>

			/************************************************
			 * 3.Read more one character and make sure it's *
			 *   'G' Not 'R'.                              *
			 ************************************************/
			UART_enuRecieveByte(&Local_u8TempChar);
    1224:	ce 01       	movw	r24, r28
    1226:	03 96       	adiw	r24, 0x03	; 3
    1228:	0e 94 47 02 	call	0x48e	; 0x48e <UART_enuRecieveByte>

			if(Local_u8TempChar == 'G')
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	87 34       	cpi	r24, 0x47	; 71
    1230:	09 f0       	breq	.+2      	; 0x1234 <GPS_enuGetLocation+0x92>
    1232:	3f c0       	rjmp	.+126    	; 0x12b2 <GPS_enuGetLocation+0x110>

				/************************************************
				 * 4.Read more one character and make sure it's *
				 *   'G' Not 'M'or 'S'.                         *
				 ************************************************/
				UART_enuRecieveByte(&Local_u8TempChar);
    1234:	ce 01       	movw	r24, r28
    1236:	03 96       	adiw	r24, 0x03	; 3
    1238:	0e 94 47 02 	call	0x48e	; 0x48e <UART_enuRecieveByte>

				if(Local_u8TempChar == 'G')
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	87 34       	cpi	r24, 0x47	; 71
    1240:	c1 f5       	brne	.+112    	; 0x12b2 <GPS_enuGetLocation+0x110>

					/************************************************
					 * 5.Read more one character and make sure it's *
					 *   'A' Not 'C'.                               *
					 ************************************************/
					UART_enuRecieveByte(&Local_u8TempChar);
    1242:	ce 01       	movw	r24, r28
    1244:	03 96       	adiw	r24, 0x03	; 3
    1246:	0e 94 47 02 	call	0x48e	; 0x48e <UART_enuRecieveByte>

					if(Local_u8TempChar == 'A')
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	81 34       	cpi	r24, 0x41	; 65
    124e:	89 f5       	brne	.+98     	; 0x12b2 <GPS_enuGetLocation+0x110>

						/************************************************
						 * 6.Read more one character and make sure it's *
						 *   ',' (Check is an Optional Step).           *
						 ************************************************/
						UART_enuRecieveByte(&Local_u8TempChar);
    1250:	ce 01       	movw	r24, r28
    1252:	03 96       	adiw	r24, 0x03	; 3
    1254:	0e 94 47 02 	call	0x48e	; 0x48e <UART_enuRecieveByte>
						if( Local_u8TempChar == ',' )
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	8c 32       	cpi	r24, 0x2C	; 44
    125c:	51 f5       	brne	.+84     	; 0x12b2 <GPS_enuGetLocation+0x110>
							 *    Hint:-                                    *
							 *          lines always ends with \n character.*
							 ************************************************/
							do
							{
								UART_enuRecieveByte(&Local_u8TempChar);
    125e:	ce 01       	movw	r24, r28
    1260:	03 96       	adiw	r24, 0x03	; 3
    1262:	0e 94 47 02 	call	0x48e	; 0x48e <UART_enuRecieveByte>

								GPS_u8Buffer[Local_u8Counter++]=Local_u8TempChar;
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	88 2f       	mov	r24, r24
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	2b 81       	ldd	r18, Y+3	; 0x03
    126e:	fc 01       	movw	r30, r24
    1270:	eb 59       	subi	r30, 0x9B	; 155
    1272:	fe 4f       	sbci	r31, 0xFE	; 254
    1274:	20 83       	st	Z, r18
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	8f 5f       	subi	r24, 0xFF	; 255
    127a:	89 83       	std	Y+1, r24	; 0x01

							}while( Local_u8TempChar != '\n'  );
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	8a 30       	cpi	r24, 0x0A	; 10
    1280:	71 f7       	brne	.-36     	; 0x125e <GPS_enuGetLocation+0xbc>
							 *                                                         *
							 *         $GPGGA,143219.775,,,,,0,10,,,M,,M,,*70          *
							 *         $GPGGA,181430.343,5404.2675,N,00159.7569,W...   *
							 * index-->       012........[12].......                   *
							 **********************************************************/
							if(GPS_u8Buffer[12] != ',')
    1282:	80 91 71 01 	lds	r24, 0x0171
    1286:	8c 32       	cpi	r24, 0x2C	; 44
    1288:	31 f0       	breq	.+12     	; 0x1296 <GPS_enuGetLocation+0xf4>
							{

								//Set flag to break the outer do while() loop.
								GPS_SET_LINE_FLAG();
    128a:	80 91 ac 01 	lds	r24, 0x01AC
    128e:	81 60       	ori	r24, 0x01	; 1
    1290:	80 93 ac 01 	sts	0x01AC, r24
    1294:	0e c0       	rjmp	.+28     	; 0x12b2 <GPS_enuGetLocation+0x110>
								 * -Empty $GPGGA line. So, Reset the buffer and *
								 *  read another $GPGGA line.                   *
								 ************************************************/
								do
								{
									GPS_u8Buffer[Local_u8Counter--]='X';
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	88 2f       	mov	r24, r24
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	fc 01       	movw	r30, r24
    129e:	eb 59       	subi	r30, 0x9B	; 155
    12a0:	fe 4f       	sbci	r31, 0xFE	; 254
    12a2:	88 e5       	ldi	r24, 0x58	; 88
    12a4:	80 83       	st	Z, r24
    12a6:	89 81       	ldd	r24, Y+1	; 0x01
    12a8:	81 50       	subi	r24, 0x01	; 1
    12aa:	89 83       	std	Y+1, r24	; 0x01

								}while( Local_u8Counter != 0 );
    12ac:	89 81       	ldd	r24, Y+1	; 0x01
    12ae:	88 23       	and	r24, r24
    12b0:	91 f7       	brne	.-28     	; 0x1296 <GPS_enuGetLocation+0xf4>
			else
			{
				//-Hit 'R' Instead of 'G'.
			}

		}while( !(GPS_Flags.FLAG.GPGGA_LINE_FLAG) );
    12b2:	80 91 ac 01 	lds	r24, 0x01AC
    12b6:	81 70       	andi	r24, 0x01	; 1
    12b8:	88 23       	and	r24, r24
    12ba:	09 f4       	brne	.+2      	; 0x12be <GPS_enuGetLocation+0x11c>
    12bc:	a1 cf       	rjmp	.-190    	; 0x1200 <GPS_enuGetLocation+0x5e>

		//****************************************************************//
		//****************************************************************//


		GPS_inlinevidAsciiToInt( GPS_u8Buffer , &Copy_pf32Lat , &Copy_pf32Long , &Copy_pu8LatDir , &Copy_pu8LongDir  );
    12be:	85 e6       	ldi	r24, 0x65	; 101
    12c0:	91 e0       	ldi	r25, 0x01	; 1
    12c2:	9e 01       	movw	r18, r28
    12c4:	2c 5f       	subi	r18, 0xFC	; 252
    12c6:	3f 4f       	sbci	r19, 0xFF	; 255
    12c8:	ae 01       	movw	r20, r28
    12ca:	4a 5f       	subi	r20, 0xFA	; 250
    12cc:	5f 4f       	sbci	r21, 0xFF	; 255
    12ce:	fe 01       	movw	r30, r28
    12d0:	38 96       	adiw	r30, 0x08	; 8
    12d2:	de 01       	movw	r26, r28
    12d4:	1a 96       	adiw	r26, 0x0a	; 10
    12d6:	b9 01       	movw	r22, r18
    12d8:	9f 01       	movw	r18, r30
    12da:	8d 01       	movw	r16, r26
    12dc:	0e 94 57 07 	call	0xeae	; 0xeae <GPS_inlinevidAsciiToInt>


		GPS_CLEAR_ALL_FLAGSE();
    12e0:	10 92 ac 01 	sts	0x01AC, r1
						//****************************************************************//




						Local_enuErrorState = ES_OK ;
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	8a 83       	std	Y+2, r24	; 0x02
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <GPS_enuGetLocation+0x14c>


	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER ;
    12ea:	82 e0       	ldi	r24, 0x02	; 2
    12ec:	8a 83       	std	Y+2, r24	; 0x02
	}


	//func();
	return Local_enuErrorState ;
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02

}//End of GPS_enuGetLocation.
    12f0:	2b 96       	adiw	r28, 0x0b	; 11
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	f8 94       	cli
    12f6:	de bf       	out	0x3e, r29	; 62
    12f8:	0f be       	out	0x3f, r0	; 63
    12fa:	cd bf       	out	0x3d, r28	; 61
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	1f 91       	pop	r17
    1302:	0f 91       	pop	r16
    1304:	08 95       	ret

00001306 <main>:

u8 lat;
u8 lon;

int main(void)
{
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62

	GPS_enuInit();
    130e:	0e 94 8a 08 	call	0x1114	; 0x1114 <GPS_enuInit>

	//int i = 3 ;

	UART_enuSendByte('M');
    1312:	8d e4       	ldi	r24, 0x4D	; 77
    1314:	0e 94 14 02 	call	0x428	; 0x428 <UART_enuSendByte>
	UART_enuSendByte('a');
    1318:	81 e6       	ldi	r24, 0x61	; 97
    131a:	0e 94 14 02 	call	0x428	; 0x428 <UART_enuSendByte>
	UART_enuSendByte('i');
    131e:	89 e6       	ldi	r24, 0x69	; 105
    1320:	0e 94 14 02 	call	0x428	; 0x428 <UART_enuSendByte>
	UART_enuSendByte('n');
    1324:	8e e6       	ldi	r24, 0x6E	; 110
    1326:	0e 94 14 02 	call	0x428	; 0x428 <UART_enuSendByte>

	GPS_enuGetLocation(&var1 , &var2 , &lat , &lon );
    132a:	86 eb       	ldi	r24, 0xB6	; 182
    132c:	91 e0       	ldi	r25, 0x01	; 1
    132e:	48 2f       	mov	r20, r24
    1330:	81 eb       	ldi	r24, 0xB1	; 177
    1332:	91 e0       	ldi	r25, 0x01	; 1
    1334:	58 2f       	mov	r21, r24
    1336:	8d ea       	ldi	r24, 0xAD	; 173
    1338:	91 e0       	ldi	r25, 0x01	; 1
    133a:	22 eb       	ldi	r18, 0xB2	; 178
    133c:	31 e0       	ldi	r19, 0x01	; 1
    133e:	b9 01       	movw	r22, r18
    1340:	25 2f       	mov	r18, r21
    1342:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <GPS_enuGetLocation>
	while(1)
	{
		//ES_t GPS_enuGetLocation(f32* Copy_pf32Lat , f32* Copy_pf32Long , u8 Copy_pu8LatDir , u8 Copy_pu8LongDir );

		//GPS_enuGetLocation(&var1 , &var2 , &lat , &lon );
		UART_enuSendByte(' ');
    1346:	80 e2       	ldi	r24, 0x20	; 32
    1348:	0e 94 14 02 	call	0x428	; 0x428 <UART_enuSendByte>
		UART_enuSendByte(' ');
    134c:	80 e2       	ldi	r24, 0x20	; 32
    134e:	0e 94 14 02 	call	0x428	; 0x428 <UART_enuSendByte>
		UART_enuSendByte('w');
    1352:	87 e7       	ldi	r24, 0x77	; 119
    1354:	0e 94 14 02 	call	0x428	; 0x428 <UART_enuSendByte>
		UART_enuSendByte('h');
    1358:	88 e6       	ldi	r24, 0x68	; 104
    135a:	0e 94 14 02 	call	0x428	; 0x428 <UART_enuSendByte>
		UART_enuSendByte('i');
    135e:	89 e6       	ldi	r24, 0x69	; 105
    1360:	0e 94 14 02 	call	0x428	; 0x428 <UART_enuSendByte>
		UART_enuSendByte('l');
    1364:	8c e6       	ldi	r24, 0x6C	; 108
    1366:	0e 94 14 02 	call	0x428	; 0x428 <UART_enuSendByte>
		UART_enuSendByte('e');
    136a:	85 e6       	ldi	r24, 0x65	; 101
    136c:	0e 94 14 02 	call	0x428	; 0x428 <UART_enuSendByte>
		UART_enuSendByte('(');
    1370:	88 e2       	ldi	r24, 0x28	; 40
    1372:	0e 94 14 02 	call	0x428	; 0x428 <UART_enuSendByte>
		UART_enuSendByte('1');
    1376:	81 e3       	ldi	r24, 0x31	; 49
    1378:	0e 94 14 02 	call	0x428	; 0x428 <UART_enuSendByte>
		UART_enuSendByte(')');
    137c:	89 e2       	ldi	r24, 0x29	; 41
    137e:	0e 94 14 02 	call	0x428	; 0x428 <UART_enuSendByte>
    1382:	ff cf       	rjmp	.-2      	; 0x1382 <main+0x7c>

00001384 <__udivmodhi4>:
    1384:	aa 1b       	sub	r26, r26
    1386:	bb 1b       	sub	r27, r27
    1388:	51 e1       	ldi	r21, 0x11	; 17
    138a:	07 c0       	rjmp	.+14     	; 0x139a <__udivmodhi4_ep>

0000138c <__udivmodhi4_loop>:
    138c:	aa 1f       	adc	r26, r26
    138e:	bb 1f       	adc	r27, r27
    1390:	a6 17       	cp	r26, r22
    1392:	b7 07       	cpc	r27, r23
    1394:	10 f0       	brcs	.+4      	; 0x139a <__udivmodhi4_ep>
    1396:	a6 1b       	sub	r26, r22
    1398:	b7 0b       	sbc	r27, r23

0000139a <__udivmodhi4_ep>:
    139a:	88 1f       	adc	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	5a 95       	dec	r21
    13a0:	a9 f7       	brne	.-22     	; 0x138c <__udivmodhi4_loop>
    13a2:	80 95       	com	r24
    13a4:	90 95       	com	r25
    13a6:	bc 01       	movw	r22, r24
    13a8:	cd 01       	movw	r24, r26
    13aa:	08 95       	ret

000013ac <__prologue_saves__>:
    13ac:	2f 92       	push	r2
    13ae:	3f 92       	push	r3
    13b0:	4f 92       	push	r4
    13b2:	5f 92       	push	r5
    13b4:	6f 92       	push	r6
    13b6:	7f 92       	push	r7
    13b8:	8f 92       	push	r8
    13ba:	9f 92       	push	r9
    13bc:	af 92       	push	r10
    13be:	bf 92       	push	r11
    13c0:	cf 92       	push	r12
    13c2:	df 92       	push	r13
    13c4:	ef 92       	push	r14
    13c6:	ff 92       	push	r15
    13c8:	0f 93       	push	r16
    13ca:	1f 93       	push	r17
    13cc:	cf 93       	push	r28
    13ce:	df 93       	push	r29
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	ca 1b       	sub	r28, r26
    13d6:	db 0b       	sbc	r29, r27
    13d8:	0f b6       	in	r0, 0x3f	; 63
    13da:	f8 94       	cli
    13dc:	de bf       	out	0x3e, r29	; 62
    13de:	0f be       	out	0x3f, r0	; 63
    13e0:	cd bf       	out	0x3d, r28	; 61
    13e2:	09 94       	ijmp

000013e4 <__epilogue_restores__>:
    13e4:	2a 88       	ldd	r2, Y+18	; 0x12
    13e6:	39 88       	ldd	r3, Y+17	; 0x11
    13e8:	48 88       	ldd	r4, Y+16	; 0x10
    13ea:	5f 84       	ldd	r5, Y+15	; 0x0f
    13ec:	6e 84       	ldd	r6, Y+14	; 0x0e
    13ee:	7d 84       	ldd	r7, Y+13	; 0x0d
    13f0:	8c 84       	ldd	r8, Y+12	; 0x0c
    13f2:	9b 84       	ldd	r9, Y+11	; 0x0b
    13f4:	aa 84       	ldd	r10, Y+10	; 0x0a
    13f6:	b9 84       	ldd	r11, Y+9	; 0x09
    13f8:	c8 84       	ldd	r12, Y+8	; 0x08
    13fa:	df 80       	ldd	r13, Y+7	; 0x07
    13fc:	ee 80       	ldd	r14, Y+6	; 0x06
    13fe:	fd 80       	ldd	r15, Y+5	; 0x05
    1400:	0c 81       	ldd	r16, Y+4	; 0x04
    1402:	1b 81       	ldd	r17, Y+3	; 0x03
    1404:	aa 81       	ldd	r26, Y+2	; 0x02
    1406:	b9 81       	ldd	r27, Y+1	; 0x01
    1408:	ce 0f       	add	r28, r30
    140a:	d1 1d       	adc	r29, r1
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	f8 94       	cli
    1410:	de bf       	out	0x3e, r29	; 62
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	cd bf       	out	0x3d, r28	; 61
    1416:	ed 01       	movw	r28, r26
    1418:	08 95       	ret

0000141a <_exit>:
    141a:	f8 94       	cli

0000141c <__stop_program>:
    141c:	ff cf       	rjmp	.-2      	; 0x141c <__stop_program>
