/*****************************************************************************/
/*****************************************************************************/
/* Title                 :   GPS_Prog                                      */
/* Filename              :   GPS_Prog.c                                     */
/* Author                :   Shaban Abdullah Awad                            */
/* Created on            :   Mar 15, 2022                                    */
/* Version               :   0.0.0                                           */
/* Toolchain             :   avr-gcc (4.3.3)                                 */
/* Target                :   ATmega32                                        */
/* Notes                 :   None                                            */
/*                                                                           */
/*****************************************************************************/

/*****************************************************************************/
/******************************  INCLUDES  ***********************************/
#include "../LIB/STD_TYPES.h"
#include "../LIB/errorStates.h"

#include<util/delay.h>

#include "../MCAL/DIO/DIO_interface.h"
#include "../MCAL\USART\UART_Interface.h"

#include "GPS_Priv.h"
#include "GPS_Cnfg.h"



static GPS_FLAGS_t  GPS_Flags ;

//u8 Buffer[5]={'1','2','3','4','2'};
static u8 GPS_u8Buffer[GPS_LINE_LENGTH]={'X'};


/****************************************************************************
 ****************************************************************************
 * Function Name   : GPS_enuInit.                                           *
 * Description     : Utility function to initialize the GPS module          *
 *                   according to the PGS Configurable structure.           *
 * Argument Type   : None .                                                 *
 * Return Type     : Error state of type ES_t.                              *
 **....................*****************************************************/
ES_t GPS_enuInit(void)
{

	ES_t Local_enuErrorState = ES_NOK ;


	//Read the Status of gps module and make the appropriate configuration.
	switch( GPS.GPS_STATE_t )
	{
	case gps_on :

		/****************************************************************************
		 *-Initialize the Direction of pins that the gps module is connected on to  *
		 * be an output pins and Set the suitable value for each.                                                       *
		 ****************************************************************************/
		DIO_enuSetPinDirection( GPS.GPS_VCC_PORT , GPS.GPS_VCC_PIN , DIO_OUTPUT_PIN );
		DIO_enuSetPinValue( GPS.GPS_VCC_PORT , GPS.GPS_VCC_PIN , DIO_HIGH );

		DIO_enuSetPinDirection( GPS.GPS_GND_PORT , GPS.GPS_GND_PIN , DIO_OUTPUT_PIN );
		DIO_enuSetPinValue( GPS.GPS_GND_PORT , GPS.GPS_GND_PIN , DIO_LOW );

		GPS_CLEAR_ALL_FLAGSE();

		//Initiate the UART to receive read the gps output.
		UART_enuInit();

		Local_enuErrorState = ES_OK ;

		break ;

	case gps_off :
		//Do nothing.
		Local_enuErrorState = ES_OK ;
		break ;

	default:
		break;

	}//End of switch.

	return Local_enuErrorState ;

}//End of GPS_enuInit(void).


/******************************************************************************************************************
 ******************************************************************************************************************
 * Function Name   : GPS_enuGetLocation.                                                                           *
 * Description     : Utility function to read a valid GPS Location and store it in the buffer to be                *
 *                   Processed.                                                                                    *
 * Argument Type   : Argu.1:         Address of f32 variable --->  To pass Latitude value.                         *
 *                   Argu.2:         Address of f32 variable --->  ~  ~   Longitude value.                         *
 *                   Argu.3:         Address of u8 variable  --->  ~  ~  Latitude Direction (E,w,N or S)           *
 *                   Argu.4:         Address of u8 variable  --->  ~  ~ Longitude  ~ (E,w,N or S)                  *
 * Return Type     : Error state of type ES_t.                                                                     *
 **.....................................................................................................************/
//   GPS_enuGetLocation(f32* Copy_pf32Lat , f32* Copy_pf32Long , u8 Copy_pu8LatDir , u8 Copy_pu8LongDir );
ES_t GPS_enuGetLocation(f32* Copy_pf32Lat , f32* Copy_pf32Long , u8* Copy_pu8LatDir , u8* Copy_pu8LongDir )
{

	UART_enuSendByte(' ');
	UART_enuSendByte('G');
	UART_enuSendByte('e');
	UART_enuSendByte('t');
	UART_enuSendByte(' ');
	UART_enuSendByte('i');
	UART_enuSendByte('n');
	UART_enuSendByte(' ');



	ES_t Local_enuErrorState = ES_NOK ;


	if(( Copy_pf32Lat != NULL) && (Copy_pf32Long != NULL) && ( Copy_pu8LatDir != NULL)&& ( Copy_pu8LongDir !=  NULL))
	{

		u8 Local_u8TempChar =  0  ;
		u8 Local_u8Counter  =  0  ;


		UART_enuRecieveByte(&Local_u8TempChar);

		do
		{
			/************************************************
			 * 1.Catch the Start of line '$'.               *
			 ************************************************/
			if(Local_u8TempChar != '$')
			{
				do
				{
					UART_enuRecieveByte(&Local_u8TempChar);

				}while( Local_u8TempChar!= '$' );
			}
			// Now you Get '$'
			//UART_enuSendByte('$');


			/**************************************************
			 * 2.Read more tow characters and IGNORE them     *
			 *   because they are same in all PGS lines:      *
			 *                                   -> $GP  GGA, *
			 *                                      $GP  RMC, *
			 *                                      $GP  GSA, *
			 *                                      $GP  RMC, *
			 *                                                *
			 **************************************************/
			UART_enuRecieveByte(&Local_u8TempChar);
			UART_enuRecieveByte(&Local_u8TempChar);
			// Now you Get '$GP'
//			UART_enuSendByte('G');
//			UART_enuSendByte('P');
//

			/************************************************
			 * 3.Read more one character and make sure it's *
			 *   'G' Not 'R'.                              *
			 ************************************************/
			UART_enuRecieveByte(&Local_u8TempChar);

			if(Local_u8TempChar == 'G')
			{
				// Now you Get '$GPG'  of $GPG  GA, For sure.


				/************************************************
				 * 4.Read more one character and make sure it's *
				 *   'G' Not 'M'or 'S'.                         *
				 ************************************************/
				UART_enuRecieveByte(&Local_u8TempChar);

				if(Local_u8TempChar == 'G')
				{
					// Now you Get '$GPGG' of '$GPGG A,' For sure.

					/************************************************
					 * 5.Read more one character and make sure it's *
					 *   'A' Not 'C'.                               *
					 ************************************************/
					UART_enuRecieveByte(&Local_u8TempChar);

					if(Local_u8TempChar == 'A')
					{
						//Now you Get '$GPGGA' of '$GPGGA ,' For sure.

						//UART_enuSendByte('A');
						/************************************************
						 * 6.Read more one character and make sure it's *
						 *   ',' (Check is an Optional Step).           *
						 ************************************************/
						UART_enuRecieveByte(&Local_u8TempChar);
						if( Local_u8TempChar == ',' )
						{
							//Now you Get '$GPGGA,' of '$GPGGA,' For sure.

							//UART_enuSendByte(',');
							/************************************************
							 * 7. Read the whole Data exists on $GPGGA, line*
							 *     and store Data in buffer.                *
							 *                                              *
							 *    Hint:-                                    *
							 *          lines always ends with \n character.*
							 ************************************************/

							/*=================================================*/
							UART_enuRecieveByte(&Local_u8TempChar);
							UART_enuRecieveByte(&Local_u8TempChar);
							UART_enuRecieveByte(&Local_u8TempChar);
							UART_enuRecieveByte(&Local_u8TempChar);
							UART_enuRecieveByte(&Local_u8TempChar);
							UART_enuRecieveByte(&Local_u8TempChar);
							UART_enuRecieveByte(&Local_u8TempChar);
							UART_enuRecieveByte(&Local_u8TempChar);
							UART_enuRecieveByte(&Local_u8TempChar);
							UART_enuRecieveByte(&Local_u8TempChar);
							UART_enuRecieveByte(&Local_u8TempChar);
							UART_enuRecieveByte(&Local_u8TempChar);

							if( Local_u8TempChar == ',')
							{
								continue;
							}

							//UART_enuSendByte(Local_u8TempChar);

							GPS_u8Buffer[Local_u8Counter] = Local_u8TempChar ;

							Local_u8Counter++;
							/*=================================================*/

									//5404.2675,N,00159.7569,W,1,10,4.00,100.0,M,50.0,M,,*
							//[NMEA] $GPGGA,123534.742,5404.2675,N,00159.7569,W,1,10,4.00,100.0,M,50.0,M,,*7F [GPS1]
							do
							{

								UART_enuRecieveByte(&Local_u8TempChar);
								GPS_u8Buffer[Local_u8Counter] = Local_u8TempChar ;

								Local_u8Counter++;

							}while( Local_u8TempChar != '\n' );

							GPS_SET_LINE_FLAG();

						}
						else
						{
							//-Hit Not ','
						}

					}
					else
					{
						//-Hit '$GPGGC'
					}

				}
				else
				{
					//-Hit  'M' or 'S' instead of 'G'.

				}

			}
			else
			{
				//-Hit 'R' Instead of 'G'.

			}

		}while( !(GPS_Flags.FLAG.GPGGA_LINE_FLAG) );


		//****************************************************************//
		//****************************************************************//

		UART_enuSendByte(' ');
		UART_enuSendByte('G');
		UART_enuSendByte('o');
		UART_enuSendByte('t');
		UART_enuSendByte(' ');
		UART_enuSendByte('L');
		UART_enuSendByte('i');
		UART_enuSendByte('n');
		UART_enuSendByte('e');
		UART_enuSendByte(' ');

		//5404.2675,N,00159.7569,W,1,10,4.00,100.0,M,50.0,M,,*7B
		//[NMEA] $GPGGA,113055.824, ,,,,0,10,,,M,,M,,*74 [GPS1]



		int i = 0 ;
		do
		{

			UART_enuSendByte(GPS_u8Buffer[i]);
			i++ ;



		}while( i <= 30 );






		//GPS_inlinevidAsciiToInt( GPS_u8Buffer , &Copy_pf32Lat , &Copy_pf32Long , &Copy_pu8LatDir , &Copy_pu8LongDir  );


		GPS_CLEAR_ALL_FLAGSE();


		//****************************************************************//




		Local_enuErrorState = ES_OK ;





	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER ;
	}



	return Local_enuErrorState ;

}//End of GPS_enuGetLocation.





/***************************** END OF FILE. **********************************/
/*****************************************************************************/

