
GPS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000423c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000146  00800060  0000423c  000042d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  008001a6  008001a6  00004416  2**0
                  ALLOC
  3 .stab         00003b40  00000000  00000000  00004418  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001663  00000000  00000000  00007f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  000095bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000977b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000998f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000bfa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000d46f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000e77c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000e95c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000ec63  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f67d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e3       	ldi	r30, 0x3C	; 60
      68:	f2 e4       	ldi	r31, 0x42	; 66
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3a       	cpi	r26, 0xA6	; 166
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 ea       	ldi	r26, 0xA6	; 166
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3b       	cpi	r26, 0xB1	; 177
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2d 20 	call	0x405a	; 0x405a <main>
      8a:	0c 94 1c 21 	jmp	0x4238	; 0x4238 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a0 20 	jmp	0x4140	; 0x4140 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 bc 20 	jmp	0x4178	; 0x4178 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ac 20 	jmp	0x4158	; 0x4158 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c8 20 	jmp	0x4190	; 0x4190 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ac 20 	jmp	0x4158	; 0x4158 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c8 20 	jmp	0x4190	; 0x4190 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a0 20 	jmp	0x4140	; 0x4140 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 bc 20 	jmp	0x4178	; 0x4178 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a8 20 	jmp	0x4150	; 0x4150 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 c4 20 	jmp	0x4188	; 0x4188 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ac 20 	jmp	0x4158	; 0x4158 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c8 20 	jmp	0x4190	; 0x4190 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ac 20 	jmp	0x4158	; 0x4158 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c8 20 	jmp	0x4190	; 0x4190 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ac 20 	jmp	0x4158	; 0x4158 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c8 20 	jmp	0x4190	; 0x4190 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 a9 20 	jmp	0x4152	; 0x4152 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 c5 20 	jmp	0x418a	; 0x418a <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 b0 20 	jmp	0x4160	; 0x4160 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 cc 20 	jmp	0x4198	; 0x4198 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 a8 20 	jmp	0x4150	; 0x4150 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 c4 20 	jmp	0x4188	; 0x4188 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <UART_enuInit>:
#include "UART_Priv.h"
#include "UART_Cnfg.h"


void UART_enuInit( void )
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	 *                                                                           *
	 *                               5.4_ For Asynchronous mode .                *
	 *                                          Clear UCPOL Bit.                 *
	 *                                                                           *
	 ****************************************************************************/
	UCSRC =( (UART_MSK_BIT<<URSEL)|(UART_MSK_BIT<<UCSZ0)|(UART_MSK_BIT<<UCSZ1)  );
     ef2:	e0 e4       	ldi	r30, 0x40	; 64
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	86 e8       	ldi	r24, 0x86	; 134
     ef8:	80 83       	st	Z, r24

	UCSRA  &=~(UART_MSK_BIT<<U2X);

#elif UART_SPEED_MODE == DOUBLE

	UCSRA  |=(UART_MSK_BIT<<U2X);
     efa:	ab e2       	ldi	r26, 0x2B	; 43
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	eb e2       	ldi	r30, 0x2B	; 43
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	82 60       	ori	r24, 0x02	; 2
     f06:	8c 93       	st	X, r24

#endif



	UBRRL = MY_UBRRL  ;
     f08:	e9 e2       	ldi	r30, 0x29	; 41
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	8c e0       	ldi	r24, 0x0C	; 12
     f0e:	80 83       	st	Z, r24
	UBRRH = MY_UBRRH  ;
     f10:	e0 e4       	ldi	r30, 0x40	; 64
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	10 82       	st	Z, r1
	UART_RX_START();

#elif   UART_MODE   == TRANSCEIVER

	//3.Enable the  RXEN and TXEN Bit
	UART_TX_START();
     f16:	aa e2       	ldi	r26, 0x2A	; 42
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	ea e2       	ldi	r30, 0x2A	; 42
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	88 60       	ori	r24, 0x08	; 8
     f22:	8c 93       	st	X, r24
	UART_RX_START();
     f24:	aa e2       	ldi	r26, 0x2A	; 42
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	ea e2       	ldi	r30, 0x2A	; 42
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	80 61       	ori	r24, 0x10	; 16
     f30:	8c 93       	st	X, r24


	//2.Configure the UART Multi-processor Communication Mode.
#if  UART_MPC_MODE   ==  DISABLE_MPCM

	UCSRA  &=~(UART_MSK_BIT<<MPCM);
     f32:	ab e2       	ldi	r26, 0x2B	; 43
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	eb e2       	ldi	r30, 0x2B	; 43
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	8e 7f       	andi	r24, 0xFE	; 254
     f3e:	8c 93       	st	X, r24

	UCSRA  |=(UART_MSK_BIT<<MPCM);

#endif

}//End of UART_
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <UART_enuSendByte>:



ES_t UART_enuSendByte(u8 Copy_u8Data)
{
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	00 d0       	rcall	.+0      	; 0xf4c <UART_enuSendByte+0x6>
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState  = ES_NOK ;
     f52:	19 82       	std	Y+1, r1	; 0x01

	// Poll the for the UDRE
	while( !((UCSRA>>UDRE)&1) );
     f54:	eb e2       	ldi	r30, 0x2B	; 43
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	82 95       	swap	r24
     f5c:	86 95       	lsr	r24
     f5e:	87 70       	andi	r24, 0x07	; 7
     f60:	88 2f       	mov	r24, r24
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	81 70       	andi	r24, 0x01	; 1
     f66:	90 70       	andi	r25, 0x00	; 0
     f68:	00 97       	sbiw	r24, 0x00	; 0
     f6a:	a1 f3       	breq	.-24     	; 0xf54 <UART_enuSendByte+0xe>

	UDR = Copy_u8Data  ;
     f6c:	ec e2       	ldi	r30, 0x2C	; 44
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	80 83       	st	Z, r24

	//Check for the Completion of Transmittioin.
	if( (UCSRA>>TXC)&1 )
     f74:	eb e2       	ldi	r30, 0x2B	; 43
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	82 95       	swap	r24
     f7c:	86 95       	lsr	r24
     f7e:	86 95       	lsr	r24
     f80:	83 70       	andi	r24, 0x03	; 3
     f82:	88 2f       	mov	r24, r24
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	81 70       	andi	r24, 0x01	; 1
     f88:	90 70       	andi	r25, 0x00	; 0
     f8a:	88 23       	and	r24, r24
     f8c:	49 f0       	breq	.+18     	; 0xfa0 <UART_enuSendByte+0x5a>
	{
		//Clear the flag.
		UCSRA |=(UART_MSK_BIT<<TXC);
     f8e:	ab e2       	ldi	r26, 0x2B	; 43
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	eb e2       	ldi	r30, 0x2B	; 43
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	80 64       	ori	r24, 0x40	; 64
     f9a:	8c 93       	st	X, r24

		Local_enuErrorState = ES_OK ;
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		//Do nothing.
	}

	return Local_enuErrorState  ;
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
}//End of UART_enuSendByte().
     fa2:	0f 90       	pop	r0
     fa4:	0f 90       	pop	r0
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	08 95       	ret

00000fac <UART_enuRecieveByte>:


ES_t UART_enuRecieveByte( u8* Copy_u8Data )
{
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	00 d0       	rcall	.+0      	; 0xfb2 <UART_enuRecieveByte+0x6>
     fb2:	0f 92       	push	r0
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	9b 83       	std	Y+3, r25	; 0x03
     fba:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState  = ES_NOK ;
     fbc:	19 82       	std	Y+1, r1	; 0x01

	if(  Copy_u8Data != NULL  )
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	9b 81       	ldd	r25, Y+3	; 0x03
     fc2:	00 97       	sbiw	r24, 0x00	; 0
     fc4:	71 f0       	breq	.+28     	; 0xfe2 <UART_enuRecieveByte+0x36>
	{
		//There is NO Data to Read.
		while( !(( UCSRA>>RXC)&1) );
     fc6:	eb e2       	ldi	r30, 0x2B	; 43
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	88 23       	and	r24, r24
     fce:	dc f7       	brge	.-10     	; 0xfc6 <UART_enuRecieveByte+0x1a>

		*Copy_u8Data = UDR ;
     fd0:	ec e2       	ldi	r30, 0x2C	; 44
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	ea 81       	ldd	r30, Y+2	; 0x02
     fd8:	fb 81       	ldd	r31, Y+3	; 0x03
     fda:	80 83       	st	Z, r24

		Local_enuErrorState  = ES_OK ;
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	89 83       	std	Y+1, r24	; 0x01
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <UART_enuRecieveByte+0x3a>
	}
	else
	{
		Local_enuErrorState  = ES_NULL_POINTER;
     fe2:	82 e0       	ldi	r24, 0x02	; 2
     fe4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState  ;
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
}//End of UART_enuRecieveByte().
     fe8:	0f 90       	pop	r0
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	08 95       	ret

00000ff4 <UART_enuSendString>:

//          UART_enuSendString( arr );

ES_t UART_enuSendString( const u8* Copy_pcData)
{
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	00 d0       	rcall	.+0      	; 0xffa <UART_enuSendString+0x6>
     ffa:	0f 92       	push	r0
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    1000:	9b 83       	std	Y+3, r25	; 0x03
    1002:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState  = ES_NOK ;
    1004:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_pcData != NULL )
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	9b 81       	ldd	r25, Y+3	; 0x03
    100a:	00 97       	sbiw	r24, 0x00	; 0
    100c:	01 f1       	breq	.+64     	; 0x104e <UART_enuSendString+0x5a>
    100e:	17 c0       	rjmp	.+46     	; 0x103e <UART_enuSendString+0x4a>
	{

		while( *Copy_pcData != '\0')
		{

			while( !((UCSRA>>UDRE)&1) );
    1010:	eb e2       	ldi	r30, 0x2B	; 43
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	82 95       	swap	r24
    1018:	86 95       	lsr	r24
    101a:	87 70       	andi	r24, 0x07	; 7
    101c:	88 2f       	mov	r24, r24
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	81 70       	andi	r24, 0x01	; 1
    1022:	90 70       	andi	r25, 0x00	; 0
    1024:	00 97       	sbiw	r24, 0x00	; 0
    1026:	a1 f3       	breq	.-24     	; 0x1010 <UART_enuSendString+0x1c>

			UDR = *Copy_pcData ;
    1028:	ac e2       	ldi	r26, 0x2C	; 44
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	ea 81       	ldd	r30, Y+2	; 0x02
    102e:	fb 81       	ldd	r31, Y+3	; 0x03
    1030:	80 81       	ld	r24, Z
    1032:	8c 93       	st	X, r24

			Copy_pcData++ ;
    1034:	8a 81       	ldd	r24, Y+2	; 0x02
    1036:	9b 81       	ldd	r25, Y+3	; 0x03
    1038:	01 96       	adiw	r24, 0x01	; 1
    103a:	9b 83       	std	Y+3, r25	; 0x03
    103c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState  = ES_NOK ;

	if( Copy_pcData != NULL )
	{

		while( *Copy_pcData != '\0')
    103e:	ea 81       	ldd	r30, Y+2	; 0x02
    1040:	fb 81       	ldd	r31, Y+3	; 0x03
    1042:	80 81       	ld	r24, Z
    1044:	88 23       	and	r24, r24
    1046:	21 f7       	brne	.-56     	; 0x1010 <UART_enuSendString+0x1c>

			Copy_pcData++ ;

		}

		Local_enuErrorState  = ES_OK ;
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	89 83       	std	Y+1, r24	; 0x01
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <UART_enuSendString+0x5e>
	}
	else
	{
		Local_enuErrorState  = ES_NULL_POINTER ;
    104e:	82 e0       	ldi	r24, 0x02	; 2
    1050:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState  ;
    1052:	89 81       	ldd	r24, Y+1	; 0x01
}//End of UART_enuRecieveByte().
    1054:	0f 90       	pop	r0
    1056:	0f 90       	pop	r0
    1058:	0f 90       	pop	r0
    105a:	cf 91       	pop	r28
    105c:	df 91       	pop	r29
    105e:	08 95       	ret

00001060 <UART_enuReceiveString>:



ES_t UART_enuReceiveString(u8*  Copy_pcData)
{
    1060:	df 93       	push	r29
    1062:	cf 93       	push	r28
    1064:	00 d0       	rcall	.+0      	; 0x1066 <UART_enuReceiveString+0x6>
    1066:	00 d0       	rcall	.+0      	; 0x1068 <UART_enuReceiveString+0x8>
    1068:	00 d0       	rcall	.+0      	; 0x106a <UART_enuReceiveString+0xa>
    106a:	cd b7       	in	r28, 0x3d	; 61
    106c:	de b7       	in	r29, 0x3e	; 62
    106e:	9e 83       	std	Y+6, r25	; 0x06
    1070:	8d 83       	std	Y+5, r24	; 0x05
	ES_t Local_enuErrorState  = ES_NOK ;
    1072:	1c 82       	std	Y+4, r1	; 0x04

	if( Copy_pcData != 	NULL )
    1074:	8d 81       	ldd	r24, Y+5	; 0x05
    1076:	9e 81       	ldd	r25, Y+6	; 0x06
    1078:	00 97       	sbiw	r24, 0x00	; 0
    107a:	91 f1       	breq	.+100    	; 0x10e0 <UART_enuReceiveString+0x80>
	{
		u8 Local_u8Data  = 0  ;
    107c:	1b 82       	std	Y+3, r1	; 0x03

		u8 Local_u8Index = 0  ;
    107e:	1a 82       	std	Y+2, r1	; 0x02

		while( !((UCSRA>>RXC)&1) );
    1080:	eb e2       	ldi	r30, 0x2B	; 43
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	88 23       	and	r24, r24
    1088:	dc f7       	brge	.-10     	; 0x1080 <UART_enuReceiveString+0x20>

		u8 Local_u8Terminator = UDR ;
    108a:	ec e2       	ldi	r30, 0x2C	; 44
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	89 83       	std	Y+1, r24	; 0x01

		while(1)
		{
			while( !((UCSRA>>RXC)&1) );
    1092:	eb e2       	ldi	r30, 0x2B	; 43
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	88 23       	and	r24, r24
    109a:	dc f7       	brge	.-10     	; 0x1092 <UART_enuReceiveString+0x32>

			Local_u8Data = UDR ;
    109c:	ec e2       	ldi	r30, 0x2C	; 44
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	8b 83       	std	Y+3, r24	; 0x03

			if(Local_u8Data == Local_u8Terminator )
    10a4:	9b 81       	ldd	r25, Y+3	; 0x03
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	98 17       	cp	r25, r24
    10aa:	61 f4       	brne	.+24     	; 0x10c4 <UART_enuReceiveString+0x64>
			{
				Copy_pcData[Local_u8Index] = '\0' ;
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	8d 81       	ldd	r24, Y+5	; 0x05
    10b4:	9e 81       	ldd	r25, Y+6	; 0x06
    10b6:	fc 01       	movw	r30, r24
    10b8:	e2 0f       	add	r30, r18
    10ba:	f3 1f       	adc	r31, r19
    10bc:	10 82       	st	Z, r1
				Local_u8Index++ ;
			}

		}

		Local_enuErrorState = ES_OK ;
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	8c 83       	std	Y+4, r24	; 0x04
    10c2:	10 c0       	rjmp	.+32     	; 0x10e4 <UART_enuReceiveString+0x84>

				break;
			}
			else
			{
				Copy_pcData[Local_u8Index] = Local_u8Data ;
    10c4:	8a 81       	ldd	r24, Y+2	; 0x02
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	8d 81       	ldd	r24, Y+5	; 0x05
    10cc:	9e 81       	ldd	r25, Y+6	; 0x06
    10ce:	fc 01       	movw	r30, r24
    10d0:	e2 0f       	add	r30, r18
    10d2:	f3 1f       	adc	r31, r19
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	80 83       	st	Z, r24

				Local_u8Index++ ;
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	8f 5f       	subi	r24, 0xFF	; 255
    10dc:	8a 83       	std	Y+2, r24	; 0x02
    10de:	d9 cf       	rjmp	.-78     	; 0x1092 <UART_enuReceiveString+0x32>

		Local_enuErrorState = ES_OK ;
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER ;
    10e0:	82 e0       	ldi	r24, 0x02	; 2
    10e2:	8c 83       	std	Y+4, r24	; 0x04
	}

	return Local_enuErrorState  ;
    10e4:	8c 81       	ldd	r24, Y+4	; 0x04
}//End of UART_enuRecieveByte().
    10e6:	26 96       	adiw	r28, 0x06	; 6
    10e8:	0f b6       	in	r0, 0x3f	; 63
    10ea:	f8 94       	cli
    10ec:	de bf       	out	0x3e, r29	; 62
    10ee:	0f be       	out	0x3f, r0	; 63
    10f0:	cd bf       	out	0x3d, r28	; 61
    10f2:	cf 91       	pop	r28
    10f4:	df 91       	pop	r29
    10f6:	08 95       	ret

000010f8 <DIO_enuSetPortDirection>:
/*                 : Arg.2: Copy_u8Dir:                                     */
/*                                        DIO_INPTU_PIN  ,   DIO_OUTPUT_PIN */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Dir)
{
    10f8:	df 93       	push	r29
    10fa:	cf 93       	push	r28
    10fc:	00 d0       	rcall	.+0      	; 0x10fe <DIO_enuSetPortDirection+0x6>
    10fe:	00 d0       	rcall	.+0      	; 0x1100 <DIO_enuSetPortDirection+0x8>
    1100:	0f 92       	push	r0
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    1106:	8a 83       	std	Y+2, r24	; 0x02
    1108:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuerrorState = ES_NOK ;
    110a:	19 82       	std	Y+1, r1	; 0x01

	if( (Copy_u8PortID <= DIO_PORTD )&& (Copy_u8Dir <= OUTPUT_PORT)  )
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	84 30       	cpi	r24, 0x04	; 4
    1110:	a8 f5       	brcc	.+106    	; 0x117c <DIO_enuSetPortDirection+0x84>
	{
		switch( Copy_u8PortID )
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	3d 83       	std	Y+5, r19	; 0x05
    111a:	2c 83       	std	Y+4, r18	; 0x04
    111c:	8c 81       	ldd	r24, Y+4	; 0x04
    111e:	9d 81       	ldd	r25, Y+5	; 0x05
    1120:	81 30       	cpi	r24, 0x01	; 1
    1122:	91 05       	cpc	r25, r1
    1124:	d1 f0       	breq	.+52     	; 0x115a <DIO_enuSetPortDirection+0x62>
    1126:	2c 81       	ldd	r18, Y+4	; 0x04
    1128:	3d 81       	ldd	r19, Y+5	; 0x05
    112a:	22 30       	cpi	r18, 0x02	; 2
    112c:	31 05       	cpc	r19, r1
    112e:	2c f4       	brge	.+10     	; 0x113a <DIO_enuSetPortDirection+0x42>
    1130:	8c 81       	ldd	r24, Y+4	; 0x04
    1132:	9d 81       	ldd	r25, Y+5	; 0x05
    1134:	00 97       	sbiw	r24, 0x00	; 0
    1136:	61 f0       	breq	.+24     	; 0x1150 <DIO_enuSetPortDirection+0x58>
    1138:	1e c0       	rjmp	.+60     	; 0x1176 <DIO_enuSetPortDirection+0x7e>
    113a:	2c 81       	ldd	r18, Y+4	; 0x04
    113c:	3d 81       	ldd	r19, Y+5	; 0x05
    113e:	22 30       	cpi	r18, 0x02	; 2
    1140:	31 05       	cpc	r19, r1
    1142:	81 f0       	breq	.+32     	; 0x1164 <DIO_enuSetPortDirection+0x6c>
    1144:	8c 81       	ldd	r24, Y+4	; 0x04
    1146:	9d 81       	ldd	r25, Y+5	; 0x05
    1148:	83 30       	cpi	r24, 0x03	; 3
    114a:	91 05       	cpc	r25, r1
    114c:	81 f0       	breq	.+32     	; 0x116e <DIO_enuSetPortDirection+0x76>
    114e:	13 c0       	rjmp	.+38     	; 0x1176 <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA :
			DDRA = Copy_u8Dir;
    1150:	ea e3       	ldi	r30, 0x3A	; 58
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	80 83       	st	Z, r24
    1158:	0e c0       	rjmp	.+28     	; 0x1176 <DIO_enuSetPortDirection+0x7e>
			break;

		case DIO_PORTB :
			DDRB = Copy_u8Dir;
    115a:	e7 e3       	ldi	r30, 0x37	; 55
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	80 83       	st	Z, r24
    1162:	09 c0       	rjmp	.+18     	; 0x1176 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC :
			DDRC = Copy_u8Dir;
    1164:	e4 e3       	ldi	r30, 0x34	; 52
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	8b 81       	ldd	r24, Y+3	; 0x03
    116a:	80 83       	st	Z, r24
    116c:	04 c0       	rjmp	.+8      	; 0x1176 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD :
			DDRD = Copy_u8Dir;
    116e:	e1 e3       	ldi	r30, 0x31	; 49
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	80 83       	st	Z, r24
			break;
		}
		Local_enuerrorState = ES_OK;
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	89 83       	std	Y+1, r24	; 0x01
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <DIO_enuSetPortDirection+0x88>

	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
    117c:	83 e0       	ldi	r24, 0x03	; 3
    117e:	89 83       	std	Y+1, r24	; 0x01

	}


	return Local_enuerrorState  ;
    1180:	89 81       	ldd	r24, Y+1	; 0x01

}//End of DIO_enuSetPortDirection().
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	08 95       	ret

00001192 <DIO_enuSetPortValue>:
/*                 : Arg.2: Copy_u8Val:                                     */
/*                                        DIO_INPTU_PIN  ,  DIO_OUTPUT_PIN  */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuSetPortValue(u8 Copy_u8PortID, u8 Copy_u8Val)
{
    1192:	df 93       	push	r29
    1194:	cf 93       	push	r28
    1196:	00 d0       	rcall	.+0      	; 0x1198 <DIO_enuSetPortValue+0x6>
    1198:	00 d0       	rcall	.+0      	; 0x119a <DIO_enuSetPortValue+0x8>
    119a:	0f 92       	push	r0
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
    11a0:	8a 83       	std	Y+2, r24	; 0x02
    11a2:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuerrorState = ES_NOK ;
    11a4:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8PortID <= DIO_PORTD )
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	84 30       	cpi	r24, 0x04	; 4
    11aa:	a8 f5       	brcc	.+106    	; 0x1216 <DIO_enuSetPortValue+0x84>
	{
		switch( Copy_u8PortID )
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	3d 83       	std	Y+5, r19	; 0x05
    11b4:	2c 83       	std	Y+4, r18	; 0x04
    11b6:	8c 81       	ldd	r24, Y+4	; 0x04
    11b8:	9d 81       	ldd	r25, Y+5	; 0x05
    11ba:	81 30       	cpi	r24, 0x01	; 1
    11bc:	91 05       	cpc	r25, r1
    11be:	d1 f0       	breq	.+52     	; 0x11f4 <DIO_enuSetPortValue+0x62>
    11c0:	2c 81       	ldd	r18, Y+4	; 0x04
    11c2:	3d 81       	ldd	r19, Y+5	; 0x05
    11c4:	22 30       	cpi	r18, 0x02	; 2
    11c6:	31 05       	cpc	r19, r1
    11c8:	2c f4       	brge	.+10     	; 0x11d4 <DIO_enuSetPortValue+0x42>
    11ca:	8c 81       	ldd	r24, Y+4	; 0x04
    11cc:	9d 81       	ldd	r25, Y+5	; 0x05
    11ce:	00 97       	sbiw	r24, 0x00	; 0
    11d0:	61 f0       	breq	.+24     	; 0x11ea <DIO_enuSetPortValue+0x58>
    11d2:	1e c0       	rjmp	.+60     	; 0x1210 <DIO_enuSetPortValue+0x7e>
    11d4:	2c 81       	ldd	r18, Y+4	; 0x04
    11d6:	3d 81       	ldd	r19, Y+5	; 0x05
    11d8:	22 30       	cpi	r18, 0x02	; 2
    11da:	31 05       	cpc	r19, r1
    11dc:	81 f0       	breq	.+32     	; 0x11fe <DIO_enuSetPortValue+0x6c>
    11de:	8c 81       	ldd	r24, Y+4	; 0x04
    11e0:	9d 81       	ldd	r25, Y+5	; 0x05
    11e2:	83 30       	cpi	r24, 0x03	; 3
    11e4:	91 05       	cpc	r25, r1
    11e6:	81 f0       	breq	.+32     	; 0x1208 <DIO_enuSetPortValue+0x76>
    11e8:	13 c0       	rjmp	.+38     	; 0x1210 <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA :
			PORTA = Copy_u8Val;
    11ea:	eb e3       	ldi	r30, 0x3B	; 59
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	8b 81       	ldd	r24, Y+3	; 0x03
    11f0:	80 83       	st	Z, r24
    11f2:	0e c0       	rjmp	.+28     	; 0x1210 <DIO_enuSetPortValue+0x7e>
			break;

		case DIO_PORTB :
			PORTB = Copy_u8Val;
    11f4:	e8 e3       	ldi	r30, 0x38	; 56
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	80 83       	st	Z, r24
    11fc:	09 c0       	rjmp	.+18     	; 0x1210 <DIO_enuSetPortValue+0x7e>
			break;

		case DIO_PORTC :
			PORTC = Copy_u8Val;
    11fe:	e5 e3       	ldi	r30, 0x35	; 53
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	80 83       	st	Z, r24
    1206:	04 c0       	rjmp	.+8      	; 0x1210 <DIO_enuSetPortValue+0x7e>
			break;

		case DIO_PORTD :
			PORTD = Copy_u8Val;
    1208:	e2 e3       	ldi	r30, 0x32	; 50
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	8b 81       	ldd	r24, Y+3	; 0x03
    120e:	80 83       	st	Z, r24
			break;
		}

		Local_enuerrorState = ES_OK;
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	89 83       	std	Y+1, r24	; 0x01
    1214:	02 c0       	rjmp	.+4      	; 0x121a <DIO_enuSetPortValue+0x88>

	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
    1216:	83 e0       	ldi	r24, 0x03	; 3
    1218:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuerrorState  ;
    121a:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuSetPortValue().
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	cf 91       	pop	r28
    1228:	df 91       	pop	r29
    122a:	08 95       	ret

0000122c <DIO_enuToggelPort>:
/*                                        DIO_PORTA      ,   DIO_PORTA      */
/*                                        DIO_PORTA      ,   DIO_PORTA      */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuToggelPort(u8  Copy_u8PortID )
{
    122c:	df 93       	push	r29
    122e:	cf 93       	push	r28
    1230:	00 d0       	rcall	.+0      	; 0x1232 <DIO_enuToggelPort+0x6>
    1232:	00 d0       	rcall	.+0      	; 0x1234 <DIO_enuToggelPort+0x8>
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
    1238:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuerrorState = ES_NOK ;
    123a:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8PortID <= DIO_PORTD )
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	84 30       	cpi	r24, 0x04	; 4
    1240:	08 f0       	brcs	.+2      	; 0x1244 <DIO_enuToggelPort+0x18>
    1242:	41 c0       	rjmp	.+130    	; 0x12c6 <DIO_enuToggelPort+0x9a>
	{
		switch( Copy_u8PortID )
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	3c 83       	std	Y+4, r19	; 0x04
    124c:	2b 83       	std	Y+3, r18	; 0x03
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	9c 81       	ldd	r25, Y+4	; 0x04
    1252:	81 30       	cpi	r24, 0x01	; 1
    1254:	91 05       	cpc	r25, r1
    1256:	e9 f0       	breq	.+58     	; 0x1292 <DIO_enuToggelPort+0x66>
    1258:	2b 81       	ldd	r18, Y+3	; 0x03
    125a:	3c 81       	ldd	r19, Y+4	; 0x04
    125c:	22 30       	cpi	r18, 0x02	; 2
    125e:	31 05       	cpc	r19, r1
    1260:	2c f4       	brge	.+10     	; 0x126c <DIO_enuToggelPort+0x40>
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	9c 81       	ldd	r25, Y+4	; 0x04
    1266:	00 97       	sbiw	r24, 0x00	; 0
    1268:	61 f0       	breq	.+24     	; 0x1282 <DIO_enuToggelPort+0x56>
    126a:	2a c0       	rjmp	.+84     	; 0x12c0 <DIO_enuToggelPort+0x94>
    126c:	2b 81       	ldd	r18, Y+3	; 0x03
    126e:	3c 81       	ldd	r19, Y+4	; 0x04
    1270:	22 30       	cpi	r18, 0x02	; 2
    1272:	31 05       	cpc	r19, r1
    1274:	b1 f0       	breq	.+44     	; 0x12a2 <DIO_enuToggelPort+0x76>
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	9c 81       	ldd	r25, Y+4	; 0x04
    127a:	83 30       	cpi	r24, 0x03	; 3
    127c:	91 05       	cpc	r25, r1
    127e:	c9 f0       	breq	.+50     	; 0x12b2 <DIO_enuToggelPort+0x86>
    1280:	1f c0       	rjmp	.+62     	; 0x12c0 <DIO_enuToggelPort+0x94>
		{
		case DIO_PORTA :
			PORTA = ~PORTA;
    1282:	ab e3       	ldi	r26, 0x3B	; 59
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	eb e3       	ldi	r30, 0x3B	; 59
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	80 95       	com	r24
    128e:	8c 93       	st	X, r24
    1290:	17 c0       	rjmp	.+46     	; 0x12c0 <DIO_enuToggelPort+0x94>
			break;

		case DIO_PORTB :
			PORTB = ~PORTB;
    1292:	a8 e3       	ldi	r26, 0x38	; 56
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	e8 e3       	ldi	r30, 0x38	; 56
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	80 95       	com	r24
    129e:	8c 93       	st	X, r24
    12a0:	0f c0       	rjmp	.+30     	; 0x12c0 <DIO_enuToggelPort+0x94>
			break;

		case DIO_PORTC :
			PORTC = ~PORTC;
    12a2:	a5 e3       	ldi	r26, 0x35	; 53
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e5 e3       	ldi	r30, 0x35	; 53
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	80 95       	com	r24
    12ae:	8c 93       	st	X, r24
    12b0:	07 c0       	rjmp	.+14     	; 0x12c0 <DIO_enuToggelPort+0x94>
			break;

		case DIO_PORTD :
			PORTD = ~PORTD ;
    12b2:	a2 e3       	ldi	r26, 0x32	; 50
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	e2 e3       	ldi	r30, 0x32	; 50
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	80 95       	com	r24
    12be:	8c 93       	st	X, r24
			break;
		}

		Local_enuerrorState = ES_OK;
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	89 83       	std	Y+1, r24	; 0x01
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <DIO_enuToggelPort+0x9e>

	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
    12c6:	83 e0       	ldi	r24, 0x03	; 3
    12c8:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuerrorState  ;
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuToggelPort().
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	cf 91       	pop	r28
    12d6:	df 91       	pop	r29
    12d8:	08 95       	ret

000012da <DIO_enuGetPortVlaue>:
/*                                                                          */
/*                 : Arg.2: Address of u8 variable.                         */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuGetPortVlaue(u8 Copy_u8PortID, u8* Copy_pu8PortVal)
{
    12da:	df 93       	push	r29
    12dc:	cf 93       	push	r28
    12de:	00 d0       	rcall	.+0      	; 0x12e0 <DIO_enuGetPortVlaue+0x6>
    12e0:	00 d0       	rcall	.+0      	; 0x12e2 <DIO_enuGetPortVlaue+0x8>
    12e2:	00 d0       	rcall	.+0      	; 0x12e4 <DIO_enuGetPortVlaue+0xa>
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
    12e8:	8a 83       	std	Y+2, r24	; 0x02
    12ea:	7c 83       	std	Y+4, r23	; 0x04
    12ec:	6b 83       	std	Y+3, r22	; 0x03
	//Local Variable to
	ES_t Local_enuerrorState = ES_NOK ;
    12ee:	19 82       	std	Y+1, r1	; 0x01

	// Check to ensure that the passed address is not equal Null.
	if( Copy_pu8PortVal != NULL )
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	9c 81       	ldd	r25, Y+4	; 0x04
    12f4:	00 97       	sbiw	r24, 0x00	; 0
    12f6:	09 f4       	brne	.+2      	; 0x12fa <DIO_enuGetPortVlaue+0x20>
    12f8:	43 c0       	rjmp	.+134    	; 0x1380 <DIO_enuGetPortVlaue+0xa6>
	{
		// Check to ensure that the passed PortID is in range.
		if( Copy_u8PortID <= DIO_PORTD )
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	84 30       	cpi	r24, 0x04	; 4
    12fe:	e8 f5       	brcc	.+122    	; 0x137a <DIO_enuGetPortVlaue+0xa0>
		{

			/**********************************************************
			 * Switching for the suitable case .
			 **********************************************************/
			switch( Copy_u8PortID )
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	3e 83       	std	Y+6, r19	; 0x06
    1308:	2d 83       	std	Y+5, r18	; 0x05
    130a:	8d 81       	ldd	r24, Y+5	; 0x05
    130c:	9e 81       	ldd	r25, Y+6	; 0x06
    130e:	81 30       	cpi	r24, 0x01	; 1
    1310:	91 05       	cpc	r25, r1
    1312:	e1 f0       	breq	.+56     	; 0x134c <DIO_enuGetPortVlaue+0x72>
    1314:	2d 81       	ldd	r18, Y+5	; 0x05
    1316:	3e 81       	ldd	r19, Y+6	; 0x06
    1318:	22 30       	cpi	r18, 0x02	; 2
    131a:	31 05       	cpc	r19, r1
    131c:	2c f4       	brge	.+10     	; 0x1328 <DIO_enuGetPortVlaue+0x4e>
    131e:	8d 81       	ldd	r24, Y+5	; 0x05
    1320:	9e 81       	ldd	r25, Y+6	; 0x06
    1322:	00 97       	sbiw	r24, 0x00	; 0
    1324:	61 f0       	breq	.+24     	; 0x133e <DIO_enuGetPortVlaue+0x64>
    1326:	26 c0       	rjmp	.+76     	; 0x1374 <DIO_enuGetPortVlaue+0x9a>
    1328:	2d 81       	ldd	r18, Y+5	; 0x05
    132a:	3e 81       	ldd	r19, Y+6	; 0x06
    132c:	22 30       	cpi	r18, 0x02	; 2
    132e:	31 05       	cpc	r19, r1
    1330:	a1 f0       	breq	.+40     	; 0x135a <DIO_enuGetPortVlaue+0x80>
    1332:	8d 81       	ldd	r24, Y+5	; 0x05
    1334:	9e 81       	ldd	r25, Y+6	; 0x06
    1336:	83 30       	cpi	r24, 0x03	; 3
    1338:	91 05       	cpc	r25, r1
    133a:	b1 f0       	breq	.+44     	; 0x1368 <DIO_enuGetPortVlaue+0x8e>
    133c:	1b c0       	rjmp	.+54     	; 0x1374 <DIO_enuGetPortVlaue+0x9a>
			{
			case DIO_PORTA :
				*Copy_pu8PortVal = PINA;
    133e:	e9 e3       	ldi	r30, 0x39	; 57
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	eb 81       	ldd	r30, Y+3	; 0x03
    1346:	fc 81       	ldd	r31, Y+4	; 0x04
    1348:	80 83       	st	Z, r24
    134a:	14 c0       	rjmp	.+40     	; 0x1374 <DIO_enuGetPortVlaue+0x9a>
				break;

			case DIO_PORTB :
				*Copy_pu8PortVal = PINB;
    134c:	e6 e3       	ldi	r30, 0x36	; 54
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	eb 81       	ldd	r30, Y+3	; 0x03
    1354:	fc 81       	ldd	r31, Y+4	; 0x04
    1356:	80 83       	st	Z, r24
    1358:	0d c0       	rjmp	.+26     	; 0x1374 <DIO_enuGetPortVlaue+0x9a>
				break;

			case DIO_PORTC :
				*Copy_pu8PortVal = PINC;
    135a:	e3 e3       	ldi	r30, 0x33	; 51
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	eb 81       	ldd	r30, Y+3	; 0x03
    1362:	fc 81       	ldd	r31, Y+4	; 0x04
    1364:	80 83       	st	Z, r24
    1366:	06 c0       	rjmp	.+12     	; 0x1374 <DIO_enuGetPortVlaue+0x9a>
				break;

			case DIO_PORTD :
				*Copy_pu8PortVal = PIND ;
    1368:	e0 e3       	ldi	r30, 0x30	; 48
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	eb 81       	ldd	r30, Y+3	; 0x03
    1370:	fc 81       	ldd	r31, Y+4	; 0x04
    1372:	80 83       	st	Z, r24
				break;
			}

			Local_enuerrorState = ES_OK;
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	89 83       	std	Y+1, r24	; 0x01
    1378:	05 c0       	rjmp	.+10     	; 0x1384 <DIO_enuGetPortVlaue+0xaa>
		else
		{
			/**********************************************************
			 * Handle Out Of Range case.
			 **********************************************************/
			Local_enuerrorState = ES_OUT_OF_RANGE;
    137a:	83 e0       	ldi	r24, 0x03	; 3
    137c:	89 83       	std	Y+1, r24	; 0x01
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <DIO_enuGetPortVlaue+0xaa>
	else
	{
		/**********************************************************
		 * Handle null pointer case.
		 **********************************************************/
		Local_enuerrorState = ES_NULL_POINTER;
    1380:	82 e0       	ldi	r24, 0x02	; 2
    1382:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuerrorState  ;
    1384:	89 81       	ldd	r24, Y+1	; 0x01

}//End of DIO_enuGetPortVlaue().
    1386:	26 96       	adiw	r28, 0x06	; 6
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	cd bf       	out	0x3d, r28	; 61
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	08 95       	ret

00001398 <DIO_enuSetPinDirection>:
/*                 : Arg.3: Copy_u8Dir.                                     */
/*                                       DIO_INPTU_PIN   ,   DIO_OUTPUT_PIN */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID, u8 Copy_u8PinID , u8 Copy_u8Dir)
{
    1398:	df 93       	push	r29
    139a:	cf 93       	push	r28
    139c:	00 d0       	rcall	.+0      	; 0x139e <DIO_enuSetPinDirection+0x6>
    139e:	00 d0       	rcall	.+0      	; 0x13a0 <DIO_enuSetPinDirection+0x8>
    13a0:	00 d0       	rcall	.+0      	; 0x13a2 <DIO_enuSetPinDirection+0xa>
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
    13a6:	8a 83       	std	Y+2, r24	; 0x02
    13a8:	6b 83       	std	Y+3, r22	; 0x03
    13aa:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuerrorState = ES_NOK ;
    13ac:	19 82       	std	Y+1, r1	; 0x01

	if( (Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <= DIO_PIN7) &&( Copy_u8Dir<= OUTPUT_PIN))
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	84 30       	cpi	r24, 0x04	; 4
    13b2:	08 f0       	brcs	.+2      	; 0x13b6 <DIO_enuSetPinDirection+0x1e>
    13b4:	dc c0       	rjmp	.+440    	; 0x156e <DIO_enuSetPinDirection+0x1d6>
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	88 30       	cpi	r24, 0x08	; 8
    13ba:	08 f0       	brcs	.+2      	; 0x13be <DIO_enuSetPinDirection+0x26>
    13bc:	d8 c0       	rjmp	.+432    	; 0x156e <DIO_enuSetPinDirection+0x1d6>
    13be:	8c 81       	ldd	r24, Y+4	; 0x04
    13c0:	82 30       	cpi	r24, 0x02	; 2
    13c2:	08 f0       	brcs	.+2      	; 0x13c6 <DIO_enuSetPinDirection+0x2e>
    13c4:	d4 c0       	rjmp	.+424    	; 0x156e <DIO_enuSetPinDirection+0x1d6>
	{

		/**********************************************************
		 * Switching for the suitable case .
		 **********************************************************/
		switch( Copy_u8PortID )
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	3e 83       	std	Y+6, r19	; 0x06
    13ce:	2d 83       	std	Y+5, r18	; 0x05
    13d0:	8d 81       	ldd	r24, Y+5	; 0x05
    13d2:	9e 81       	ldd	r25, Y+6	; 0x06
    13d4:	81 30       	cpi	r24, 0x01	; 1
    13d6:	91 05       	cpc	r25, r1
    13d8:	09 f4       	brne	.+2      	; 0x13dc <DIO_enuSetPinDirection+0x44>
    13da:	43 c0       	rjmp	.+134    	; 0x1462 <DIO_enuSetPinDirection+0xca>
    13dc:	2d 81       	ldd	r18, Y+5	; 0x05
    13de:	3e 81       	ldd	r19, Y+6	; 0x06
    13e0:	22 30       	cpi	r18, 0x02	; 2
    13e2:	31 05       	cpc	r19, r1
    13e4:	2c f4       	brge	.+10     	; 0x13f0 <DIO_enuSetPinDirection+0x58>
    13e6:	8d 81       	ldd	r24, Y+5	; 0x05
    13e8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ea:	00 97       	sbiw	r24, 0x00	; 0
    13ec:	71 f0       	breq	.+28     	; 0x140a <DIO_enuSetPinDirection+0x72>
    13ee:	bc c0       	rjmp	.+376    	; 0x1568 <DIO_enuSetPinDirection+0x1d0>
    13f0:	2d 81       	ldd	r18, Y+5	; 0x05
    13f2:	3e 81       	ldd	r19, Y+6	; 0x06
    13f4:	22 30       	cpi	r18, 0x02	; 2
    13f6:	31 05       	cpc	r19, r1
    13f8:	09 f4       	brne	.+2      	; 0x13fc <DIO_enuSetPinDirection+0x64>
    13fa:	5f c0       	rjmp	.+190    	; 0x14ba <DIO_enuSetPinDirection+0x122>
    13fc:	8d 81       	ldd	r24, Y+5	; 0x05
    13fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1400:	83 30       	cpi	r24, 0x03	; 3
    1402:	91 05       	cpc	r25, r1
    1404:	09 f4       	brne	.+2      	; 0x1408 <DIO_enuSetPinDirection+0x70>
    1406:	85 c0       	rjmp	.+266    	; 0x1512 <DIO_enuSetPinDirection+0x17a>
    1408:	af c0       	rjmp	.+350    	; 0x1568 <DIO_enuSetPinDirection+0x1d0>
		{
		case DIO_PORTA :
			if( Copy_u8Dir == INPTU_PIN)
    140a:	8c 81       	ldd	r24, Y+4	; 0x04
    140c:	88 23       	and	r24, r24
    140e:	a9 f4       	brne	.+42     	; 0x143a <DIO_enuSetPinDirection+0xa2>
			{
				DDRA &=~(DIO_MASK_BIT<<Copy_u8PinID);
    1410:	aa e3       	ldi	r26, 0x3A	; 58
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	ea e3       	ldi	r30, 0x3A	; 58
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	48 2f       	mov	r20, r24
    141c:	8b 81       	ldd	r24, Y+3	; 0x03
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	02 2e       	mov	r0, r18
    1428:	02 c0       	rjmp	.+4      	; 0x142e <DIO_enuSetPinDirection+0x96>
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	0a 94       	dec	r0
    1430:	e2 f7       	brpl	.-8      	; 0x142a <DIO_enuSetPinDirection+0x92>
    1432:	80 95       	com	r24
    1434:	84 23       	and	r24, r20
    1436:	8c 93       	st	X, r24
    1438:	97 c0       	rjmp	.+302    	; 0x1568 <DIO_enuSetPinDirection+0x1d0>
			}
			else
			{
				DDRA |=(DIO_MASK_BIT<<Copy_u8PinID);
    143a:	aa e3       	ldi	r26, 0x3A	; 58
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	ea e3       	ldi	r30, 0x3A	; 58
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	48 2f       	mov	r20, r24
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	02 2e       	mov	r0, r18
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <DIO_enuSetPinDirection+0xc0>
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	0a 94       	dec	r0
    145a:	e2 f7       	brpl	.-8      	; 0x1454 <DIO_enuSetPinDirection+0xbc>
    145c:	84 2b       	or	r24, r20
    145e:	8c 93       	st	X, r24
    1460:	83 c0       	rjmp	.+262    	; 0x1568 <DIO_enuSetPinDirection+0x1d0>
			}

			break;

		case DIO_PORTB :
			if( Copy_u8Dir == INPTU_PIN)
    1462:	8c 81       	ldd	r24, Y+4	; 0x04
    1464:	88 23       	and	r24, r24
    1466:	a9 f4       	brne	.+42     	; 0x1492 <DIO_enuSetPinDirection+0xfa>
			{
				DDRB &=~(DIO_MASK_BIT<<Copy_u8PinID);
    1468:	a7 e3       	ldi	r26, 0x37	; 55
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e7 e3       	ldi	r30, 0x37	; 55
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	48 2f       	mov	r20, r24
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	02 2e       	mov	r0, r18
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <DIO_enuSetPinDirection+0xee>
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	0a 94       	dec	r0
    1488:	e2 f7       	brpl	.-8      	; 0x1482 <DIO_enuSetPinDirection+0xea>
    148a:	80 95       	com	r24
    148c:	84 23       	and	r24, r20
    148e:	8c 93       	st	X, r24
    1490:	6b c0       	rjmp	.+214    	; 0x1568 <DIO_enuSetPinDirection+0x1d0>
			}
			else
			{
				DDRB |=(DIO_MASK_BIT<<Copy_u8PinID);
    1492:	a7 e3       	ldi	r26, 0x37	; 55
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e7 e3       	ldi	r30, 0x37	; 55
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	48 2f       	mov	r20, r24
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	02 2e       	mov	r0, r18
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <DIO_enuSetPinDirection+0x118>
    14ac:	88 0f       	add	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	0a 94       	dec	r0
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <DIO_enuSetPinDirection+0x114>
    14b4:	84 2b       	or	r24, r20
    14b6:	8c 93       	st	X, r24
    14b8:	57 c0       	rjmp	.+174    	; 0x1568 <DIO_enuSetPinDirection+0x1d0>
			}
			break;

		case DIO_PORTC :

			if( Copy_u8Dir == INPTU_PIN)
    14ba:	8c 81       	ldd	r24, Y+4	; 0x04
    14bc:	88 23       	and	r24, r24
    14be:	a9 f4       	brne	.+42     	; 0x14ea <DIO_enuSetPinDirection+0x152>
			{
				DDRC &=~(DIO_MASK_BIT<<Copy_u8PinID);
    14c0:	a4 e3       	ldi	r26, 0x34	; 52
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	e4 e3       	ldi	r30, 0x34	; 52
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	48 2f       	mov	r20, r24
    14cc:	8b 81       	ldd	r24, Y+3	; 0x03
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	02 2e       	mov	r0, r18
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <DIO_enuSetPinDirection+0x146>
    14da:	88 0f       	add	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	0a 94       	dec	r0
    14e0:	e2 f7       	brpl	.-8      	; 0x14da <DIO_enuSetPinDirection+0x142>
    14e2:	80 95       	com	r24
    14e4:	84 23       	and	r24, r20
    14e6:	8c 93       	st	X, r24
    14e8:	3f c0       	rjmp	.+126    	; 0x1568 <DIO_enuSetPinDirection+0x1d0>
			}
			else
			{
				DDRC |=(DIO_MASK_BIT<<Copy_u8PinID);
    14ea:	a4 e3       	ldi	r26, 0x34	; 52
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e4 e3       	ldi	r30, 0x34	; 52
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	48 2f       	mov	r20, r24
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	02 2e       	mov	r0, r18
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <DIO_enuSetPinDirection+0x170>
    1504:	88 0f       	add	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	0a 94       	dec	r0
    150a:	e2 f7       	brpl	.-8      	; 0x1504 <DIO_enuSetPinDirection+0x16c>
    150c:	84 2b       	or	r24, r20
    150e:	8c 93       	st	X, r24
    1510:	2b c0       	rjmp	.+86     	; 0x1568 <DIO_enuSetPinDirection+0x1d0>
			}
			break;

		case DIO_PORTD :
			if( Copy_u8Dir == INPTU_PIN)
    1512:	8c 81       	ldd	r24, Y+4	; 0x04
    1514:	88 23       	and	r24, r24
    1516:	a9 f4       	brne	.+42     	; 0x1542 <DIO_enuSetPinDirection+0x1aa>
			{
				DDRD &=~(DIO_MASK_BIT<<Copy_u8PinID);
    1518:	a1 e3       	ldi	r26, 0x31	; 49
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	e1 e3       	ldi	r30, 0x31	; 49
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	48 2f       	mov	r20, r24
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	02 2e       	mov	r0, r18
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <DIO_enuSetPinDirection+0x19e>
    1532:	88 0f       	add	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	0a 94       	dec	r0
    1538:	e2 f7       	brpl	.-8      	; 0x1532 <DIO_enuSetPinDirection+0x19a>
    153a:	80 95       	com	r24
    153c:	84 23       	and	r24, r20
    153e:	8c 93       	st	X, r24
    1540:	13 c0       	rjmp	.+38     	; 0x1568 <DIO_enuSetPinDirection+0x1d0>
			}
			else
			{
				DDRD |=(DIO_MASK_BIT<<Copy_u8PinID);
    1542:	a1 e3       	ldi	r26, 0x31	; 49
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e1 e3       	ldi	r30, 0x31	; 49
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	48 2f       	mov	r20, r24
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	02 2e       	mov	r0, r18
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <DIO_enuSetPinDirection+0x1c8>
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	0a 94       	dec	r0
    1562:	e2 f7       	brpl	.-8      	; 0x155c <DIO_enuSetPinDirection+0x1c4>
    1564:	84 2b       	or	r24, r20
    1566:	8c 93       	st	X, r24
			}
			break;

		}
		Local_enuerrorState = ES_OK;
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	89 83       	std	Y+1, r24	; 0x01
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <DIO_enuSetPinDirection+0x1da>
	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
    156e:	83 e0       	ldi	r24, 0x03	; 3
    1570:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuerrorState  ;
    1572:	89 81       	ldd	r24, Y+1	; 0x01

}//End of DIO_enuSetPinDirection().
    1574:	26 96       	adiw	r28, 0x06	; 6
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	f8 94       	cli
    157a:	de bf       	out	0x3e, r29	; 62
    157c:	0f be       	out	0x3f, r0	; 63
    157e:	cd bf       	out	0x3d, r28	; 61
    1580:	cf 91       	pop	r28
    1582:	df 91       	pop	r29
    1584:	08 95       	ret

00001586 <DIO_enuSetPinValue>:
/*                 : Arg.3: Copy_u8Val.                                     */
/*                                        DIO_LOW        ,   DIO_HIGH       */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuSetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID ,u8 Copy_u8Val)
{
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	00 d0       	rcall	.+0      	; 0x158c <DIO_enuSetPinValue+0x6>
    158c:	00 d0       	rcall	.+0      	; 0x158e <DIO_enuSetPinValue+0x8>
    158e:	00 d0       	rcall	.+0      	; 0x1590 <DIO_enuSetPinValue+0xa>
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62
    1594:	8a 83       	std	Y+2, r24	; 0x02
    1596:	6b 83       	std	Y+3, r22	; 0x03
    1598:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuerrorState = ES_NOK ;
    159a:	19 82       	std	Y+1, r1	; 0x01

	if( (Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <= DIO_PIN7) &&( Copy_u8Val<=DIO_HIGH))
    159c:	8a 81       	ldd	r24, Y+2	; 0x02
    159e:	84 30       	cpi	r24, 0x04	; 4
    15a0:	08 f0       	brcs	.+2      	; 0x15a4 <DIO_enuSetPinValue+0x1e>
    15a2:	dc c0       	rjmp	.+440    	; 0x175c <DIO_enuSetPinValue+0x1d6>
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	88 30       	cpi	r24, 0x08	; 8
    15a8:	08 f0       	brcs	.+2      	; 0x15ac <DIO_enuSetPinValue+0x26>
    15aa:	d8 c0       	rjmp	.+432    	; 0x175c <DIO_enuSetPinValue+0x1d6>
    15ac:	8c 81       	ldd	r24, Y+4	; 0x04
    15ae:	82 30       	cpi	r24, 0x02	; 2
    15b0:	08 f0       	brcs	.+2      	; 0x15b4 <DIO_enuSetPinValue+0x2e>
    15b2:	d4 c0       	rjmp	.+424    	; 0x175c <DIO_enuSetPinValue+0x1d6>
	{

		/**********************************************************
		 * Switching for the suitable case .
		 **********************************************************/
		switch( Copy_u8PortID )
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	3e 83       	std	Y+6, r19	; 0x06
    15bc:	2d 83       	std	Y+5, r18	; 0x05
    15be:	8d 81       	ldd	r24, Y+5	; 0x05
    15c0:	9e 81       	ldd	r25, Y+6	; 0x06
    15c2:	81 30       	cpi	r24, 0x01	; 1
    15c4:	91 05       	cpc	r25, r1
    15c6:	09 f4       	brne	.+2      	; 0x15ca <DIO_enuSetPinValue+0x44>
    15c8:	43 c0       	rjmp	.+134    	; 0x1650 <DIO_enuSetPinValue+0xca>
    15ca:	2d 81       	ldd	r18, Y+5	; 0x05
    15cc:	3e 81       	ldd	r19, Y+6	; 0x06
    15ce:	22 30       	cpi	r18, 0x02	; 2
    15d0:	31 05       	cpc	r19, r1
    15d2:	2c f4       	brge	.+10     	; 0x15de <DIO_enuSetPinValue+0x58>
    15d4:	8d 81       	ldd	r24, Y+5	; 0x05
    15d6:	9e 81       	ldd	r25, Y+6	; 0x06
    15d8:	00 97       	sbiw	r24, 0x00	; 0
    15da:	71 f0       	breq	.+28     	; 0x15f8 <DIO_enuSetPinValue+0x72>
    15dc:	bc c0       	rjmp	.+376    	; 0x1756 <DIO_enuSetPinValue+0x1d0>
    15de:	2d 81       	ldd	r18, Y+5	; 0x05
    15e0:	3e 81       	ldd	r19, Y+6	; 0x06
    15e2:	22 30       	cpi	r18, 0x02	; 2
    15e4:	31 05       	cpc	r19, r1
    15e6:	09 f4       	brne	.+2      	; 0x15ea <DIO_enuSetPinValue+0x64>
    15e8:	5f c0       	rjmp	.+190    	; 0x16a8 <DIO_enuSetPinValue+0x122>
    15ea:	8d 81       	ldd	r24, Y+5	; 0x05
    15ec:	9e 81       	ldd	r25, Y+6	; 0x06
    15ee:	83 30       	cpi	r24, 0x03	; 3
    15f0:	91 05       	cpc	r25, r1
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <DIO_enuSetPinValue+0x70>
    15f4:	85 c0       	rjmp	.+266    	; 0x1700 <DIO_enuSetPinValue+0x17a>
    15f6:	af c0       	rjmp	.+350    	; 0x1756 <DIO_enuSetPinValue+0x1d0>
		{
		case DIO_PORTA :
			if( Copy_u8Val == DIO_LOW)
    15f8:	8c 81       	ldd	r24, Y+4	; 0x04
    15fa:	88 23       	and	r24, r24
    15fc:	a9 f4       	brne	.+42     	; 0x1628 <DIO_enuSetPinValue+0xa2>
			{
				PORTA &=~(DIO_MASK_BIT<<Copy_u8PinID);
    15fe:	ab e3       	ldi	r26, 0x3B	; 59
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	eb e3       	ldi	r30, 0x3B	; 59
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	48 2f       	mov	r20, r24
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	02 2e       	mov	r0, r18
    1616:	02 c0       	rjmp	.+4      	; 0x161c <DIO_enuSetPinValue+0x96>
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	0a 94       	dec	r0
    161e:	e2 f7       	brpl	.-8      	; 0x1618 <DIO_enuSetPinValue+0x92>
    1620:	80 95       	com	r24
    1622:	84 23       	and	r24, r20
    1624:	8c 93       	st	X, r24
    1626:	97 c0       	rjmp	.+302    	; 0x1756 <DIO_enuSetPinValue+0x1d0>
			}
			else
			{
				PORTA |=(DIO_MASK_BIT<<Copy_u8PinID);
    1628:	ab e3       	ldi	r26, 0x3B	; 59
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	eb e3       	ldi	r30, 0x3B	; 59
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	48 2f       	mov	r20, r24
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	28 2f       	mov	r18, r24
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	02 2e       	mov	r0, r18
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <DIO_enuSetPinValue+0xc0>
    1642:	88 0f       	add	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	0a 94       	dec	r0
    1648:	e2 f7       	brpl	.-8      	; 0x1642 <DIO_enuSetPinValue+0xbc>
    164a:	84 2b       	or	r24, r20
    164c:	8c 93       	st	X, r24
    164e:	83 c0       	rjmp	.+262    	; 0x1756 <DIO_enuSetPinValue+0x1d0>
			}

			break;

		case DIO_PORTB :
			if( Copy_u8Val == DIO_LOW)
    1650:	8c 81       	ldd	r24, Y+4	; 0x04
    1652:	88 23       	and	r24, r24
    1654:	a9 f4       	brne	.+42     	; 0x1680 <DIO_enuSetPinValue+0xfa>
			{
				PORTB &=~(DIO_MASK_BIT<<Copy_u8PinID);
    1656:	a8 e3       	ldi	r26, 0x38	; 56
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	e8 e3       	ldi	r30, 0x38	; 56
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	48 2f       	mov	r20, r24
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
    1664:	28 2f       	mov	r18, r24
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	02 2e       	mov	r0, r18
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <DIO_enuSetPinValue+0xee>
    1670:	88 0f       	add	r24, r24
    1672:	99 1f       	adc	r25, r25
    1674:	0a 94       	dec	r0
    1676:	e2 f7       	brpl	.-8      	; 0x1670 <DIO_enuSetPinValue+0xea>
    1678:	80 95       	com	r24
    167a:	84 23       	and	r24, r20
    167c:	8c 93       	st	X, r24
    167e:	6b c0       	rjmp	.+214    	; 0x1756 <DIO_enuSetPinValue+0x1d0>
			}
			else
			{
				PORTB |=(DIO_MASK_BIT<<Copy_u8PinID);
    1680:	a8 e3       	ldi	r26, 0x38	; 56
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	e8 e3       	ldi	r30, 0x38	; 56
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	48 2f       	mov	r20, r24
    168c:	8b 81       	ldd	r24, Y+3	; 0x03
    168e:	28 2f       	mov	r18, r24
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	02 2e       	mov	r0, r18
    1698:	02 c0       	rjmp	.+4      	; 0x169e <DIO_enuSetPinValue+0x118>
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	0a 94       	dec	r0
    16a0:	e2 f7       	brpl	.-8      	; 0x169a <DIO_enuSetPinValue+0x114>
    16a2:	84 2b       	or	r24, r20
    16a4:	8c 93       	st	X, r24
    16a6:	57 c0       	rjmp	.+174    	; 0x1756 <DIO_enuSetPinValue+0x1d0>

			break;

		case DIO_PORTC :

			if( Copy_u8Val == DIO_LOW)
    16a8:	8c 81       	ldd	r24, Y+4	; 0x04
    16aa:	88 23       	and	r24, r24
    16ac:	a9 f4       	brne	.+42     	; 0x16d8 <DIO_enuSetPinValue+0x152>
			{
				PORTC &=~(DIO_MASK_BIT<<Copy_u8PinID);
    16ae:	a5 e3       	ldi	r26, 0x35	; 53
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	e5 e3       	ldi	r30, 0x35	; 53
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	48 2f       	mov	r20, r24
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	02 2e       	mov	r0, r18
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <DIO_enuSetPinValue+0x146>
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	0a 94       	dec	r0
    16ce:	e2 f7       	brpl	.-8      	; 0x16c8 <DIO_enuSetPinValue+0x142>
    16d0:	80 95       	com	r24
    16d2:	84 23       	and	r24, r20
    16d4:	8c 93       	st	X, r24
    16d6:	3f c0       	rjmp	.+126    	; 0x1756 <DIO_enuSetPinValue+0x1d0>
			}
			else
			{
				PORTC |=(DIO_MASK_BIT<<Copy_u8PinID);
    16d8:	a5 e3       	ldi	r26, 0x35	; 53
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e5 e3       	ldi	r30, 0x35	; 53
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	48 2f       	mov	r20, r24
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	28 2f       	mov	r18, r24
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	02 2e       	mov	r0, r18
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <DIO_enuSetPinValue+0x170>
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	0a 94       	dec	r0
    16f8:	e2 f7       	brpl	.-8      	; 0x16f2 <DIO_enuSetPinValue+0x16c>
    16fa:	84 2b       	or	r24, r20
    16fc:	8c 93       	st	X, r24
    16fe:	2b c0       	rjmp	.+86     	; 0x1756 <DIO_enuSetPinValue+0x1d0>
			}

			break;

		case DIO_PORTD :
			if( Copy_u8Val == DIO_LOW)
    1700:	8c 81       	ldd	r24, Y+4	; 0x04
    1702:	88 23       	and	r24, r24
    1704:	a9 f4       	brne	.+42     	; 0x1730 <DIO_enuSetPinValue+0x1aa>
			{
				PORTD &=~(DIO_MASK_BIT<<Copy_u8PinID);
    1706:	a2 e3       	ldi	r26, 0x32	; 50
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	e2 e3       	ldi	r30, 0x32	; 50
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	48 2f       	mov	r20, r24
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	28 2f       	mov	r18, r24
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	02 2e       	mov	r0, r18
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <DIO_enuSetPinValue+0x19e>
    1720:	88 0f       	add	r24, r24
    1722:	99 1f       	adc	r25, r25
    1724:	0a 94       	dec	r0
    1726:	e2 f7       	brpl	.-8      	; 0x1720 <DIO_enuSetPinValue+0x19a>
    1728:	80 95       	com	r24
    172a:	84 23       	and	r24, r20
    172c:	8c 93       	st	X, r24
    172e:	13 c0       	rjmp	.+38     	; 0x1756 <DIO_enuSetPinValue+0x1d0>
			}
			else
			{
				PORTD |=(DIO_MASK_BIT<<Copy_u8PinID);
    1730:	a2 e3       	ldi	r26, 0x32	; 50
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	e2 e3       	ldi	r30, 0x32	; 50
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	48 2f       	mov	r20, r24
    173c:	8b 81       	ldd	r24, Y+3	; 0x03
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	02 2e       	mov	r0, r18
    1748:	02 c0       	rjmp	.+4      	; 0x174e <DIO_enuSetPinValue+0x1c8>
    174a:	88 0f       	add	r24, r24
    174c:	99 1f       	adc	r25, r25
    174e:	0a 94       	dec	r0
    1750:	e2 f7       	brpl	.-8      	; 0x174a <DIO_enuSetPinValue+0x1c4>
    1752:	84 2b       	or	r24, r20
    1754:	8c 93       	st	X, r24
			}

			break;

		}
		Local_enuerrorState = ES_OK;
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	89 83       	std	Y+1, r24	; 0x01
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <DIO_enuSetPinValue+0x1da>
	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
    175c:	83 e0       	ldi	r24, 0x03	; 3
    175e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuerrorState  ;
    1760:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuSetPinValue().
    1762:	26 96       	adiw	r28, 0x06	; 6
    1764:	0f b6       	in	r0, 0x3f	; 63
    1766:	f8 94       	cli
    1768:	de bf       	out	0x3e, r29	; 62
    176a:	0f be       	out	0x3f, r0	; 63
    176c:	cd bf       	out	0x3d, r28	; 61
    176e:	cf 91       	pop	r28
    1770:	df 91       	pop	r29
    1772:	08 95       	ret

00001774 <DIO_enuToggelPin>:
/*                                        DIO_PIN2       ,   DIO_PIN6       */
/*                                        DIO_PIN3       ,   DIO_PIN7       */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuToggelPin(u8  Copy_u8PortID, u8 Copy_u8PinID  )
{
    1774:	df 93       	push	r29
    1776:	cf 93       	push	r28
    1778:	00 d0       	rcall	.+0      	; 0x177a <DIO_enuToggelPin+0x6>
    177a:	00 d0       	rcall	.+0      	; 0x177c <DIO_enuToggelPin+0x8>
    177c:	0f 92       	push	r0
    177e:	cd b7       	in	r28, 0x3d	; 61
    1780:	de b7       	in	r29, 0x3e	; 62
    1782:	8a 83       	std	Y+2, r24	; 0x02
    1784:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuerrorState = ES_NOK ;
    1786:	19 82       	std	Y+1, r1	; 0x01

	if( (Copy_u8PortID <= DIO_PORTD) &&  (Copy_u8PinID <= DIO_PIN7) )
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	84 30       	cpi	r24, 0x04	; 4
    178c:	08 f0       	brcs	.+2      	; 0x1790 <DIO_enuToggelPin+0x1c>
    178e:	75 c0       	rjmp	.+234    	; 0x187a <DIO_enuToggelPin+0x106>
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	88 30       	cpi	r24, 0x08	; 8
    1794:	08 f0       	brcs	.+2      	; 0x1798 <DIO_enuToggelPin+0x24>
    1796:	71 c0       	rjmp	.+226    	; 0x187a <DIO_enuToggelPin+0x106>
	{
		/**********************************************************
		 * Switching for the suitable case .
		 **********************************************************/
		switch( Copy_u8PortID )
    1798:	8a 81       	ldd	r24, Y+2	; 0x02
    179a:	28 2f       	mov	r18, r24
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	3d 83       	std	Y+5, r19	; 0x05
    17a0:	2c 83       	std	Y+4, r18	; 0x04
    17a2:	8c 81       	ldd	r24, Y+4	; 0x04
    17a4:	9d 81       	ldd	r25, Y+5	; 0x05
    17a6:	81 30       	cpi	r24, 0x01	; 1
    17a8:	91 05       	cpc	r25, r1
    17aa:	49 f1       	breq	.+82     	; 0x17fe <DIO_enuToggelPin+0x8a>
    17ac:	2c 81       	ldd	r18, Y+4	; 0x04
    17ae:	3d 81       	ldd	r19, Y+5	; 0x05
    17b0:	22 30       	cpi	r18, 0x02	; 2
    17b2:	31 05       	cpc	r19, r1
    17b4:	2c f4       	brge	.+10     	; 0x17c0 <DIO_enuToggelPin+0x4c>
    17b6:	8c 81       	ldd	r24, Y+4	; 0x04
    17b8:	9d 81       	ldd	r25, Y+5	; 0x05
    17ba:	00 97       	sbiw	r24, 0x00	; 0
    17bc:	61 f0       	breq	.+24     	; 0x17d6 <DIO_enuToggelPin+0x62>
    17be:	5a c0       	rjmp	.+180    	; 0x1874 <DIO_enuToggelPin+0x100>
    17c0:	2c 81       	ldd	r18, Y+4	; 0x04
    17c2:	3d 81       	ldd	r19, Y+5	; 0x05
    17c4:	22 30       	cpi	r18, 0x02	; 2
    17c6:	31 05       	cpc	r19, r1
    17c8:	71 f1       	breq	.+92     	; 0x1826 <DIO_enuToggelPin+0xb2>
    17ca:	8c 81       	ldd	r24, Y+4	; 0x04
    17cc:	9d 81       	ldd	r25, Y+5	; 0x05
    17ce:	83 30       	cpi	r24, 0x03	; 3
    17d0:	91 05       	cpc	r25, r1
    17d2:	e9 f1       	breq	.+122    	; 0x184e <DIO_enuToggelPin+0xda>
    17d4:	4f c0       	rjmp	.+158    	; 0x1874 <DIO_enuToggelPin+0x100>
		{
		case DIO_PORTA :
			PORTA ^=(DIO_MASK_BIT<<Copy_u8PinID);
    17d6:	ab e3       	ldi	r26, 0x3B	; 59
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	eb e3       	ldi	r30, 0x3B	; 59
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	48 2f       	mov	r20, r24
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	02 2e       	mov	r0, r18
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <DIO_enuToggelPin+0x80>
    17f0:	88 0f       	add	r24, r24
    17f2:	99 1f       	adc	r25, r25
    17f4:	0a 94       	dec	r0
    17f6:	e2 f7       	brpl	.-8      	; 0x17f0 <DIO_enuToggelPin+0x7c>
    17f8:	84 27       	eor	r24, r20
    17fa:	8c 93       	st	X, r24
    17fc:	3b c0       	rjmp	.+118    	; 0x1874 <DIO_enuToggelPin+0x100>
			break;

		case DIO_PORTB :
			PORTB ^=(DIO_MASK_BIT<<Copy_u8PinID);
    17fe:	a8 e3       	ldi	r26, 0x38	; 56
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	e8 e3       	ldi	r30, 0x38	; 56
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	48 2f       	mov	r20, r24
    180a:	8b 81       	ldd	r24, Y+3	; 0x03
    180c:	28 2f       	mov	r18, r24
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	02 2e       	mov	r0, r18
    1816:	02 c0       	rjmp	.+4      	; 0x181c <DIO_enuToggelPin+0xa8>
    1818:	88 0f       	add	r24, r24
    181a:	99 1f       	adc	r25, r25
    181c:	0a 94       	dec	r0
    181e:	e2 f7       	brpl	.-8      	; 0x1818 <DIO_enuToggelPin+0xa4>
    1820:	84 27       	eor	r24, r20
    1822:	8c 93       	st	X, r24
    1824:	27 c0       	rjmp	.+78     	; 0x1874 <DIO_enuToggelPin+0x100>
			break;

		case DIO_PORTC :
			PORTC ^=(DIO_MASK_BIT<<Copy_u8PinID);
    1826:	a5 e3       	ldi	r26, 0x35	; 53
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	e5 e3       	ldi	r30, 0x35	; 53
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	48 2f       	mov	r20, r24
    1832:	8b 81       	ldd	r24, Y+3	; 0x03
    1834:	28 2f       	mov	r18, r24
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	02 2e       	mov	r0, r18
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <DIO_enuToggelPin+0xd0>
    1840:	88 0f       	add	r24, r24
    1842:	99 1f       	adc	r25, r25
    1844:	0a 94       	dec	r0
    1846:	e2 f7       	brpl	.-8      	; 0x1840 <DIO_enuToggelPin+0xcc>
    1848:	84 27       	eor	r24, r20
    184a:	8c 93       	st	X, r24
    184c:	13 c0       	rjmp	.+38     	; 0x1874 <DIO_enuToggelPin+0x100>
			break;

		case DIO_PORTD :
			PORTD ^=(DIO_MASK_BIT<<Copy_u8PinID);
    184e:	a2 e3       	ldi	r26, 0x32	; 50
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	e2 e3       	ldi	r30, 0x32	; 50
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	48 2f       	mov	r20, r24
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	28 2f       	mov	r18, r24
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	02 2e       	mov	r0, r18
    1866:	02 c0       	rjmp	.+4      	; 0x186c <DIO_enuToggelPin+0xf8>
    1868:	88 0f       	add	r24, r24
    186a:	99 1f       	adc	r25, r25
    186c:	0a 94       	dec	r0
    186e:	e2 f7       	brpl	.-8      	; 0x1868 <DIO_enuToggelPin+0xf4>
    1870:	84 27       	eor	r24, r20
    1872:	8c 93       	st	X, r24
			break;
		}

		Local_enuerrorState = ES_OK;
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	89 83       	std	Y+1, r24	; 0x01
    1878:	02 c0       	rjmp	.+4      	; 0x187e <DIO_enuToggelPin+0x10a>

	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
    187a:	83 e0       	ldi	r24, 0x03	; 3
    187c:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuerrorState  ;
    187e:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuToggelPin().
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	0f 90       	pop	r0
    1888:	0f 90       	pop	r0
    188a:	cf 91       	pop	r28
    188c:	df 91       	pop	r29
    188e:	08 95       	ret

00001890 <DIO_enuGetPinVlaue>:
/*                 : Arg.3: Address of u8 variable.                              */
/*                                                                               */
/* Return          : ERROR_STATE eum.                                            */
/*********************************************************************************/
ES_t DIO_enuGetPinVlaue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8* Copy_pu8PinVal)
{
    1890:	df 93       	push	r29
    1892:	cf 93       	push	r28
    1894:	cd b7       	in	r28, 0x3d	; 61
    1896:	de b7       	in	r29, 0x3e	; 62
    1898:	27 97       	sbiw	r28, 0x07	; 7
    189a:	0f b6       	in	r0, 0x3f	; 63
    189c:	f8 94       	cli
    189e:	de bf       	out	0x3e, r29	; 62
    18a0:	0f be       	out	0x3f, r0	; 63
    18a2:	cd bf       	out	0x3d, r28	; 61
    18a4:	8a 83       	std	Y+2, r24	; 0x02
    18a6:	6b 83       	std	Y+3, r22	; 0x03
    18a8:	5d 83       	std	Y+5, r21	; 0x05
    18aa:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuerrorState = ES_NOK ;
    18ac:	19 82       	std	Y+1, r1	; 0x01

	// Check to ensure that the passed address is not equal Null.
	if( Copy_pu8PinVal != NULL )
    18ae:	8c 81       	ldd	r24, Y+4	; 0x04
    18b0:	9d 81       	ldd	r25, Y+5	; 0x05
    18b2:	00 97       	sbiw	r24, 0x00	; 0
    18b4:	09 f4       	brne	.+2      	; 0x18b8 <DIO_enuGetPinVlaue+0x28>
    18b6:	7e c0       	rjmp	.+252    	; 0x19b4 <DIO_enuGetPinVlaue+0x124>
	{
		if( (Copy_u8PortID <= DIO_PORTD) &&  (Copy_u8PinID <= DIO_PIN7) )
    18b8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ba:	84 30       	cpi	r24, 0x04	; 4
    18bc:	08 f0       	brcs	.+2      	; 0x18c0 <DIO_enuGetPinVlaue+0x30>
    18be:	77 c0       	rjmp	.+238    	; 0x19ae <DIO_enuGetPinVlaue+0x11e>
    18c0:	8b 81       	ldd	r24, Y+3	; 0x03
    18c2:	88 30       	cpi	r24, 0x08	; 8
    18c4:	08 f0       	brcs	.+2      	; 0x18c8 <DIO_enuGetPinVlaue+0x38>
    18c6:	73 c0       	rjmp	.+230    	; 0x19ae <DIO_enuGetPinVlaue+0x11e>
		{
			/**********************************************************
			 * Switching for the suitable case .
			 **********************************************************/
			switch( Copy_u8PortID )
    18c8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ca:	28 2f       	mov	r18, r24
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	3f 83       	std	Y+7, r19	; 0x07
    18d0:	2e 83       	std	Y+6, r18	; 0x06
    18d2:	4e 81       	ldd	r20, Y+6	; 0x06
    18d4:	5f 81       	ldd	r21, Y+7	; 0x07
    18d6:	41 30       	cpi	r20, 0x01	; 1
    18d8:	51 05       	cpc	r21, r1
    18da:	59 f1       	breq	.+86     	; 0x1932 <DIO_enuGetPinVlaue+0xa2>
    18dc:	8e 81       	ldd	r24, Y+6	; 0x06
    18de:	9f 81       	ldd	r25, Y+7	; 0x07
    18e0:	82 30       	cpi	r24, 0x02	; 2
    18e2:	91 05       	cpc	r25, r1
    18e4:	34 f4       	brge	.+12     	; 0x18f2 <DIO_enuGetPinVlaue+0x62>
    18e6:	2e 81       	ldd	r18, Y+6	; 0x06
    18e8:	3f 81       	ldd	r19, Y+7	; 0x07
    18ea:	21 15       	cp	r18, r1
    18ec:	31 05       	cpc	r19, r1
    18ee:	69 f0       	breq	.+26     	; 0x190a <DIO_enuGetPinVlaue+0x7a>
    18f0:	5b c0       	rjmp	.+182    	; 0x19a8 <DIO_enuGetPinVlaue+0x118>
    18f2:	4e 81       	ldd	r20, Y+6	; 0x06
    18f4:	5f 81       	ldd	r21, Y+7	; 0x07
    18f6:	42 30       	cpi	r20, 0x02	; 2
    18f8:	51 05       	cpc	r21, r1
    18fa:	79 f1       	breq	.+94     	; 0x195a <DIO_enuGetPinVlaue+0xca>
    18fc:	8e 81       	ldd	r24, Y+6	; 0x06
    18fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1900:	83 30       	cpi	r24, 0x03	; 3
    1902:	91 05       	cpc	r25, r1
    1904:	09 f4       	brne	.+2      	; 0x1908 <DIO_enuGetPinVlaue+0x78>
    1906:	3d c0       	rjmp	.+122    	; 0x1982 <DIO_enuGetPinVlaue+0xf2>
    1908:	4f c0       	rjmp	.+158    	; 0x19a8 <DIO_enuGetPinVlaue+0x118>
			{
			case DIO_PORTA :
				*Copy_pu8PinVal = (PINA>>Copy_u8PinID)&DIO_MASK_BIT;
    190a:	e9 e3       	ldi	r30, 0x39	; 57
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	28 2f       	mov	r18, r24
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	8b 81       	ldd	r24, Y+3	; 0x03
    1916:	88 2f       	mov	r24, r24
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	a9 01       	movw	r20, r18
    191c:	02 c0       	rjmp	.+4      	; 0x1922 <DIO_enuGetPinVlaue+0x92>
    191e:	55 95       	asr	r21
    1920:	47 95       	ror	r20
    1922:	8a 95       	dec	r24
    1924:	e2 f7       	brpl	.-8      	; 0x191e <DIO_enuGetPinVlaue+0x8e>
    1926:	ca 01       	movw	r24, r20
    1928:	81 70       	andi	r24, 0x01	; 1
    192a:	ec 81       	ldd	r30, Y+4	; 0x04
    192c:	fd 81       	ldd	r31, Y+5	; 0x05
    192e:	80 83       	st	Z, r24
    1930:	3b c0       	rjmp	.+118    	; 0x19a8 <DIO_enuGetPinVlaue+0x118>
				break;

			case DIO_PORTB :
				*Copy_pu8PinVal = (PINB>>Copy_u8PinID)&DIO_MASK_BIT;
    1932:	e6 e3       	ldi	r30, 0x36	; 54
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	28 2f       	mov	r18, r24
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	8b 81       	ldd	r24, Y+3	; 0x03
    193e:	88 2f       	mov	r24, r24
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	a9 01       	movw	r20, r18
    1944:	02 c0       	rjmp	.+4      	; 0x194a <DIO_enuGetPinVlaue+0xba>
    1946:	55 95       	asr	r21
    1948:	47 95       	ror	r20
    194a:	8a 95       	dec	r24
    194c:	e2 f7       	brpl	.-8      	; 0x1946 <DIO_enuGetPinVlaue+0xb6>
    194e:	ca 01       	movw	r24, r20
    1950:	81 70       	andi	r24, 0x01	; 1
    1952:	ec 81       	ldd	r30, Y+4	; 0x04
    1954:	fd 81       	ldd	r31, Y+5	; 0x05
    1956:	80 83       	st	Z, r24
    1958:	27 c0       	rjmp	.+78     	; 0x19a8 <DIO_enuGetPinVlaue+0x118>
				break;

			case DIO_PORTC :
				*Copy_pu8PinVal = (PINC>>Copy_u8PinID)&DIO_MASK_BIT;
    195a:	e3 e3       	ldi	r30, 0x33	; 51
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	80 81       	ld	r24, Z
    1960:	28 2f       	mov	r18, r24
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	88 2f       	mov	r24, r24
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	a9 01       	movw	r20, r18
    196c:	02 c0       	rjmp	.+4      	; 0x1972 <DIO_enuGetPinVlaue+0xe2>
    196e:	55 95       	asr	r21
    1970:	47 95       	ror	r20
    1972:	8a 95       	dec	r24
    1974:	e2 f7       	brpl	.-8      	; 0x196e <DIO_enuGetPinVlaue+0xde>
    1976:	ca 01       	movw	r24, r20
    1978:	81 70       	andi	r24, 0x01	; 1
    197a:	ec 81       	ldd	r30, Y+4	; 0x04
    197c:	fd 81       	ldd	r31, Y+5	; 0x05
    197e:	80 83       	st	Z, r24
    1980:	13 c0       	rjmp	.+38     	; 0x19a8 <DIO_enuGetPinVlaue+0x118>
				break;

			case DIO_PORTD :
				*Copy_pu8PinVal = (PIND>>Copy_u8PinID)&DIO_MASK_BIT;
    1982:	e0 e3       	ldi	r30, 0x30	; 48
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	28 2f       	mov	r18, r24
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	88 2f       	mov	r24, r24
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	a9 01       	movw	r20, r18
    1994:	02 c0       	rjmp	.+4      	; 0x199a <DIO_enuGetPinVlaue+0x10a>
    1996:	55 95       	asr	r21
    1998:	47 95       	ror	r20
    199a:	8a 95       	dec	r24
    199c:	e2 f7       	brpl	.-8      	; 0x1996 <DIO_enuGetPinVlaue+0x106>
    199e:	ca 01       	movw	r24, r20
    19a0:	81 70       	andi	r24, 0x01	; 1
    19a2:	ec 81       	ldd	r30, Y+4	; 0x04
    19a4:	fd 81       	ldd	r31, Y+5	; 0x05
    19a6:	80 83       	st	Z, r24
				break;
			}

			Local_enuerrorState = ES_OK;
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	89 83       	std	Y+1, r24	; 0x01
    19ac:	05 c0       	rjmp	.+10     	; 0x19b8 <DIO_enuGetPinVlaue+0x128>

		}
		else
		{
			Local_enuerrorState = ES_OUT_OF_RANGE;
    19ae:	83 e0       	ldi	r24, 0x03	; 3
    19b0:	89 83       	std	Y+1, r24	; 0x01
    19b2:	02 c0       	rjmp	.+4      	; 0x19b8 <DIO_enuGetPinVlaue+0x128>
	else
	{
		/**********************************************************
		 * Handle null pointer case.
		 **********************************************************/
		Local_enuerrorState = ES_NULL_POINTER;
    19b4:	82 e0       	ldi	r24, 0x02	; 2
    19b6:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_enuerrorState  ;
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuGetPinVlaue().
    19ba:	27 96       	adiw	r28, 0x07	; 7
    19bc:	0f b6       	in	r0, 0x3f	; 63
    19be:	f8 94       	cli
    19c0:	de bf       	out	0x3e, r29	; 62
    19c2:	0f be       	out	0x3f, r0	; 63
    19c4:	cd bf       	out	0x3d, r28	; 61
    19c6:	cf 91       	pop	r28
    19c8:	df 91       	pop	r29
    19ca:	08 95       	ret

000019cc <EF_S8_DIO_InitPort>:
*               or return 1 if OK.  
* Note        : To configure PIN as output you should set the bit mask "1" 
*               and to set PIN input you should set bit mask "0"
***********************************************************************/
s8  EF_S8_DIO_InitPort (u8 PortName, u8 Value)
{
    19cc:	df 93       	push	r29
    19ce:	cf 93       	push	r28
    19d0:	00 d0       	rcall	.+0      	; 0x19d2 <EF_S8_DIO_InitPort+0x6>
    19d2:	00 d0       	rcall	.+0      	; 0x19d4 <EF_S8_DIO_InitPort+0x8>
    19d4:	0f 92       	push	r0
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62
    19da:	8a 83       	std	Y+2, r24	; 0x02
    19dc:	6b 83       	std	Y+3, r22	; 0x03
    s8 Status;
    
    Status = 1;
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	89 83       	std	Y+1, r24	; 0x01
	switch(PortName)
    19e2:	8a 81       	ldd	r24, Y+2	; 0x02
    19e4:	28 2f       	mov	r18, r24
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	3d 83       	std	Y+5, r19	; 0x05
    19ea:	2c 83       	std	Y+4, r18	; 0x04
    19ec:	8c 81       	ldd	r24, Y+4	; 0x04
    19ee:	9d 81       	ldd	r25, Y+5	; 0x05
    19f0:	84 34       	cpi	r24, 0x44	; 68
    19f2:	91 05       	cpc	r25, r1
    19f4:	09 f4       	brne	.+2      	; 0x19f8 <EF_S8_DIO_InitPort+0x2c>
    19f6:	3f c0       	rjmp	.+126    	; 0x1a76 <EF_S8_DIO_InitPort+0xaa>
    19f8:	2c 81       	ldd	r18, Y+4	; 0x04
    19fa:	3d 81       	ldd	r19, Y+5	; 0x05
    19fc:	25 34       	cpi	r18, 0x45	; 69
    19fe:	31 05       	cpc	r19, r1
    1a00:	84 f4       	brge	.+32     	; 0x1a22 <EF_S8_DIO_InitPort+0x56>
    1a02:	8c 81       	ldd	r24, Y+4	; 0x04
    1a04:	9d 81       	ldd	r25, Y+5	; 0x05
    1a06:	82 34       	cpi	r24, 0x42	; 66
    1a08:	91 05       	cpc	r25, r1
    1a0a:	59 f1       	breq	.+86     	; 0x1a62 <EF_S8_DIO_InitPort+0x96>
    1a0c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a0e:	3d 81       	ldd	r19, Y+5	; 0x05
    1a10:	23 34       	cpi	r18, 0x43	; 67
    1a12:	31 05       	cpc	r19, r1
    1a14:	5c f5       	brge	.+86     	; 0x1a6c <EF_S8_DIO_InitPort+0xa0>
    1a16:	8c 81       	ldd	r24, Y+4	; 0x04
    1a18:	9d 81       	ldd	r25, Y+5	; 0x05
    1a1a:	81 34       	cpi	r24, 0x41	; 65
    1a1c:	91 05       	cpc	r25, r1
    1a1e:	e1 f0       	breq	.+56     	; 0x1a58 <EF_S8_DIO_InitPort+0x8c>
    1a20:	2f c0       	rjmp	.+94     	; 0x1a80 <EF_S8_DIO_InitPort+0xb4>
    1a22:	2c 81       	ldd	r18, Y+4	; 0x04
    1a24:	3d 81       	ldd	r19, Y+5	; 0x05
    1a26:	22 36       	cpi	r18, 0x62	; 98
    1a28:	31 05       	cpc	r19, r1
    1a2a:	d9 f0       	breq	.+54     	; 0x1a62 <EF_S8_DIO_InitPort+0x96>
    1a2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a30:	83 36       	cpi	r24, 0x63	; 99
    1a32:	91 05       	cpc	r25, r1
    1a34:	34 f4       	brge	.+12     	; 0x1a42 <EF_S8_DIO_InitPort+0x76>
    1a36:	2c 81       	ldd	r18, Y+4	; 0x04
    1a38:	3d 81       	ldd	r19, Y+5	; 0x05
    1a3a:	21 36       	cpi	r18, 0x61	; 97
    1a3c:	31 05       	cpc	r19, r1
    1a3e:	61 f0       	breq	.+24     	; 0x1a58 <EF_S8_DIO_InitPort+0x8c>
    1a40:	1f c0       	rjmp	.+62     	; 0x1a80 <EF_S8_DIO_InitPort+0xb4>
    1a42:	8c 81       	ldd	r24, Y+4	; 0x04
    1a44:	9d 81       	ldd	r25, Y+5	; 0x05
    1a46:	83 36       	cpi	r24, 0x63	; 99
    1a48:	91 05       	cpc	r25, r1
    1a4a:	81 f0       	breq	.+32     	; 0x1a6c <EF_S8_DIO_InitPort+0xa0>
    1a4c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a4e:	3d 81       	ldd	r19, Y+5	; 0x05
    1a50:	24 36       	cpi	r18, 0x64	; 100
    1a52:	31 05       	cpc	r19, r1
    1a54:	81 f0       	breq	.+32     	; 0x1a76 <EF_S8_DIO_InitPort+0xaa>
    1a56:	14 c0       	rjmp	.+40     	; 0x1a80 <EF_S8_DIO_InitPort+0xb4>
	{
	     case 'a':
		 case 'A':
             DDRA = Value;
    1a58:	ea e3       	ldi	r30, 0x3A	; 58
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	80 83       	st	Z, r24
    1a60:	11 c0       	rjmp	.+34     	; 0x1a84 <EF_S8_DIO_InitPort+0xb8>
		 break;
		 case 'b':
		 case 'B':
             DDRB = Value;
    1a62:	e7 e3       	ldi	r30, 0x37	; 55
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	8b 81       	ldd	r24, Y+3	; 0x03
    1a68:	80 83       	st	Z, r24
    1a6a:	0c c0       	rjmp	.+24     	; 0x1a84 <EF_S8_DIO_InitPort+0xb8>
		 break;
		 case 'c':
		 case 'C':
             DDRC = Value;
    1a6c:	e4 e3       	ldi	r30, 0x34	; 52
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	8b 81       	ldd	r24, Y+3	; 0x03
    1a72:	80 83       	st	Z, r24
    1a74:	07 c0       	rjmp	.+14     	; 0x1a84 <EF_S8_DIO_InitPort+0xb8>
		 break;
		 case 'd':
		 case 'D':
             DDRD = Value;
    1a76:	e1 e3       	ldi	r30, 0x31	; 49
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7c:	80 83       	st	Z, r24
    1a7e:	02 c0       	rjmp	.+4      	; 0x1a84 <EF_S8_DIO_InitPort+0xb8>
		 break;
		 default:
             Status = -1;
    1a80:	8f ef       	ldi	r24, 0xFF	; 255
    1a82:	89 83       	std	Y+1, r24	; 0x01

    }

    return(Status);
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	cf 91       	pop	r28
    1a92:	df 91       	pop	r29
    1a94:	08 95       	ret

00001a96 <EF_S8_DIO_WritePort>:
*
* Return Value: The function will return -1 if user enter wrong inputs.
*               or return 1 if OK.  
***********************************************************************/
s8  EF_S8_DIO_WritePort(u8 PortName, u8 Value)
{
    1a96:	df 93       	push	r29
    1a98:	cf 93       	push	r28
    1a9a:	00 d0       	rcall	.+0      	; 0x1a9c <EF_S8_DIO_WritePort+0x6>
    1a9c:	00 d0       	rcall	.+0      	; 0x1a9e <EF_S8_DIO_WritePort+0x8>
    1a9e:	0f 92       	push	r0
    1aa0:	cd b7       	in	r28, 0x3d	; 61
    1aa2:	de b7       	in	r29, 0x3e	; 62
    1aa4:	8a 83       	std	Y+2, r24	; 0x02
    1aa6:	6b 83       	std	Y+3, r22	; 0x03
    s8 Status;
    
    Status = 1;
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	89 83       	std	Y+1, r24	; 0x01
	switch(PortName)
    1aac:	8a 81       	ldd	r24, Y+2	; 0x02
    1aae:	28 2f       	mov	r18, r24
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	3d 83       	std	Y+5, r19	; 0x05
    1ab4:	2c 83       	std	Y+4, r18	; 0x04
    1ab6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab8:	9d 81       	ldd	r25, Y+5	; 0x05
    1aba:	84 34       	cpi	r24, 0x44	; 68
    1abc:	91 05       	cpc	r25, r1
    1abe:	09 f4       	brne	.+2      	; 0x1ac2 <EF_S8_DIO_WritePort+0x2c>
    1ac0:	3f c0       	rjmp	.+126    	; 0x1b40 <EF_S8_DIO_WritePort+0xaa>
    1ac2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ac4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ac6:	25 34       	cpi	r18, 0x45	; 69
    1ac8:	31 05       	cpc	r19, r1
    1aca:	84 f4       	brge	.+32     	; 0x1aec <EF_S8_DIO_WritePort+0x56>
    1acc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ace:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad0:	82 34       	cpi	r24, 0x42	; 66
    1ad2:	91 05       	cpc	r25, r1
    1ad4:	59 f1       	breq	.+86     	; 0x1b2c <EF_S8_DIO_WritePort+0x96>
    1ad6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ad8:	3d 81       	ldd	r19, Y+5	; 0x05
    1ada:	23 34       	cpi	r18, 0x43	; 67
    1adc:	31 05       	cpc	r19, r1
    1ade:	5c f5       	brge	.+86     	; 0x1b36 <EF_S8_DIO_WritePort+0xa0>
    1ae0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae4:	81 34       	cpi	r24, 0x41	; 65
    1ae6:	91 05       	cpc	r25, r1
    1ae8:	e1 f0       	breq	.+56     	; 0x1b22 <EF_S8_DIO_WritePort+0x8c>
    1aea:	2f c0       	rjmp	.+94     	; 0x1b4a <EF_S8_DIO_WritePort+0xb4>
    1aec:	2c 81       	ldd	r18, Y+4	; 0x04
    1aee:	3d 81       	ldd	r19, Y+5	; 0x05
    1af0:	22 36       	cpi	r18, 0x62	; 98
    1af2:	31 05       	cpc	r19, r1
    1af4:	d9 f0       	breq	.+54     	; 0x1b2c <EF_S8_DIO_WritePort+0x96>
    1af6:	8c 81       	ldd	r24, Y+4	; 0x04
    1af8:	9d 81       	ldd	r25, Y+5	; 0x05
    1afa:	83 36       	cpi	r24, 0x63	; 99
    1afc:	91 05       	cpc	r25, r1
    1afe:	34 f4       	brge	.+12     	; 0x1b0c <EF_S8_DIO_WritePort+0x76>
    1b00:	2c 81       	ldd	r18, Y+4	; 0x04
    1b02:	3d 81       	ldd	r19, Y+5	; 0x05
    1b04:	21 36       	cpi	r18, 0x61	; 97
    1b06:	31 05       	cpc	r19, r1
    1b08:	61 f0       	breq	.+24     	; 0x1b22 <EF_S8_DIO_WritePort+0x8c>
    1b0a:	1f c0       	rjmp	.+62     	; 0x1b4a <EF_S8_DIO_WritePort+0xb4>
    1b0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b0e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b10:	83 36       	cpi	r24, 0x63	; 99
    1b12:	91 05       	cpc	r25, r1
    1b14:	81 f0       	breq	.+32     	; 0x1b36 <EF_S8_DIO_WritePort+0xa0>
    1b16:	2c 81       	ldd	r18, Y+4	; 0x04
    1b18:	3d 81       	ldd	r19, Y+5	; 0x05
    1b1a:	24 36       	cpi	r18, 0x64	; 100
    1b1c:	31 05       	cpc	r19, r1
    1b1e:	81 f0       	breq	.+32     	; 0x1b40 <EF_S8_DIO_WritePort+0xaa>
    1b20:	14 c0       	rjmp	.+40     	; 0x1b4a <EF_S8_DIO_WritePort+0xb4>
	{
	     case 'a':
		 case 'A':
             PORTA = Value;
    1b22:	eb e3       	ldi	r30, 0x3B	; 59
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	80 83       	st	Z, r24
    1b2a:	11 c0       	rjmp	.+34     	; 0x1b4e <EF_S8_DIO_WritePort+0xb8>
		 break;
		 case 'b':
		 case 'B':
             PORTB = Value;
    1b2c:	e8 e3       	ldi	r30, 0x38	; 56
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	80 83       	st	Z, r24
    1b34:	0c c0       	rjmp	.+24     	; 0x1b4e <EF_S8_DIO_WritePort+0xb8>
		 break;
		 case 'c':
		 case 'C':
             PORTC = Value;
    1b36:	e5 e3       	ldi	r30, 0x35	; 53
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3c:	80 83       	st	Z, r24
    1b3e:	07 c0       	rjmp	.+14     	; 0x1b4e <EF_S8_DIO_WritePort+0xb8>
		 break;
		 case 'd':
		 case 'D':
             PORTD = Value;
    1b40:	e2 e3       	ldi	r30, 0x32	; 50
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	8b 81       	ldd	r24, Y+3	; 0x03
    1b46:	80 83       	st	Z, r24
    1b48:	02 c0       	rjmp	.+4      	; 0x1b4e <EF_S8_DIO_WritePort+0xb8>
		 break;
		 default:
             Status = -1;
    1b4a:	8f ef       	ldi	r24, 0xFF	; 255
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    }

    return(Status);
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	0f 90       	pop	r0
    1b5a:	cf 91       	pop	r28
    1b5c:	df 91       	pop	r29
    1b5e:	08 95       	ret

00001b60 <EF_S16_DIO_ReadPort>:
*
* Return Value: The function will return -1 if user enter wrong inputs.
*               or the value.
***********************************************************************/
s32 EF_S16_DIO_ReadPort (u8 PortName)
{
    1b60:	df 93       	push	r29
    1b62:	cf 93       	push	r28
    1b64:	00 d0       	rcall	.+0      	; 0x1b66 <EF_S16_DIO_ReadPort+0x6>
    1b66:	00 d0       	rcall	.+0      	; 0x1b68 <EF_S16_DIO_ReadPort+0x8>
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
    1b6c:	8a 83       	std	Y+2, r24	; 0x02
    volatile s8  Status;

    switch(PortName)
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	28 2f       	mov	r18, r24
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	3c 83       	std	Y+4, r19	; 0x04
    1b76:	2b 83       	std	Y+3, r18	; 0x03
    1b78:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7c:	84 34       	cpi	r24, 0x44	; 68
    1b7e:	91 05       	cpc	r25, r1
    1b80:	09 f4       	brne	.+2      	; 0x1b84 <EF_S16_DIO_ReadPort+0x24>
    1b82:	3f c0       	rjmp	.+126    	; 0x1c02 <EF_S16_DIO_ReadPort+0xa2>
    1b84:	2b 81       	ldd	r18, Y+3	; 0x03
    1b86:	3c 81       	ldd	r19, Y+4	; 0x04
    1b88:	25 34       	cpi	r18, 0x45	; 69
    1b8a:	31 05       	cpc	r19, r1
    1b8c:	84 f4       	brge	.+32     	; 0x1bae <EF_S16_DIO_ReadPort+0x4e>
    1b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b90:	9c 81       	ldd	r25, Y+4	; 0x04
    1b92:	82 34       	cpi	r24, 0x42	; 66
    1b94:	91 05       	cpc	r25, r1
    1b96:	59 f1       	breq	.+86     	; 0x1bee <EF_S16_DIO_ReadPort+0x8e>
    1b98:	2b 81       	ldd	r18, Y+3	; 0x03
    1b9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b9c:	23 34       	cpi	r18, 0x43	; 67
    1b9e:	31 05       	cpc	r19, r1
    1ba0:	5c f5       	brge	.+86     	; 0x1bf8 <EF_S16_DIO_ReadPort+0x98>
    1ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba6:	81 34       	cpi	r24, 0x41	; 65
    1ba8:	91 05       	cpc	r25, r1
    1baa:	e1 f0       	breq	.+56     	; 0x1be4 <EF_S16_DIO_ReadPort+0x84>
    1bac:	2f c0       	rjmp	.+94     	; 0x1c0c <EF_S16_DIO_ReadPort+0xac>
    1bae:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb0:	3c 81       	ldd	r19, Y+4	; 0x04
    1bb2:	22 36       	cpi	r18, 0x62	; 98
    1bb4:	31 05       	cpc	r19, r1
    1bb6:	d9 f0       	breq	.+54     	; 0x1bee <EF_S16_DIO_ReadPort+0x8e>
    1bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bba:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbc:	83 36       	cpi	r24, 0x63	; 99
    1bbe:	91 05       	cpc	r25, r1
    1bc0:	34 f4       	brge	.+12     	; 0x1bce <EF_S16_DIO_ReadPort+0x6e>
    1bc2:	2b 81       	ldd	r18, Y+3	; 0x03
    1bc4:	3c 81       	ldd	r19, Y+4	; 0x04
    1bc6:	21 36       	cpi	r18, 0x61	; 97
    1bc8:	31 05       	cpc	r19, r1
    1bca:	61 f0       	breq	.+24     	; 0x1be4 <EF_S16_DIO_ReadPort+0x84>
    1bcc:	1f c0       	rjmp	.+62     	; 0x1c0c <EF_S16_DIO_ReadPort+0xac>
    1bce:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd2:	83 36       	cpi	r24, 0x63	; 99
    1bd4:	91 05       	cpc	r25, r1
    1bd6:	81 f0       	breq	.+32     	; 0x1bf8 <EF_S16_DIO_ReadPort+0x98>
    1bd8:	2b 81       	ldd	r18, Y+3	; 0x03
    1bda:	3c 81       	ldd	r19, Y+4	; 0x04
    1bdc:	24 36       	cpi	r18, 0x64	; 100
    1bde:	31 05       	cpc	r19, r1
    1be0:	81 f0       	breq	.+32     	; 0x1c02 <EF_S16_DIO_ReadPort+0xa2>
    1be2:	14 c0       	rjmp	.+40     	; 0x1c0c <EF_S16_DIO_ReadPort+0xac>
	{
	     case 'a':
		 case 'A':
             Status = PINA;
    1be4:	e9 e3       	ldi	r30, 0x39	; 57
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	89 83       	std	Y+1, r24	; 0x01
    1bec:	11 c0       	rjmp	.+34     	; 0x1c10 <EF_S16_DIO_ReadPort+0xb0>
		 break;
		 case 'b':
		 case 'B':
             Status = PINB;
    1bee:	e6 e3       	ldi	r30, 0x36	; 54
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	89 83       	std	Y+1, r24	; 0x01
    1bf6:	0c c0       	rjmp	.+24     	; 0x1c10 <EF_S16_DIO_ReadPort+0xb0>
		 break;
		 case 'c':
		 case 'C':
             Status = PINC;
    1bf8:	e3 e3       	ldi	r30, 0x33	; 51
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	89 83       	std	Y+1, r24	; 0x01
    1c00:	07 c0       	rjmp	.+14     	; 0x1c10 <EF_S16_DIO_ReadPort+0xb0>
		 break;
		 case 'd':
		 case 'D':
             Status = PIND;
    1c02:	e0 e3       	ldi	r30, 0x30	; 48
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	89 83       	std	Y+1, r24	; 0x01
    1c0a:	02 c0       	rjmp	.+4      	; 0x1c10 <EF_S16_DIO_ReadPort+0xb0>
		 break;
		 default:
             Status = -1;
    1c0c:	8f ef       	ldi	r24, 0xFF	; 255
    1c0e:	89 83       	std	Y+1, r24	; 0x01
    }
    return(Status);
    1c10:	89 81       	ldd	r24, Y+1	; 0x01
    1c12:	99 27       	eor	r25, r25
    1c14:	87 fd       	sbrc	r24, 7
    1c16:	90 95       	com	r25
}
    1c18:	0f 90       	pop	r0
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	cf 91       	pop	r28
    1c22:	df 91       	pop	r29
    1c24:	08 95       	ret

00001c26 <EF_B_DIO_InitPin>:
* Return Value: The function will return -1 if user enter wrong inputs.
*               or return 1 if OK.
* Note        : Nothing
***********************************************************************/
u8  EF_B_DIO_InitPin (u8 PortName, u8 PinNumber,u8 Direction)
{
    1c26:	df 93       	push	r29
    1c28:	cf 93       	push	r28
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
    1c2e:	2e 97       	sbiw	r28, 0x0e	; 14
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	f8 94       	cli
    1c34:	de bf       	out	0x3e, r29	; 62
    1c36:	0f be       	out	0x3f, r0	; 63
    1c38:	cd bf       	out	0x3d, r28	; 61
    1c3a:	8a 83       	std	Y+2, r24	; 0x02
    1c3c:	6b 83       	std	Y+3, r22	; 0x03
    1c3e:	4c 83       	std	Y+4, r20	; 0x04
    u8 bStatus;


    bStatus = 1;
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	89 83       	std	Y+1, r24	; 0x01
	switch(PortName)
    1c44:	8a 81       	ldd	r24, Y+2	; 0x02
    1c46:	28 2f       	mov	r18, r24
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	3e 87       	std	Y+14, r19	; 0x0e
    1c4c:	2d 87       	std	Y+13, r18	; 0x0d
    1c4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c52:	84 34       	cpi	r24, 0x44	; 68
    1c54:	91 05       	cpc	r25, r1
    1c56:	09 f4       	brne	.+2      	; 0x1c5a <EF_B_DIO_InitPin+0x34>
    1c58:	dd c0       	rjmp	.+442    	; 0x1e14 <EF_B_DIO_InitPin+0x1ee>
    1c5a:	2d 85       	ldd	r18, Y+13	; 0x0d
    1c5c:	3e 85       	ldd	r19, Y+14	; 0x0e
    1c5e:	25 34       	cpi	r18, 0x45	; 69
    1c60:	31 05       	cpc	r19, r1
    1c62:	94 f4       	brge	.+36     	; 0x1c88 <EF_B_DIO_InitPin+0x62>
    1c64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c68:	82 34       	cpi	r24, 0x42	; 66
    1c6a:	91 05       	cpc	r25, r1
    1c6c:	09 f4       	brne	.+2      	; 0x1c70 <EF_B_DIO_InitPin+0x4a>
    1c6e:	62 c0       	rjmp	.+196    	; 0x1d34 <EF_B_DIO_InitPin+0x10e>
    1c70:	2d 85       	ldd	r18, Y+13	; 0x0d
    1c72:	3e 85       	ldd	r19, Y+14	; 0x0e
    1c74:	23 34       	cpi	r18, 0x43	; 67
    1c76:	31 05       	cpc	r19, r1
    1c78:	0c f0       	brlt	.+2      	; 0x1c7c <EF_B_DIO_InitPin+0x56>
    1c7a:	94 c0       	rjmp	.+296    	; 0x1da4 <EF_B_DIO_InitPin+0x17e>
    1c7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c80:	81 34       	cpi	r24, 0x41	; 65
    1c82:	91 05       	cpc	r25, r1
    1c84:	f9 f0       	breq	.+62     	; 0x1cc4 <EF_B_DIO_InitPin+0x9e>
    1c86:	fe c0       	rjmp	.+508    	; 0x1e84 <EF_B_DIO_InitPin+0x25e>
    1c88:	2d 85       	ldd	r18, Y+13	; 0x0d
    1c8a:	3e 85       	ldd	r19, Y+14	; 0x0e
    1c8c:	22 36       	cpi	r18, 0x62	; 98
    1c8e:	31 05       	cpc	r19, r1
    1c90:	09 f4       	brne	.+2      	; 0x1c94 <EF_B_DIO_InitPin+0x6e>
    1c92:	50 c0       	rjmp	.+160    	; 0x1d34 <EF_B_DIO_InitPin+0x10e>
    1c94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c98:	83 36       	cpi	r24, 0x63	; 99
    1c9a:	91 05       	cpc	r25, r1
    1c9c:	34 f4       	brge	.+12     	; 0x1caa <EF_B_DIO_InitPin+0x84>
    1c9e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1ca0:	3e 85       	ldd	r19, Y+14	; 0x0e
    1ca2:	21 36       	cpi	r18, 0x61	; 97
    1ca4:	31 05       	cpc	r19, r1
    1ca6:	71 f0       	breq	.+28     	; 0x1cc4 <EF_B_DIO_InitPin+0x9e>
    1ca8:	ed c0       	rjmp	.+474    	; 0x1e84 <EF_B_DIO_InitPin+0x25e>
    1caa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cae:	83 36       	cpi	r24, 0x63	; 99
    1cb0:	91 05       	cpc	r25, r1
    1cb2:	09 f4       	brne	.+2      	; 0x1cb6 <EF_B_DIO_InitPin+0x90>
    1cb4:	77 c0       	rjmp	.+238    	; 0x1da4 <EF_B_DIO_InitPin+0x17e>
    1cb6:	2d 85       	ldd	r18, Y+13	; 0x0d
    1cb8:	3e 85       	ldd	r19, Y+14	; 0x0e
    1cba:	24 36       	cpi	r18, 0x64	; 100
    1cbc:	31 05       	cpc	r19, r1
    1cbe:	09 f4       	brne	.+2      	; 0x1cc2 <EF_B_DIO_InitPin+0x9c>
    1cc0:	a9 c0       	rjmp	.+338    	; 0x1e14 <EF_B_DIO_InitPin+0x1ee>
    1cc2:	e0 c0       	rjmp	.+448    	; 0x1e84 <EF_B_DIO_InitPin+0x25e>
	{
	     case 'a':
		 case 'A':
			  switch(Direction)
    1cc4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc6:	28 2f       	mov	r18, r24
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	3c 87       	std	Y+12, r19	; 0x0c
    1ccc:	2b 87       	std	Y+11, r18	; 0x0b
    1cce:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cd0:	9c 85       	ldd	r25, Y+12	; 0x0c
    1cd2:	00 97       	sbiw	r24, 0x00	; 0
    1cd4:	31 f0       	breq	.+12     	; 0x1ce2 <EF_B_DIO_InitPin+0xbc>
    1cd6:	2b 85       	ldd	r18, Y+11	; 0x0b
    1cd8:	3c 85       	ldd	r19, Y+12	; 0x0c
    1cda:	21 30       	cpi	r18, 0x01	; 1
    1cdc:	31 05       	cpc	r19, r1
    1cde:	b1 f0       	breq	.+44     	; 0x1d0c <EF_B_DIO_InitPin+0xe6>
    1ce0:	d3 c0       	rjmp	.+422    	; 0x1e88 <EF_B_DIO_InitPin+0x262>
			  {
			      case INPUT:
			     	   DDRA &= ~(1 << PinNumber);
    1ce2:	aa e3       	ldi	r26, 0x3A	; 58
    1ce4:	b0 e0       	ldi	r27, 0x00	; 0
    1ce6:	ea e3       	ldi	r30, 0x3A	; 58
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	48 2f       	mov	r20, r24
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf0:	28 2f       	mov	r18, r24
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	02 2e       	mov	r0, r18
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <EF_B_DIO_InitPin+0xda>
    1cfc:	88 0f       	add	r24, r24
    1cfe:	99 1f       	adc	r25, r25
    1d00:	0a 94       	dec	r0
    1d02:	e2 f7       	brpl	.-8      	; 0x1cfc <EF_B_DIO_InitPin+0xd6>
    1d04:	80 95       	com	r24
    1d06:	84 23       	and	r24, r20
    1d08:	8c 93       	st	X, r24
    1d0a:	be c0       	rjmp	.+380    	; 0x1e88 <EF_B_DIO_InitPin+0x262>
			    	   break;
			      case OUTPUT:
			    	   DDRA |=  (1 << PinNumber);
    1d0c:	aa e3       	ldi	r26, 0x3A	; 58
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	ea e3       	ldi	r30, 0x3A	; 58
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	48 2f       	mov	r20, r24
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	28 2f       	mov	r18, r24
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	02 2e       	mov	r0, r18
    1d24:	02 c0       	rjmp	.+4      	; 0x1d2a <EF_B_DIO_InitPin+0x104>
    1d26:	88 0f       	add	r24, r24
    1d28:	99 1f       	adc	r25, r25
    1d2a:	0a 94       	dec	r0
    1d2c:	e2 f7       	brpl	.-8      	; 0x1d26 <EF_B_DIO_InitPin+0x100>
    1d2e:	84 2b       	or	r24, r20
    1d30:	8c 93       	st	X, r24
    1d32:	aa c0       	rjmp	.+340    	; 0x1e88 <EF_B_DIO_InitPin+0x262>
			    	   break;
			  }
		 break;
		 case 'b':
		 case 'B':
			  switch(Direction)
    1d34:	8c 81       	ldd	r24, Y+4	; 0x04
    1d36:	28 2f       	mov	r18, r24
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	3a 87       	std	Y+10, r19	; 0x0a
    1d3c:	29 87       	std	Y+9, r18	; 0x09
    1d3e:	89 85       	ldd	r24, Y+9	; 0x09
    1d40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d42:	00 97       	sbiw	r24, 0x00	; 0
    1d44:	31 f0       	breq	.+12     	; 0x1d52 <EF_B_DIO_InitPin+0x12c>
    1d46:	29 85       	ldd	r18, Y+9	; 0x09
    1d48:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d4a:	21 30       	cpi	r18, 0x01	; 1
    1d4c:	31 05       	cpc	r19, r1
    1d4e:	b1 f0       	breq	.+44     	; 0x1d7c <EF_B_DIO_InitPin+0x156>
    1d50:	9b c0       	rjmp	.+310    	; 0x1e88 <EF_B_DIO_InitPin+0x262>
			  {
			      case INPUT:
			 		   DDRB &= ~(1 << PinNumber);
    1d52:	a7 e3       	ldi	r26, 0x37	; 55
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	e7 e3       	ldi	r30, 0x37	; 55
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	48 2f       	mov	r20, r24
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	28 2f       	mov	r18, r24
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	02 2e       	mov	r0, r18
    1d6a:	02 c0       	rjmp	.+4      	; 0x1d70 <EF_B_DIO_InitPin+0x14a>
    1d6c:	88 0f       	add	r24, r24
    1d6e:	99 1f       	adc	r25, r25
    1d70:	0a 94       	dec	r0
    1d72:	e2 f7       	brpl	.-8      	; 0x1d6c <EF_B_DIO_InitPin+0x146>
    1d74:	80 95       	com	r24
    1d76:	84 23       	and	r24, r20
    1d78:	8c 93       	st	X, r24
    1d7a:	86 c0       	rjmp	.+268    	; 0x1e88 <EF_B_DIO_InitPin+0x262>
			 		   break;
			 	  case OUTPUT:
			 		   DDRB |=  (1 << PinNumber);
    1d7c:	a7 e3       	ldi	r26, 0x37	; 55
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	e7 e3       	ldi	r30, 0x37	; 55
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	48 2f       	mov	r20, r24
    1d88:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8a:	28 2f       	mov	r18, r24
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	02 2e       	mov	r0, r18
    1d94:	02 c0       	rjmp	.+4      	; 0x1d9a <EF_B_DIO_InitPin+0x174>
    1d96:	88 0f       	add	r24, r24
    1d98:	99 1f       	adc	r25, r25
    1d9a:	0a 94       	dec	r0
    1d9c:	e2 f7       	brpl	.-8      	; 0x1d96 <EF_B_DIO_InitPin+0x170>
    1d9e:	84 2b       	or	r24, r20
    1da0:	8c 93       	st	X, r24
    1da2:	72 c0       	rjmp	.+228    	; 0x1e88 <EF_B_DIO_InitPin+0x262>
			 		   break;
			  }
		 break;
		 case 'c':
		 case 'C':
			  switch(Direction)
    1da4:	8c 81       	ldd	r24, Y+4	; 0x04
    1da6:	28 2f       	mov	r18, r24
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	38 87       	std	Y+8, r19	; 0x08
    1dac:	2f 83       	std	Y+7, r18	; 0x07
    1dae:	8f 81       	ldd	r24, Y+7	; 0x07
    1db0:	98 85       	ldd	r25, Y+8	; 0x08
    1db2:	00 97       	sbiw	r24, 0x00	; 0
    1db4:	31 f0       	breq	.+12     	; 0x1dc2 <EF_B_DIO_InitPin+0x19c>
    1db6:	2f 81       	ldd	r18, Y+7	; 0x07
    1db8:	38 85       	ldd	r19, Y+8	; 0x08
    1dba:	21 30       	cpi	r18, 0x01	; 1
    1dbc:	31 05       	cpc	r19, r1
    1dbe:	b1 f0       	breq	.+44     	; 0x1dec <EF_B_DIO_InitPin+0x1c6>
    1dc0:	63 c0       	rjmp	.+198    	; 0x1e88 <EF_B_DIO_InitPin+0x262>
			  {
			 	  case INPUT:
			 		   DDRC &= ~(1 << PinNumber);
    1dc2:	a4 e3       	ldi	r26, 0x34	; 52
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	e4 e3       	ldi	r30, 0x34	; 52
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	48 2f       	mov	r20, r24
    1dce:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd0:	28 2f       	mov	r18, r24
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	02 2e       	mov	r0, r18
    1dda:	02 c0       	rjmp	.+4      	; 0x1de0 <EF_B_DIO_InitPin+0x1ba>
    1ddc:	88 0f       	add	r24, r24
    1dde:	99 1f       	adc	r25, r25
    1de0:	0a 94       	dec	r0
    1de2:	e2 f7       	brpl	.-8      	; 0x1ddc <EF_B_DIO_InitPin+0x1b6>
    1de4:	80 95       	com	r24
    1de6:	84 23       	and	r24, r20
    1de8:	8c 93       	st	X, r24
    1dea:	4e c0       	rjmp	.+156    	; 0x1e88 <EF_B_DIO_InitPin+0x262>
			 		   break;
			 	  case OUTPUT:
			 		   DDRC |=  (1 << PinNumber);
    1dec:	a4 e3       	ldi	r26, 0x34	; 52
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	e4 e3       	ldi	r30, 0x34	; 52
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	48 2f       	mov	r20, r24
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	28 2f       	mov	r18, r24
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	02 2e       	mov	r0, r18
    1e04:	02 c0       	rjmp	.+4      	; 0x1e0a <EF_B_DIO_InitPin+0x1e4>
    1e06:	88 0f       	add	r24, r24
    1e08:	99 1f       	adc	r25, r25
    1e0a:	0a 94       	dec	r0
    1e0c:	e2 f7       	brpl	.-8      	; 0x1e06 <EF_B_DIO_InitPin+0x1e0>
    1e0e:	84 2b       	or	r24, r20
    1e10:	8c 93       	st	X, r24
    1e12:	3a c0       	rjmp	.+116    	; 0x1e88 <EF_B_DIO_InitPin+0x262>
			 		   break;
			  }
		 break;
		 case 'd':
		 case 'D':
			  switch(Direction)
    1e14:	8c 81       	ldd	r24, Y+4	; 0x04
    1e16:	28 2f       	mov	r18, r24
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	3e 83       	std	Y+6, r19	; 0x06
    1e1c:	2d 83       	std	Y+5, r18	; 0x05
    1e1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e20:	9e 81       	ldd	r25, Y+6	; 0x06
    1e22:	00 97       	sbiw	r24, 0x00	; 0
    1e24:	31 f0       	breq	.+12     	; 0x1e32 <EF_B_DIO_InitPin+0x20c>
    1e26:	2d 81       	ldd	r18, Y+5	; 0x05
    1e28:	3e 81       	ldd	r19, Y+6	; 0x06
    1e2a:	21 30       	cpi	r18, 0x01	; 1
    1e2c:	31 05       	cpc	r19, r1
    1e2e:	b1 f0       	breq	.+44     	; 0x1e5c <EF_B_DIO_InitPin+0x236>
    1e30:	2b c0       	rjmp	.+86     	; 0x1e88 <EF_B_DIO_InitPin+0x262>
			  {
			 	  case INPUT:
			 		   DDRD &= ~(1 << PinNumber);
    1e32:	a1 e3       	ldi	r26, 0x31	; 49
    1e34:	b0 e0       	ldi	r27, 0x00	; 0
    1e36:	e1 e3       	ldi	r30, 0x31	; 49
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	48 2f       	mov	r20, r24
    1e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e40:	28 2f       	mov	r18, r24
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	02 2e       	mov	r0, r18
    1e4a:	02 c0       	rjmp	.+4      	; 0x1e50 <EF_B_DIO_InitPin+0x22a>
    1e4c:	88 0f       	add	r24, r24
    1e4e:	99 1f       	adc	r25, r25
    1e50:	0a 94       	dec	r0
    1e52:	e2 f7       	brpl	.-8      	; 0x1e4c <EF_B_DIO_InitPin+0x226>
    1e54:	80 95       	com	r24
    1e56:	84 23       	and	r24, r20
    1e58:	8c 93       	st	X, r24
    1e5a:	16 c0       	rjmp	.+44     	; 0x1e88 <EF_B_DIO_InitPin+0x262>
			 		   break;
			 	  case OUTPUT:
			 		   DDRD |=  (1 << PinNumber);
    1e5c:	a1 e3       	ldi	r26, 0x31	; 49
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	e1 e3       	ldi	r30, 0x31	; 49
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
    1e66:	48 2f       	mov	r20, r24
    1e68:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6a:	28 2f       	mov	r18, r24
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	02 2e       	mov	r0, r18
    1e74:	02 c0       	rjmp	.+4      	; 0x1e7a <EF_B_DIO_InitPin+0x254>
    1e76:	88 0f       	add	r24, r24
    1e78:	99 1f       	adc	r25, r25
    1e7a:	0a 94       	dec	r0
    1e7c:	e2 f7       	brpl	.-8      	; 0x1e76 <EF_B_DIO_InitPin+0x250>
    1e7e:	84 2b       	or	r24, r20
    1e80:	8c 93       	st	X, r24
    1e82:	02 c0       	rjmp	.+4      	; 0x1e88 <EF_B_DIO_InitPin+0x262>
			 	  default:
			 		   break;
			   }
		 break;
		 default:
             bStatus = -1;
    1e84:	8f ef       	ldi	r24, 0xFF	; 255
    1e86:	89 83       	std	Y+1, r24	; 0x01

}

    return(bStatus);
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e8a:	2e 96       	adiw	r28, 0x0e	; 14
    1e8c:	0f b6       	in	r0, 0x3f	; 63
    1e8e:	f8 94       	cli
    1e90:	de bf       	out	0x3e, r29	; 62
    1e92:	0f be       	out	0x3f, r0	; 63
    1e94:	cd bf       	out	0x3d, r28	; 61
    1e96:	cf 91       	pop	r28
    1e98:	df 91       	pop	r29
    1e9a:	08 95       	ret

00001e9c <EF_S8_DIO_SetPin>:
* Return Value: The function will return -1 if user enter wrong inputs.
*               or return 1 if OK.  
* Note        : This function set output PIN.
***********************************************************************/
s8  EF_S8_DIO_SetPin   (u8 PortName, u8 PinNumber)
{
    1e9c:	df 93       	push	r29
    1e9e:	cf 93       	push	r28
    1ea0:	00 d0       	rcall	.+0      	; 0x1ea2 <EF_S8_DIO_SetPin+0x6>
    1ea2:	00 d0       	rcall	.+0      	; 0x1ea4 <EF_S8_DIO_SetPin+0x8>
    1ea4:	0f 92       	push	r0
    1ea6:	cd b7       	in	r28, 0x3d	; 61
    1ea8:	de b7       	in	r29, 0x3e	; 62
    1eaa:	8a 83       	std	Y+2, r24	; 0x02
    1eac:	6b 83       	std	Y+3, r22	; 0x03
    s8 Status;

    if(PinNumber > 7)
    1eae:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb0:	88 30       	cpi	r24, 0x08	; 8
    1eb2:	18 f0       	brcs	.+6      	; 0x1eba <EF_S8_DIO_SetPin+0x1e>
	{
	    Status = -1;
    1eb4:	8f ef       	ldi	r24, 0xFF	; 255
    1eb6:	89 83       	std	Y+1, r24	; 0x01
    1eb8:	90 c0       	rjmp	.+288    	; 0x1fda <EF_S8_DIO_SetPin+0x13e>
    }
	else
	{    
		Status = 1;
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	89 83       	std	Y+1, r24	; 0x01
	    switch(PortName)
    1ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec0:	28 2f       	mov	r18, r24
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	3d 83       	std	Y+5, r19	; 0x05
    1ec6:	2c 83       	std	Y+4, r18	; 0x04
    1ec8:	8c 81       	ldd	r24, Y+4	; 0x04
    1eca:	9d 81       	ldd	r25, Y+5	; 0x05
    1ecc:	84 34       	cpi	r24, 0x44	; 68
    1ece:	91 05       	cpc	r25, r1
    1ed0:	09 f4       	brne	.+2      	; 0x1ed4 <EF_S8_DIO_SetPin+0x38>
    1ed2:	6d c0       	rjmp	.+218    	; 0x1fae <EF_S8_DIO_SetPin+0x112>
    1ed4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ed6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ed8:	25 34       	cpi	r18, 0x45	; 69
    1eda:	31 05       	cpc	r19, r1
    1edc:	8c f4       	brge	.+34     	; 0x1f00 <EF_S8_DIO_SetPin+0x64>
    1ede:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ee2:	82 34       	cpi	r24, 0x42	; 66
    1ee4:	91 05       	cpc	r25, r1
    1ee6:	d9 f1       	breq	.+118    	; 0x1f5e <EF_S8_DIO_SetPin+0xc2>
    1ee8:	2c 81       	ldd	r18, Y+4	; 0x04
    1eea:	3d 81       	ldd	r19, Y+5	; 0x05
    1eec:	23 34       	cpi	r18, 0x43	; 67
    1eee:	31 05       	cpc	r19, r1
    1ef0:	0c f0       	brlt	.+2      	; 0x1ef4 <EF_S8_DIO_SetPin+0x58>
    1ef2:	49 c0       	rjmp	.+146    	; 0x1f86 <EF_S8_DIO_SetPin+0xea>
    1ef4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ef8:	81 34       	cpi	r24, 0x41	; 65
    1efa:	91 05       	cpc	r25, r1
    1efc:	e1 f0       	breq	.+56     	; 0x1f36 <EF_S8_DIO_SetPin+0x9a>
    1efe:	6b c0       	rjmp	.+214    	; 0x1fd6 <EF_S8_DIO_SetPin+0x13a>
    1f00:	2c 81       	ldd	r18, Y+4	; 0x04
    1f02:	3d 81       	ldd	r19, Y+5	; 0x05
    1f04:	22 36       	cpi	r18, 0x62	; 98
    1f06:	31 05       	cpc	r19, r1
    1f08:	51 f1       	breq	.+84     	; 0x1f5e <EF_S8_DIO_SetPin+0xc2>
    1f0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f0e:	83 36       	cpi	r24, 0x63	; 99
    1f10:	91 05       	cpc	r25, r1
    1f12:	34 f4       	brge	.+12     	; 0x1f20 <EF_S8_DIO_SetPin+0x84>
    1f14:	2c 81       	ldd	r18, Y+4	; 0x04
    1f16:	3d 81       	ldd	r19, Y+5	; 0x05
    1f18:	21 36       	cpi	r18, 0x61	; 97
    1f1a:	31 05       	cpc	r19, r1
    1f1c:	61 f0       	breq	.+24     	; 0x1f36 <EF_S8_DIO_SetPin+0x9a>
    1f1e:	5b c0       	rjmp	.+182    	; 0x1fd6 <EF_S8_DIO_SetPin+0x13a>
    1f20:	8c 81       	ldd	r24, Y+4	; 0x04
    1f22:	9d 81       	ldd	r25, Y+5	; 0x05
    1f24:	83 36       	cpi	r24, 0x63	; 99
    1f26:	91 05       	cpc	r25, r1
    1f28:	71 f1       	breq	.+92     	; 0x1f86 <EF_S8_DIO_SetPin+0xea>
    1f2a:	2c 81       	ldd	r18, Y+4	; 0x04
    1f2c:	3d 81       	ldd	r19, Y+5	; 0x05
    1f2e:	24 36       	cpi	r18, 0x64	; 100
    1f30:	31 05       	cpc	r19, r1
    1f32:	e9 f1       	breq	.+122    	; 0x1fae <EF_S8_DIO_SetPin+0x112>
    1f34:	50 c0       	rjmp	.+160    	; 0x1fd6 <EF_S8_DIO_SetPin+0x13a>
		{
		     case 'a':
			 case 'A':
	             PORTA |= (1 << PinNumber);
    1f36:	ab e3       	ldi	r26, 0x3B	; 59
    1f38:	b0 e0       	ldi	r27, 0x00	; 0
    1f3a:	eb e3       	ldi	r30, 0x3B	; 59
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	80 81       	ld	r24, Z
    1f40:	48 2f       	mov	r20, r24
    1f42:	8b 81       	ldd	r24, Y+3	; 0x03
    1f44:	28 2f       	mov	r18, r24
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	02 2e       	mov	r0, r18
    1f4e:	02 c0       	rjmp	.+4      	; 0x1f54 <EF_S8_DIO_SetPin+0xb8>
    1f50:	88 0f       	add	r24, r24
    1f52:	99 1f       	adc	r25, r25
    1f54:	0a 94       	dec	r0
    1f56:	e2 f7       	brpl	.-8      	; 0x1f50 <EF_S8_DIO_SetPin+0xb4>
    1f58:	84 2b       	or	r24, r20
    1f5a:	8c 93       	st	X, r24
    1f5c:	3e c0       	rjmp	.+124    	; 0x1fda <EF_S8_DIO_SetPin+0x13e>
			 break;
			 case 'b':
			 case 'B':
	             PORTB |= (1 << PinNumber);
    1f5e:	a8 e3       	ldi	r26, 0x38	; 56
    1f60:	b0 e0       	ldi	r27, 0x00	; 0
    1f62:	e8 e3       	ldi	r30, 0x38	; 56
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	48 2f       	mov	r20, r24
    1f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6c:	28 2f       	mov	r18, r24
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	02 2e       	mov	r0, r18
    1f76:	02 c0       	rjmp	.+4      	; 0x1f7c <EF_S8_DIO_SetPin+0xe0>
    1f78:	88 0f       	add	r24, r24
    1f7a:	99 1f       	adc	r25, r25
    1f7c:	0a 94       	dec	r0
    1f7e:	e2 f7       	brpl	.-8      	; 0x1f78 <EF_S8_DIO_SetPin+0xdc>
    1f80:	84 2b       	or	r24, r20
    1f82:	8c 93       	st	X, r24
    1f84:	2a c0       	rjmp	.+84     	; 0x1fda <EF_S8_DIO_SetPin+0x13e>
			 break;
			 case 'c':
			 case 'C':
	             PORTC |= (1 << PinNumber);
    1f86:	a5 e3       	ldi	r26, 0x35	; 53
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	e5 e3       	ldi	r30, 0x35	; 53
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	48 2f       	mov	r20, r24
    1f92:	8b 81       	ldd	r24, Y+3	; 0x03
    1f94:	28 2f       	mov	r18, r24
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	02 2e       	mov	r0, r18
    1f9e:	02 c0       	rjmp	.+4      	; 0x1fa4 <EF_S8_DIO_SetPin+0x108>
    1fa0:	88 0f       	add	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	0a 94       	dec	r0
    1fa6:	e2 f7       	brpl	.-8      	; 0x1fa0 <EF_S8_DIO_SetPin+0x104>
    1fa8:	84 2b       	or	r24, r20
    1faa:	8c 93       	st	X, r24
    1fac:	16 c0       	rjmp	.+44     	; 0x1fda <EF_S8_DIO_SetPin+0x13e>
			 break;
			 case 'd':
			 case 'D':
	             PORTD |= (1 << PinNumber);
    1fae:	a2 e3       	ldi	r26, 0x32	; 50
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	e2 e3       	ldi	r30, 0x32	; 50
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	80 81       	ld	r24, Z
    1fb8:	48 2f       	mov	r20, r24
    1fba:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbc:	28 2f       	mov	r18, r24
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	02 2e       	mov	r0, r18
    1fc6:	02 c0       	rjmp	.+4      	; 0x1fcc <EF_S8_DIO_SetPin+0x130>
    1fc8:	88 0f       	add	r24, r24
    1fca:	99 1f       	adc	r25, r25
    1fcc:	0a 94       	dec	r0
    1fce:	e2 f7       	brpl	.-8      	; 0x1fc8 <EF_S8_DIO_SetPin+0x12c>
    1fd0:	84 2b       	or	r24, r20
    1fd2:	8c 93       	st	X, r24
    1fd4:	02 c0       	rjmp	.+4      	; 0x1fda <EF_S8_DIO_SetPin+0x13e>
			 break;
			 default:
	             Status = -1;
    1fd6:	8f ef       	ldi	r24, 0xFF	; 255
    1fd8:	89 83       	std	Y+1, r24	; 0x01
	    }
    }
    return(Status);
    1fda:	89 81       	ldd	r24, Y+1	; 0x01

}
    1fdc:	0f 90       	pop	r0
    1fde:	0f 90       	pop	r0
    1fe0:	0f 90       	pop	r0
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	cf 91       	pop	r28
    1fe8:	df 91       	pop	r29
    1fea:	08 95       	ret

00001fec <EF_S8_DIO_ClearPin>:
*
* Return Value: The function will return -1 if user enter wrong inputs.
*               or return 1 if OK.  
***********************************************************************/
s8  EF_S8_DIO_ClearPin (u8 PortName, u8 PinNumber)
{
    1fec:	df 93       	push	r29
    1fee:	cf 93       	push	r28
    1ff0:	00 d0       	rcall	.+0      	; 0x1ff2 <EF_S8_DIO_ClearPin+0x6>
    1ff2:	00 d0       	rcall	.+0      	; 0x1ff4 <EF_S8_DIO_ClearPin+0x8>
    1ff4:	0f 92       	push	r0
    1ff6:	cd b7       	in	r28, 0x3d	; 61
    1ff8:	de b7       	in	r29, 0x3e	; 62
    1ffa:	8a 83       	std	Y+2, r24	; 0x02
    1ffc:	6b 83       	std	Y+3, r22	; 0x03
    s8 Status;

    if(PinNumber > 7)
    1ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    2000:	88 30       	cpi	r24, 0x08	; 8
    2002:	18 f0       	brcs	.+6      	; 0x200a <EF_S8_DIO_ClearPin+0x1e>
	{
	    Status = -1;
    2004:	8f ef       	ldi	r24, 0xFF	; 255
    2006:	89 83       	std	Y+1, r24	; 0x01
    2008:	95 c0       	rjmp	.+298    	; 0x2134 <EF_S8_DIO_ClearPin+0x148>
    }
	else
	{
	    Status = 1;
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	89 83       	std	Y+1, r24	; 0x01
	    switch(PortName)
    200e:	8a 81       	ldd	r24, Y+2	; 0x02
    2010:	28 2f       	mov	r18, r24
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	3d 83       	std	Y+5, r19	; 0x05
    2016:	2c 83       	std	Y+4, r18	; 0x04
    2018:	8c 81       	ldd	r24, Y+4	; 0x04
    201a:	9d 81       	ldd	r25, Y+5	; 0x05
    201c:	84 34       	cpi	r24, 0x44	; 68
    201e:	91 05       	cpc	r25, r1
    2020:	09 f4       	brne	.+2      	; 0x2024 <EF_S8_DIO_ClearPin+0x38>
    2022:	71 c0       	rjmp	.+226    	; 0x2106 <EF_S8_DIO_ClearPin+0x11a>
    2024:	2c 81       	ldd	r18, Y+4	; 0x04
    2026:	3d 81       	ldd	r19, Y+5	; 0x05
    2028:	25 34       	cpi	r18, 0x45	; 69
    202a:	31 05       	cpc	r19, r1
    202c:	8c f4       	brge	.+34     	; 0x2050 <EF_S8_DIO_ClearPin+0x64>
    202e:	8c 81       	ldd	r24, Y+4	; 0x04
    2030:	9d 81       	ldd	r25, Y+5	; 0x05
    2032:	82 34       	cpi	r24, 0x42	; 66
    2034:	91 05       	cpc	r25, r1
    2036:	e9 f1       	breq	.+122    	; 0x20b2 <EF_S8_DIO_ClearPin+0xc6>
    2038:	2c 81       	ldd	r18, Y+4	; 0x04
    203a:	3d 81       	ldd	r19, Y+5	; 0x05
    203c:	23 34       	cpi	r18, 0x43	; 67
    203e:	31 05       	cpc	r19, r1
    2040:	0c f0       	brlt	.+2      	; 0x2044 <EF_S8_DIO_ClearPin+0x58>
    2042:	4c c0       	rjmp	.+152    	; 0x20dc <EF_S8_DIO_ClearPin+0xf0>
    2044:	8c 81       	ldd	r24, Y+4	; 0x04
    2046:	9d 81       	ldd	r25, Y+5	; 0x05
    2048:	81 34       	cpi	r24, 0x41	; 65
    204a:	91 05       	cpc	r25, r1
    204c:	e9 f0       	breq	.+58     	; 0x2088 <EF_S8_DIO_ClearPin+0x9c>
    204e:	70 c0       	rjmp	.+224    	; 0x2130 <EF_S8_DIO_ClearPin+0x144>
    2050:	2c 81       	ldd	r18, Y+4	; 0x04
    2052:	3d 81       	ldd	r19, Y+5	; 0x05
    2054:	22 36       	cpi	r18, 0x62	; 98
    2056:	31 05       	cpc	r19, r1
    2058:	61 f1       	breq	.+88     	; 0x20b2 <EF_S8_DIO_ClearPin+0xc6>
    205a:	8c 81       	ldd	r24, Y+4	; 0x04
    205c:	9d 81       	ldd	r25, Y+5	; 0x05
    205e:	83 36       	cpi	r24, 0x63	; 99
    2060:	91 05       	cpc	r25, r1
    2062:	34 f4       	brge	.+12     	; 0x2070 <EF_S8_DIO_ClearPin+0x84>
    2064:	2c 81       	ldd	r18, Y+4	; 0x04
    2066:	3d 81       	ldd	r19, Y+5	; 0x05
    2068:	21 36       	cpi	r18, 0x61	; 97
    206a:	31 05       	cpc	r19, r1
    206c:	69 f0       	breq	.+26     	; 0x2088 <EF_S8_DIO_ClearPin+0x9c>
    206e:	60 c0       	rjmp	.+192    	; 0x2130 <EF_S8_DIO_ClearPin+0x144>
    2070:	8c 81       	ldd	r24, Y+4	; 0x04
    2072:	9d 81       	ldd	r25, Y+5	; 0x05
    2074:	83 36       	cpi	r24, 0x63	; 99
    2076:	91 05       	cpc	r25, r1
    2078:	89 f1       	breq	.+98     	; 0x20dc <EF_S8_DIO_ClearPin+0xf0>
    207a:	2c 81       	ldd	r18, Y+4	; 0x04
    207c:	3d 81       	ldd	r19, Y+5	; 0x05
    207e:	24 36       	cpi	r18, 0x64	; 100
    2080:	31 05       	cpc	r19, r1
    2082:	09 f4       	brne	.+2      	; 0x2086 <EF_S8_DIO_ClearPin+0x9a>
    2084:	40 c0       	rjmp	.+128    	; 0x2106 <EF_S8_DIO_ClearPin+0x11a>
    2086:	54 c0       	rjmp	.+168    	; 0x2130 <EF_S8_DIO_ClearPin+0x144>
		{
		     case 'a':
			 case 'A':
	             PORTA &= ~(1 << PinNumber);
    2088:	ab e3       	ldi	r26, 0x3B	; 59
    208a:	b0 e0       	ldi	r27, 0x00	; 0
    208c:	eb e3       	ldi	r30, 0x3B	; 59
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	80 81       	ld	r24, Z
    2092:	48 2f       	mov	r20, r24
    2094:	8b 81       	ldd	r24, Y+3	; 0x03
    2096:	28 2f       	mov	r18, r24
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	02 2e       	mov	r0, r18
    20a0:	02 c0       	rjmp	.+4      	; 0x20a6 <EF_S8_DIO_ClearPin+0xba>
    20a2:	88 0f       	add	r24, r24
    20a4:	99 1f       	adc	r25, r25
    20a6:	0a 94       	dec	r0
    20a8:	e2 f7       	brpl	.-8      	; 0x20a2 <EF_S8_DIO_ClearPin+0xb6>
    20aa:	80 95       	com	r24
    20ac:	84 23       	and	r24, r20
    20ae:	8c 93       	st	X, r24
    20b0:	41 c0       	rjmp	.+130    	; 0x2134 <EF_S8_DIO_ClearPin+0x148>
			 break;
			 case 'b':
			 case 'B':
	             PORTB &= ~(1 << PinNumber);
    20b2:	a8 e3       	ldi	r26, 0x38	; 56
    20b4:	b0 e0       	ldi	r27, 0x00	; 0
    20b6:	e8 e3       	ldi	r30, 0x38	; 56
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	48 2f       	mov	r20, r24
    20be:	8b 81       	ldd	r24, Y+3	; 0x03
    20c0:	28 2f       	mov	r18, r24
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	02 2e       	mov	r0, r18
    20ca:	02 c0       	rjmp	.+4      	; 0x20d0 <EF_S8_DIO_ClearPin+0xe4>
    20cc:	88 0f       	add	r24, r24
    20ce:	99 1f       	adc	r25, r25
    20d0:	0a 94       	dec	r0
    20d2:	e2 f7       	brpl	.-8      	; 0x20cc <EF_S8_DIO_ClearPin+0xe0>
    20d4:	80 95       	com	r24
    20d6:	84 23       	and	r24, r20
    20d8:	8c 93       	st	X, r24
    20da:	2c c0       	rjmp	.+88     	; 0x2134 <EF_S8_DIO_ClearPin+0x148>
			 break;
			 case 'c':
			 case 'C':
	             PORTC &= ~(1 << PinNumber);
    20dc:	a5 e3       	ldi	r26, 0x35	; 53
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	e5 e3       	ldi	r30, 0x35	; 53
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	48 2f       	mov	r20, r24
    20e8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ea:	28 2f       	mov	r18, r24
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	02 2e       	mov	r0, r18
    20f4:	02 c0       	rjmp	.+4      	; 0x20fa <EF_S8_DIO_ClearPin+0x10e>
    20f6:	88 0f       	add	r24, r24
    20f8:	99 1f       	adc	r25, r25
    20fa:	0a 94       	dec	r0
    20fc:	e2 f7       	brpl	.-8      	; 0x20f6 <EF_S8_DIO_ClearPin+0x10a>
    20fe:	80 95       	com	r24
    2100:	84 23       	and	r24, r20
    2102:	8c 93       	st	X, r24
    2104:	17 c0       	rjmp	.+46     	; 0x2134 <EF_S8_DIO_ClearPin+0x148>
			 break;
			 case 'd':
			 case 'D':
	             PORTD &= ~(1 << PinNumber);
    2106:	a2 e3       	ldi	r26, 0x32	; 50
    2108:	b0 e0       	ldi	r27, 0x00	; 0
    210a:	e2 e3       	ldi	r30, 0x32	; 50
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	80 81       	ld	r24, Z
    2110:	48 2f       	mov	r20, r24
    2112:	8b 81       	ldd	r24, Y+3	; 0x03
    2114:	28 2f       	mov	r18, r24
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	02 2e       	mov	r0, r18
    211e:	02 c0       	rjmp	.+4      	; 0x2124 <EF_S8_DIO_ClearPin+0x138>
    2120:	88 0f       	add	r24, r24
    2122:	99 1f       	adc	r25, r25
    2124:	0a 94       	dec	r0
    2126:	e2 f7       	brpl	.-8      	; 0x2120 <EF_S8_DIO_ClearPin+0x134>
    2128:	80 95       	com	r24
    212a:	84 23       	and	r24, r20
    212c:	8c 93       	st	X, r24
    212e:	02 c0       	rjmp	.+4      	; 0x2134 <EF_S8_DIO_ClearPin+0x148>
			 break;
			 default:
	             Status = -1;
    2130:	8f ef       	ldi	r24, 0xFF	; 255
    2132:	89 83       	std	Y+1, r24	; 0x01
	    }
	}
    return(Status);
    2134:	89 81       	ldd	r24, Y+1	; 0x01

}
    2136:	0f 90       	pop	r0
    2138:	0f 90       	pop	r0
    213a:	0f 90       	pop	r0
    213c:	0f 90       	pop	r0
    213e:	0f 90       	pop	r0
    2140:	cf 91       	pop	r28
    2142:	df 91       	pop	r29
    2144:	08 95       	ret

00002146 <EF_S8_DIO_SetPort>:
*
* Return Value: The function will return -1 if user enter wrong inputs.
*               or return 1 if OK.  
***********************************************************************/
s8  EF_S8_DIO_SetPort  (u8 PortName)
{
    2146:	df 93       	push	r29
    2148:	cf 93       	push	r28
    214a:	00 d0       	rcall	.+0      	; 0x214c <EF_S8_DIO_SetPort+0x6>
    214c:	00 d0       	rcall	.+0      	; 0x214e <EF_S8_DIO_SetPort+0x8>
    214e:	cd b7       	in	r28, 0x3d	; 61
    2150:	de b7       	in	r29, 0x3e	; 62
    2152:	8a 83       	std	Y+2, r24	; 0x02
    s8 Status;
    
    Status = 1;
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	89 83       	std	Y+1, r24	; 0x01
	switch(PortName)
    2158:	8a 81       	ldd	r24, Y+2	; 0x02
    215a:	28 2f       	mov	r18, r24
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	3c 83       	std	Y+4, r19	; 0x04
    2160:	2b 83       	std	Y+3, r18	; 0x03
    2162:	8b 81       	ldd	r24, Y+3	; 0x03
    2164:	9c 81       	ldd	r25, Y+4	; 0x04
    2166:	84 34       	cpi	r24, 0x44	; 68
    2168:	91 05       	cpc	r25, r1
    216a:	09 f4       	brne	.+2      	; 0x216e <EF_S8_DIO_SetPort+0x28>
    216c:	3f c0       	rjmp	.+126    	; 0x21ec <EF_S8_DIO_SetPort+0xa6>
    216e:	2b 81       	ldd	r18, Y+3	; 0x03
    2170:	3c 81       	ldd	r19, Y+4	; 0x04
    2172:	25 34       	cpi	r18, 0x45	; 69
    2174:	31 05       	cpc	r19, r1
    2176:	84 f4       	brge	.+32     	; 0x2198 <EF_S8_DIO_SetPort+0x52>
    2178:	8b 81       	ldd	r24, Y+3	; 0x03
    217a:	9c 81       	ldd	r25, Y+4	; 0x04
    217c:	82 34       	cpi	r24, 0x42	; 66
    217e:	91 05       	cpc	r25, r1
    2180:	59 f1       	breq	.+86     	; 0x21d8 <EF_S8_DIO_SetPort+0x92>
    2182:	2b 81       	ldd	r18, Y+3	; 0x03
    2184:	3c 81       	ldd	r19, Y+4	; 0x04
    2186:	23 34       	cpi	r18, 0x43	; 67
    2188:	31 05       	cpc	r19, r1
    218a:	5c f5       	brge	.+86     	; 0x21e2 <EF_S8_DIO_SetPort+0x9c>
    218c:	8b 81       	ldd	r24, Y+3	; 0x03
    218e:	9c 81       	ldd	r25, Y+4	; 0x04
    2190:	81 34       	cpi	r24, 0x41	; 65
    2192:	91 05       	cpc	r25, r1
    2194:	e1 f0       	breq	.+56     	; 0x21ce <EF_S8_DIO_SetPort+0x88>
    2196:	2f c0       	rjmp	.+94     	; 0x21f6 <EF_S8_DIO_SetPort+0xb0>
    2198:	2b 81       	ldd	r18, Y+3	; 0x03
    219a:	3c 81       	ldd	r19, Y+4	; 0x04
    219c:	22 36       	cpi	r18, 0x62	; 98
    219e:	31 05       	cpc	r19, r1
    21a0:	d9 f0       	breq	.+54     	; 0x21d8 <EF_S8_DIO_SetPort+0x92>
    21a2:	8b 81       	ldd	r24, Y+3	; 0x03
    21a4:	9c 81       	ldd	r25, Y+4	; 0x04
    21a6:	83 36       	cpi	r24, 0x63	; 99
    21a8:	91 05       	cpc	r25, r1
    21aa:	34 f4       	brge	.+12     	; 0x21b8 <EF_S8_DIO_SetPort+0x72>
    21ac:	2b 81       	ldd	r18, Y+3	; 0x03
    21ae:	3c 81       	ldd	r19, Y+4	; 0x04
    21b0:	21 36       	cpi	r18, 0x61	; 97
    21b2:	31 05       	cpc	r19, r1
    21b4:	61 f0       	breq	.+24     	; 0x21ce <EF_S8_DIO_SetPort+0x88>
    21b6:	1f c0       	rjmp	.+62     	; 0x21f6 <EF_S8_DIO_SetPort+0xb0>
    21b8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ba:	9c 81       	ldd	r25, Y+4	; 0x04
    21bc:	83 36       	cpi	r24, 0x63	; 99
    21be:	91 05       	cpc	r25, r1
    21c0:	81 f0       	breq	.+32     	; 0x21e2 <EF_S8_DIO_SetPort+0x9c>
    21c2:	2b 81       	ldd	r18, Y+3	; 0x03
    21c4:	3c 81       	ldd	r19, Y+4	; 0x04
    21c6:	24 36       	cpi	r18, 0x64	; 100
    21c8:	31 05       	cpc	r19, r1
    21ca:	81 f0       	breq	.+32     	; 0x21ec <EF_S8_DIO_SetPort+0xa6>
    21cc:	14 c0       	rjmp	.+40     	; 0x21f6 <EF_S8_DIO_SetPort+0xb0>
	{
	     case 'a':
		 case 'A':
             PORTA = 0xFF;
    21ce:	eb e3       	ldi	r30, 0x3B	; 59
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	8f ef       	ldi	r24, 0xFF	; 255
    21d4:	80 83       	st	Z, r24
    21d6:	11 c0       	rjmp	.+34     	; 0x21fa <EF_S8_DIO_SetPort+0xb4>
		 break;
		 case 'b':
		 case 'B':
             PORTB = 0xFF;
    21d8:	e8 e3       	ldi	r30, 0x38	; 56
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	8f ef       	ldi	r24, 0xFF	; 255
    21de:	80 83       	st	Z, r24
    21e0:	0c c0       	rjmp	.+24     	; 0x21fa <EF_S8_DIO_SetPort+0xb4>
		 break;
		 case 'c':
		 case 'C':
             PORTC = 0xFF;
    21e2:	e5 e3       	ldi	r30, 0x35	; 53
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	8f ef       	ldi	r24, 0xFF	; 255
    21e8:	80 83       	st	Z, r24
    21ea:	07 c0       	rjmp	.+14     	; 0x21fa <EF_S8_DIO_SetPort+0xb4>
		 break;
		 case 'd':
		 case 'D':
             PORTD = 0xFF;
    21ec:	e2 e3       	ldi	r30, 0x32	; 50
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	8f ef       	ldi	r24, 0xFF	; 255
    21f2:	80 83       	st	Z, r24
    21f4:	02 c0       	rjmp	.+4      	; 0x21fa <EF_S8_DIO_SetPort+0xb4>
		 break;
		 default:
             Status = -1;
    21f6:	8f ef       	ldi	r24, 0xFF	; 255
    21f8:	89 83       	std	Y+1, r24	; 0x01
    }

    return(Status);
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    21fc:	0f 90       	pop	r0
    21fe:	0f 90       	pop	r0
    2200:	0f 90       	pop	r0
    2202:	0f 90       	pop	r0
    2204:	cf 91       	pop	r28
    2206:	df 91       	pop	r29
    2208:	08 95       	ret

0000220a <EF_S8_DIO_ClearPort>:
*
* Return Value: The function will return -1 if user enter wrong inputs.
*               or return 1 if OK.  
***********************************************************************/
s8  EF_S8_DIO_ClearPort(u8 PortName)
{
    220a:	df 93       	push	r29
    220c:	cf 93       	push	r28
    220e:	00 d0       	rcall	.+0      	; 0x2210 <EF_S8_DIO_ClearPort+0x6>
    2210:	00 d0       	rcall	.+0      	; 0x2212 <EF_S8_DIO_ClearPort+0x8>
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
    2216:	8a 83       	std	Y+2, r24	; 0x02
    s8 Status;
    
    Status = 1;
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	89 83       	std	Y+1, r24	; 0x01
	switch(PortName)
    221c:	8a 81       	ldd	r24, Y+2	; 0x02
    221e:	28 2f       	mov	r18, r24
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	3c 83       	std	Y+4, r19	; 0x04
    2224:	2b 83       	std	Y+3, r18	; 0x03
    2226:	8b 81       	ldd	r24, Y+3	; 0x03
    2228:	9c 81       	ldd	r25, Y+4	; 0x04
    222a:	84 34       	cpi	r24, 0x44	; 68
    222c:	91 05       	cpc	r25, r1
    222e:	e1 f1       	breq	.+120    	; 0x22a8 <EF_S8_DIO_ClearPort+0x9e>
    2230:	2b 81       	ldd	r18, Y+3	; 0x03
    2232:	3c 81       	ldd	r19, Y+4	; 0x04
    2234:	25 34       	cpi	r18, 0x45	; 69
    2236:	31 05       	cpc	r19, r1
    2238:	84 f4       	brge	.+32     	; 0x225a <EF_S8_DIO_ClearPort+0x50>
    223a:	8b 81       	ldd	r24, Y+3	; 0x03
    223c:	9c 81       	ldd	r25, Y+4	; 0x04
    223e:	82 34       	cpi	r24, 0x42	; 66
    2240:	91 05       	cpc	r25, r1
    2242:	51 f1       	breq	.+84     	; 0x2298 <EF_S8_DIO_ClearPort+0x8e>
    2244:	2b 81       	ldd	r18, Y+3	; 0x03
    2246:	3c 81       	ldd	r19, Y+4	; 0x04
    2248:	23 34       	cpi	r18, 0x43	; 67
    224a:	31 05       	cpc	r19, r1
    224c:	4c f5       	brge	.+82     	; 0x22a0 <EF_S8_DIO_ClearPort+0x96>
    224e:	8b 81       	ldd	r24, Y+3	; 0x03
    2250:	9c 81       	ldd	r25, Y+4	; 0x04
    2252:	81 34       	cpi	r24, 0x41	; 65
    2254:	91 05       	cpc	r25, r1
    2256:	e1 f0       	breq	.+56     	; 0x2290 <EF_S8_DIO_ClearPort+0x86>
    2258:	2b c0       	rjmp	.+86     	; 0x22b0 <EF_S8_DIO_ClearPort+0xa6>
    225a:	2b 81       	ldd	r18, Y+3	; 0x03
    225c:	3c 81       	ldd	r19, Y+4	; 0x04
    225e:	22 36       	cpi	r18, 0x62	; 98
    2260:	31 05       	cpc	r19, r1
    2262:	d1 f0       	breq	.+52     	; 0x2298 <EF_S8_DIO_ClearPort+0x8e>
    2264:	8b 81       	ldd	r24, Y+3	; 0x03
    2266:	9c 81       	ldd	r25, Y+4	; 0x04
    2268:	83 36       	cpi	r24, 0x63	; 99
    226a:	91 05       	cpc	r25, r1
    226c:	34 f4       	brge	.+12     	; 0x227a <EF_S8_DIO_ClearPort+0x70>
    226e:	2b 81       	ldd	r18, Y+3	; 0x03
    2270:	3c 81       	ldd	r19, Y+4	; 0x04
    2272:	21 36       	cpi	r18, 0x61	; 97
    2274:	31 05       	cpc	r19, r1
    2276:	61 f0       	breq	.+24     	; 0x2290 <EF_S8_DIO_ClearPort+0x86>
    2278:	1b c0       	rjmp	.+54     	; 0x22b0 <EF_S8_DIO_ClearPort+0xa6>
    227a:	8b 81       	ldd	r24, Y+3	; 0x03
    227c:	9c 81       	ldd	r25, Y+4	; 0x04
    227e:	83 36       	cpi	r24, 0x63	; 99
    2280:	91 05       	cpc	r25, r1
    2282:	71 f0       	breq	.+28     	; 0x22a0 <EF_S8_DIO_ClearPort+0x96>
    2284:	2b 81       	ldd	r18, Y+3	; 0x03
    2286:	3c 81       	ldd	r19, Y+4	; 0x04
    2288:	24 36       	cpi	r18, 0x64	; 100
    228a:	31 05       	cpc	r19, r1
    228c:	69 f0       	breq	.+26     	; 0x22a8 <EF_S8_DIO_ClearPort+0x9e>
    228e:	10 c0       	rjmp	.+32     	; 0x22b0 <EF_S8_DIO_ClearPort+0xa6>
	{
	     case 'a':
		 case 'A':
             PORTA = 0x00;
    2290:	eb e3       	ldi	r30, 0x3B	; 59
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	10 82       	st	Z, r1
    2296:	0e c0       	rjmp	.+28     	; 0x22b4 <EF_S8_DIO_ClearPort+0xaa>
		 break;
		 case 'b':
		 case 'B':
             PORTB = 0x00;
    2298:	e8 e3       	ldi	r30, 0x38	; 56
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	10 82       	st	Z, r1
    229e:	0a c0       	rjmp	.+20     	; 0x22b4 <EF_S8_DIO_ClearPort+0xaa>
		 break;
		 case 'c':
		 case 'C':
             PORTC = 0x00;
    22a0:	e5 e3       	ldi	r30, 0x35	; 53
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	10 82       	st	Z, r1
    22a6:	06 c0       	rjmp	.+12     	; 0x22b4 <EF_S8_DIO_ClearPort+0xaa>
		 break;
		 case 'd':
		 case 'D':
             PORTD = 0x00;
    22a8:	e2 e3       	ldi	r30, 0x32	; 50
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	10 82       	st	Z, r1
    22ae:	02 c0       	rjmp	.+4      	; 0x22b4 <EF_S8_DIO_ClearPort+0xaa>
		 break;
		 default:
             Status = -1;
    22b0:	8f ef       	ldi	r24, 0xFF	; 255
    22b2:	89 83       	std	Y+1, r24	; 0x01
    }

    return(Status);
    22b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    22b6:	0f 90       	pop	r0
    22b8:	0f 90       	pop	r0
    22ba:	0f 90       	pop	r0
    22bc:	0f 90       	pop	r0
    22be:	cf 91       	pop	r28
    22c0:	df 91       	pop	r29
    22c2:	08 95       	ret

000022c4 <EF_S8_DIO_TogglePin>:
*
* Return Value: The function will return -1 if user enter wrong inputs.
*               or return 1 if OK.  
***********************************************************************/
s8  EF_S8_DIO_TogglePin(u8 PortName, u8 PinNumber)
{
    22c4:	df 93       	push	r29
    22c6:	cf 93       	push	r28
    22c8:	00 d0       	rcall	.+0      	; 0x22ca <EF_S8_DIO_TogglePin+0x6>
    22ca:	00 d0       	rcall	.+0      	; 0x22cc <EF_S8_DIO_TogglePin+0x8>
    22cc:	0f 92       	push	r0
    22ce:	cd b7       	in	r28, 0x3d	; 61
    22d0:	de b7       	in	r29, 0x3e	; 62
    22d2:	8a 83       	std	Y+2, r24	; 0x02
    22d4:	6b 83       	std	Y+3, r22	; 0x03
    s8 Status;
    
    if(PinNumber > 7)
    22d6:	8b 81       	ldd	r24, Y+3	; 0x03
    22d8:	88 30       	cpi	r24, 0x08	; 8
    22da:	18 f0       	brcs	.+6      	; 0x22e2 <EF_S8_DIO_TogglePin+0x1e>
	{
	    Status = -1;
    22dc:	8f ef       	ldi	r24, 0xFF	; 255
    22de:	89 83       	std	Y+1, r24	; 0x01
    22e0:	90 c0       	rjmp	.+288    	; 0x2402 <EF_S8_DIO_TogglePin+0x13e>
    }
	else
	{
	    Status = 1;
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	89 83       	std	Y+1, r24	; 0x01
		switch(PortName)
    22e6:	8a 81       	ldd	r24, Y+2	; 0x02
    22e8:	28 2f       	mov	r18, r24
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	3d 83       	std	Y+5, r19	; 0x05
    22ee:	2c 83       	std	Y+4, r18	; 0x04
    22f0:	8c 81       	ldd	r24, Y+4	; 0x04
    22f2:	9d 81       	ldd	r25, Y+5	; 0x05
    22f4:	84 34       	cpi	r24, 0x44	; 68
    22f6:	91 05       	cpc	r25, r1
    22f8:	09 f4       	brne	.+2      	; 0x22fc <EF_S8_DIO_TogglePin+0x38>
    22fa:	6d c0       	rjmp	.+218    	; 0x23d6 <EF_S8_DIO_TogglePin+0x112>
    22fc:	2c 81       	ldd	r18, Y+4	; 0x04
    22fe:	3d 81       	ldd	r19, Y+5	; 0x05
    2300:	25 34       	cpi	r18, 0x45	; 69
    2302:	31 05       	cpc	r19, r1
    2304:	8c f4       	brge	.+34     	; 0x2328 <EF_S8_DIO_TogglePin+0x64>
    2306:	8c 81       	ldd	r24, Y+4	; 0x04
    2308:	9d 81       	ldd	r25, Y+5	; 0x05
    230a:	82 34       	cpi	r24, 0x42	; 66
    230c:	91 05       	cpc	r25, r1
    230e:	d9 f1       	breq	.+118    	; 0x2386 <EF_S8_DIO_TogglePin+0xc2>
    2310:	2c 81       	ldd	r18, Y+4	; 0x04
    2312:	3d 81       	ldd	r19, Y+5	; 0x05
    2314:	23 34       	cpi	r18, 0x43	; 67
    2316:	31 05       	cpc	r19, r1
    2318:	0c f0       	brlt	.+2      	; 0x231c <EF_S8_DIO_TogglePin+0x58>
    231a:	49 c0       	rjmp	.+146    	; 0x23ae <EF_S8_DIO_TogglePin+0xea>
    231c:	8c 81       	ldd	r24, Y+4	; 0x04
    231e:	9d 81       	ldd	r25, Y+5	; 0x05
    2320:	81 34       	cpi	r24, 0x41	; 65
    2322:	91 05       	cpc	r25, r1
    2324:	e1 f0       	breq	.+56     	; 0x235e <EF_S8_DIO_TogglePin+0x9a>
    2326:	6b c0       	rjmp	.+214    	; 0x23fe <EF_S8_DIO_TogglePin+0x13a>
    2328:	2c 81       	ldd	r18, Y+4	; 0x04
    232a:	3d 81       	ldd	r19, Y+5	; 0x05
    232c:	22 36       	cpi	r18, 0x62	; 98
    232e:	31 05       	cpc	r19, r1
    2330:	51 f1       	breq	.+84     	; 0x2386 <EF_S8_DIO_TogglePin+0xc2>
    2332:	8c 81       	ldd	r24, Y+4	; 0x04
    2334:	9d 81       	ldd	r25, Y+5	; 0x05
    2336:	83 36       	cpi	r24, 0x63	; 99
    2338:	91 05       	cpc	r25, r1
    233a:	34 f4       	brge	.+12     	; 0x2348 <EF_S8_DIO_TogglePin+0x84>
    233c:	2c 81       	ldd	r18, Y+4	; 0x04
    233e:	3d 81       	ldd	r19, Y+5	; 0x05
    2340:	21 36       	cpi	r18, 0x61	; 97
    2342:	31 05       	cpc	r19, r1
    2344:	61 f0       	breq	.+24     	; 0x235e <EF_S8_DIO_TogglePin+0x9a>
    2346:	5b c0       	rjmp	.+182    	; 0x23fe <EF_S8_DIO_TogglePin+0x13a>
    2348:	8c 81       	ldd	r24, Y+4	; 0x04
    234a:	9d 81       	ldd	r25, Y+5	; 0x05
    234c:	83 36       	cpi	r24, 0x63	; 99
    234e:	91 05       	cpc	r25, r1
    2350:	71 f1       	breq	.+92     	; 0x23ae <EF_S8_DIO_TogglePin+0xea>
    2352:	2c 81       	ldd	r18, Y+4	; 0x04
    2354:	3d 81       	ldd	r19, Y+5	; 0x05
    2356:	24 36       	cpi	r18, 0x64	; 100
    2358:	31 05       	cpc	r19, r1
    235a:	e9 f1       	breq	.+122    	; 0x23d6 <EF_S8_DIO_TogglePin+0x112>
    235c:	50 c0       	rjmp	.+160    	; 0x23fe <EF_S8_DIO_TogglePin+0x13a>
		{
		     case 'a':
			 case 'A':
	             PORTA ^= (1 << PinNumber);
    235e:	ab e3       	ldi	r26, 0x3B	; 59
    2360:	b0 e0       	ldi	r27, 0x00	; 0
    2362:	eb e3       	ldi	r30, 0x3B	; 59
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	80 81       	ld	r24, Z
    2368:	48 2f       	mov	r20, r24
    236a:	8b 81       	ldd	r24, Y+3	; 0x03
    236c:	28 2f       	mov	r18, r24
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	02 2e       	mov	r0, r18
    2376:	02 c0       	rjmp	.+4      	; 0x237c <EF_S8_DIO_TogglePin+0xb8>
    2378:	88 0f       	add	r24, r24
    237a:	99 1f       	adc	r25, r25
    237c:	0a 94       	dec	r0
    237e:	e2 f7       	brpl	.-8      	; 0x2378 <EF_S8_DIO_TogglePin+0xb4>
    2380:	84 27       	eor	r24, r20
    2382:	8c 93       	st	X, r24
    2384:	3e c0       	rjmp	.+124    	; 0x2402 <EF_S8_DIO_TogglePin+0x13e>
			 break;
			 case 'b':
			 case 'B':
	             PORTB ^= (1 << PinNumber);
    2386:	a8 e3       	ldi	r26, 0x38	; 56
    2388:	b0 e0       	ldi	r27, 0x00	; 0
    238a:	e8 e3       	ldi	r30, 0x38	; 56
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	80 81       	ld	r24, Z
    2390:	48 2f       	mov	r20, r24
    2392:	8b 81       	ldd	r24, Y+3	; 0x03
    2394:	28 2f       	mov	r18, r24
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	02 2e       	mov	r0, r18
    239e:	02 c0       	rjmp	.+4      	; 0x23a4 <EF_S8_DIO_TogglePin+0xe0>
    23a0:	88 0f       	add	r24, r24
    23a2:	99 1f       	adc	r25, r25
    23a4:	0a 94       	dec	r0
    23a6:	e2 f7       	brpl	.-8      	; 0x23a0 <EF_S8_DIO_TogglePin+0xdc>
    23a8:	84 27       	eor	r24, r20
    23aa:	8c 93       	st	X, r24
    23ac:	2a c0       	rjmp	.+84     	; 0x2402 <EF_S8_DIO_TogglePin+0x13e>
			 break;
			 case 'c':
			 case 'C':
	             PORTC ^= (1 << PinNumber);
    23ae:	a5 e3       	ldi	r26, 0x35	; 53
    23b0:	b0 e0       	ldi	r27, 0x00	; 0
    23b2:	e5 e3       	ldi	r30, 0x35	; 53
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	80 81       	ld	r24, Z
    23b8:	48 2f       	mov	r20, r24
    23ba:	8b 81       	ldd	r24, Y+3	; 0x03
    23bc:	28 2f       	mov	r18, r24
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	81 e0       	ldi	r24, 0x01	; 1
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	02 2e       	mov	r0, r18
    23c6:	02 c0       	rjmp	.+4      	; 0x23cc <EF_S8_DIO_TogglePin+0x108>
    23c8:	88 0f       	add	r24, r24
    23ca:	99 1f       	adc	r25, r25
    23cc:	0a 94       	dec	r0
    23ce:	e2 f7       	brpl	.-8      	; 0x23c8 <EF_S8_DIO_TogglePin+0x104>
    23d0:	84 27       	eor	r24, r20
    23d2:	8c 93       	st	X, r24
    23d4:	16 c0       	rjmp	.+44     	; 0x2402 <EF_S8_DIO_TogglePin+0x13e>
			 break;
			 case 'd':
			 case 'D':
	             PORTD ^= (1 << PinNumber);
    23d6:	a2 e3       	ldi	r26, 0x32	; 50
    23d8:	b0 e0       	ldi	r27, 0x00	; 0
    23da:	e2 e3       	ldi	r30, 0x32	; 50
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	80 81       	ld	r24, Z
    23e0:	48 2f       	mov	r20, r24
    23e2:	8b 81       	ldd	r24, Y+3	; 0x03
    23e4:	28 2f       	mov	r18, r24
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	02 2e       	mov	r0, r18
    23ee:	02 c0       	rjmp	.+4      	; 0x23f4 <EF_S8_DIO_TogglePin+0x130>
    23f0:	88 0f       	add	r24, r24
    23f2:	99 1f       	adc	r25, r25
    23f4:	0a 94       	dec	r0
    23f6:	e2 f7       	brpl	.-8      	; 0x23f0 <EF_S8_DIO_TogglePin+0x12c>
    23f8:	84 27       	eor	r24, r20
    23fa:	8c 93       	st	X, r24
    23fc:	02 c0       	rjmp	.+4      	; 0x2402 <EF_S8_DIO_TogglePin+0x13e>
			 break;
			 default:
	             Status = -1;
    23fe:	8f ef       	ldi	r24, 0xFF	; 255
    2400:	89 83       	std	Y+1, r24	; 0x01
	    }
    }
    return(Status);
    2402:	89 81       	ldd	r24, Y+1	; 0x01
}
    2404:	0f 90       	pop	r0
    2406:	0f 90       	pop	r0
    2408:	0f 90       	pop	r0
    240a:	0f 90       	pop	r0
    240c:	0f 90       	pop	r0
    240e:	cf 91       	pop	r28
    2410:	df 91       	pop	r29
    2412:	08 95       	ret

00002414 <EF_S8_DIO_CheckPin>:
*
* Return Value: The function will return -1 if user enter wrong inputs.
*               or return 1 if Pin ON and 0 If pin OFF.  
***********************************************************************/
s8  EF_S8_DIO_CheckPin (u8 PortName, u8 PinNumber)
{
    2414:	df 93       	push	r29
    2416:	cf 93       	push	r28
    2418:	00 d0       	rcall	.+0      	; 0x241a <EF_S8_DIO_CheckPin+0x6>
    241a:	00 d0       	rcall	.+0      	; 0x241c <EF_S8_DIO_CheckPin+0x8>
    241c:	0f 92       	push	r0
    241e:	cd b7       	in	r28, 0x3d	; 61
    2420:	de b7       	in	r29, 0x3e	; 62
    2422:	8a 83       	std	Y+2, r24	; 0x02
    2424:	6b 83       	std	Y+3, r22	; 0x03
    s8 Status = 0;
    2426:	19 82       	std	Y+1, r1	; 0x01
    
    if(PinNumber > 7)
    2428:	8b 81       	ldd	r24, Y+3	; 0x03
    242a:	88 30       	cpi	r24, 0x08	; 8
    242c:	18 f0       	brcs	.+6      	; 0x2434 <EF_S8_DIO_CheckPin+0x20>
	{
	    Status = -1;
    242e:	8f ef       	ldi	r24, 0xFF	; 255
    2430:	89 83       	std	Y+1, r24	; 0x01
    2432:	86 c0       	rjmp	.+268    	; 0x2540 <EF_S8_DIO_CheckPin+0x12c>
    }
	else
	{
		switch(PortName)
    2434:	8a 81       	ldd	r24, Y+2	; 0x02
    2436:	28 2f       	mov	r18, r24
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	3d 83       	std	Y+5, r19	; 0x05
    243c:	2c 83       	std	Y+4, r18	; 0x04
    243e:	8c 81       	ldd	r24, Y+4	; 0x04
    2440:	9d 81       	ldd	r25, Y+5	; 0x05
    2442:	84 34       	cpi	r24, 0x44	; 68
    2444:	91 05       	cpc	r25, r1
    2446:	09 f4       	brne	.+2      	; 0x244a <EF_S8_DIO_CheckPin+0x36>
    2448:	67 c0       	rjmp	.+206    	; 0x2518 <EF_S8_DIO_CheckPin+0x104>
    244a:	2c 81       	ldd	r18, Y+4	; 0x04
    244c:	3d 81       	ldd	r19, Y+5	; 0x05
    244e:	25 34       	cpi	r18, 0x45	; 69
    2450:	31 05       	cpc	r19, r1
    2452:	8c f4       	brge	.+34     	; 0x2476 <EF_S8_DIO_CheckPin+0x62>
    2454:	8c 81       	ldd	r24, Y+4	; 0x04
    2456:	9d 81       	ldd	r25, Y+5	; 0x05
    2458:	82 34       	cpi	r24, 0x42	; 66
    245a:	91 05       	cpc	r25, r1
    245c:	c9 f1       	breq	.+114    	; 0x24d0 <EF_S8_DIO_CheckPin+0xbc>
    245e:	2c 81       	ldd	r18, Y+4	; 0x04
    2460:	3d 81       	ldd	r19, Y+5	; 0x05
    2462:	23 34       	cpi	r18, 0x43	; 67
    2464:	31 05       	cpc	r19, r1
    2466:	0c f0       	brlt	.+2      	; 0x246a <EF_S8_DIO_CheckPin+0x56>
    2468:	45 c0       	rjmp	.+138    	; 0x24f4 <EF_S8_DIO_CheckPin+0xe0>
    246a:	8c 81       	ldd	r24, Y+4	; 0x04
    246c:	9d 81       	ldd	r25, Y+5	; 0x05
    246e:	81 34       	cpi	r24, 0x41	; 65
    2470:	91 05       	cpc	r25, r1
    2472:	e1 f0       	breq	.+56     	; 0x24ac <EF_S8_DIO_CheckPin+0x98>
    2474:	63 c0       	rjmp	.+198    	; 0x253c <EF_S8_DIO_CheckPin+0x128>
    2476:	2c 81       	ldd	r18, Y+4	; 0x04
    2478:	3d 81       	ldd	r19, Y+5	; 0x05
    247a:	22 36       	cpi	r18, 0x62	; 98
    247c:	31 05       	cpc	r19, r1
    247e:	41 f1       	breq	.+80     	; 0x24d0 <EF_S8_DIO_CheckPin+0xbc>
    2480:	8c 81       	ldd	r24, Y+4	; 0x04
    2482:	9d 81       	ldd	r25, Y+5	; 0x05
    2484:	83 36       	cpi	r24, 0x63	; 99
    2486:	91 05       	cpc	r25, r1
    2488:	34 f4       	brge	.+12     	; 0x2496 <EF_S8_DIO_CheckPin+0x82>
    248a:	2c 81       	ldd	r18, Y+4	; 0x04
    248c:	3d 81       	ldd	r19, Y+5	; 0x05
    248e:	21 36       	cpi	r18, 0x61	; 97
    2490:	31 05       	cpc	r19, r1
    2492:	61 f0       	breq	.+24     	; 0x24ac <EF_S8_DIO_CheckPin+0x98>
    2494:	53 c0       	rjmp	.+166    	; 0x253c <EF_S8_DIO_CheckPin+0x128>
    2496:	8c 81       	ldd	r24, Y+4	; 0x04
    2498:	9d 81       	ldd	r25, Y+5	; 0x05
    249a:	83 36       	cpi	r24, 0x63	; 99
    249c:	91 05       	cpc	r25, r1
    249e:	51 f1       	breq	.+84     	; 0x24f4 <EF_S8_DIO_CheckPin+0xe0>
    24a0:	2c 81       	ldd	r18, Y+4	; 0x04
    24a2:	3d 81       	ldd	r19, Y+5	; 0x05
    24a4:	24 36       	cpi	r18, 0x64	; 100
    24a6:	31 05       	cpc	r19, r1
    24a8:	b9 f1       	breq	.+110    	; 0x2518 <EF_S8_DIO_CheckPin+0x104>
    24aa:	48 c0       	rjmp	.+144    	; 0x253c <EF_S8_DIO_CheckPin+0x128>
		{
		     case 'a':
			 case 'A':
	             Status = (PINA & (1 << PinNumber));
    24ac:	e9 e3       	ldi	r30, 0x39	; 57
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	80 81       	ld	r24, Z
    24b2:	48 2f       	mov	r20, r24
    24b4:	8b 81       	ldd	r24, Y+3	; 0x03
    24b6:	28 2f       	mov	r18, r24
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	02 2e       	mov	r0, r18
    24c0:	02 c0       	rjmp	.+4      	; 0x24c6 <EF_S8_DIO_CheckPin+0xb2>
    24c2:	88 0f       	add	r24, r24
    24c4:	99 1f       	adc	r25, r25
    24c6:	0a 94       	dec	r0
    24c8:	e2 f7       	brpl	.-8      	; 0x24c2 <EF_S8_DIO_CheckPin+0xae>
    24ca:	84 23       	and	r24, r20
    24cc:	89 83       	std	Y+1, r24	; 0x01
    24ce:	38 c0       	rjmp	.+112    	; 0x2540 <EF_S8_DIO_CheckPin+0x12c>
			 break;
			 case 'b':
			 case 'B':
	             Status = (PINB & (1 << PinNumber));
    24d0:	e6 e3       	ldi	r30, 0x36	; 54
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	80 81       	ld	r24, Z
    24d6:	48 2f       	mov	r20, r24
    24d8:	8b 81       	ldd	r24, Y+3	; 0x03
    24da:	28 2f       	mov	r18, r24
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	02 2e       	mov	r0, r18
    24e4:	02 c0       	rjmp	.+4      	; 0x24ea <EF_S8_DIO_CheckPin+0xd6>
    24e6:	88 0f       	add	r24, r24
    24e8:	99 1f       	adc	r25, r25
    24ea:	0a 94       	dec	r0
    24ec:	e2 f7       	brpl	.-8      	; 0x24e6 <EF_S8_DIO_CheckPin+0xd2>
    24ee:	84 23       	and	r24, r20
    24f0:	89 83       	std	Y+1, r24	; 0x01
    24f2:	26 c0       	rjmp	.+76     	; 0x2540 <EF_S8_DIO_CheckPin+0x12c>
			 break;
			 case 'c':
			 case 'C':
	             Status = (PINC & (1 << PinNumber));
    24f4:	e3 e3       	ldi	r30, 0x33	; 51
    24f6:	f0 e0       	ldi	r31, 0x00	; 0
    24f8:	80 81       	ld	r24, Z
    24fa:	48 2f       	mov	r20, r24
    24fc:	8b 81       	ldd	r24, Y+3	; 0x03
    24fe:	28 2f       	mov	r18, r24
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	02 2e       	mov	r0, r18
    2508:	02 c0       	rjmp	.+4      	; 0x250e <EF_S8_DIO_CheckPin+0xfa>
    250a:	88 0f       	add	r24, r24
    250c:	99 1f       	adc	r25, r25
    250e:	0a 94       	dec	r0
    2510:	e2 f7       	brpl	.-8      	; 0x250a <EF_S8_DIO_CheckPin+0xf6>
    2512:	84 23       	and	r24, r20
    2514:	89 83       	std	Y+1, r24	; 0x01
    2516:	14 c0       	rjmp	.+40     	; 0x2540 <EF_S8_DIO_CheckPin+0x12c>
			 break;
			 case 'd':
			 case 'D':
	             Status = (PIND & (1 << PinNumber));
    2518:	e0 e3       	ldi	r30, 0x30	; 48
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	80 81       	ld	r24, Z
    251e:	48 2f       	mov	r20, r24
    2520:	8b 81       	ldd	r24, Y+3	; 0x03
    2522:	28 2f       	mov	r18, r24
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	81 e0       	ldi	r24, 0x01	; 1
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	02 2e       	mov	r0, r18
    252c:	02 c0       	rjmp	.+4      	; 0x2532 <EF_S8_DIO_CheckPin+0x11e>
    252e:	88 0f       	add	r24, r24
    2530:	99 1f       	adc	r25, r25
    2532:	0a 94       	dec	r0
    2534:	e2 f7       	brpl	.-8      	; 0x252e <EF_S8_DIO_CheckPin+0x11a>
    2536:	84 23       	and	r24, r20
    2538:	89 83       	std	Y+1, r24	; 0x01
    253a:	02 c0       	rjmp	.+4      	; 0x2540 <EF_S8_DIO_CheckPin+0x12c>
			 break;
			 default:
	             Status = -1;
    253c:	8f ef       	ldi	r24, 0xFF	; 255
    253e:	89 83       	std	Y+1, r24	; 0x01
	    }
    }
    return(Status);
    2540:	89 81       	ldd	r24, Y+1	; 0x01
}
    2542:	0f 90       	pop	r0
    2544:	0f 90       	pop	r0
    2546:	0f 90       	pop	r0
    2548:	0f 90       	pop	r0
    254a:	0f 90       	pop	r0
    254c:	cf 91       	pop	r28
    254e:	df 91       	pop	r29
    2550:	08 95       	ret

00002552 <EF_void_LCD_init>:
 * PARAMETERS  : Void.
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_init()
{
    2552:	df 93       	push	r29
    2554:	cf 93       	push	r28
    2556:	cd b7       	in	r28, 0x3d	; 61
    2558:	de b7       	in	r29, 0x3e	; 62
    255a:	6c 97       	sbiw	r28, 0x1c	; 28
    255c:	0f b6       	in	r0, 0x3f	; 63
    255e:	f8 94       	cli
    2560:	de bf       	out	0x3e, r29	; 62
    2562:	0f be       	out	0x3f, r0	; 63
    2564:	cd bf       	out	0x3d, r28	; 61
	/* Init Control PIN as Output */
	LCD_CNTRL_DDR |= (1 << LCD_RS_PIN | 1 << LCD_RW_PIN | 1 << LCD_ENABLE_PIN);
    2566:	a4 e3       	ldi	r26, 0x34	; 52
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	e4 e3       	ldi	r30, 0x34	; 52
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	80 6e       	ori	r24, 0xE0	; 224
    2572:	8c 93       	st	X, r24
	LCD_CNTRL_PORT = 0x00;
    2574:	e5 e3       	ldi	r30, 0x35	; 53
    2576:	f0 e0       	ldi	r31, 0x00	; 0
    2578:	10 82       	st	Z, r1

	/* Init Data PIN as Output 4,5,6,7 */
	LCD_DATA_DDR  |= 0xF0;
    257a:	a7 e3       	ldi	r26, 0x37	; 55
    257c:	b0 e0       	ldi	r27, 0x00	; 0
    257e:	e7 e3       	ldi	r30, 0x37	; 55
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	80 81       	ld	r24, Z
    2584:	80 6f       	ori	r24, 0xF0	; 240
    2586:	8c 93       	st	X, r24
	LCD_DATA_PORT |= 0x00;
    2588:	a8 e3       	ldi	r26, 0x38	; 56
    258a:	b0 e0       	ldi	r27, 0x00	; 0
    258c:	e8 e3       	ldi	r30, 0x38	; 56
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	80 81       	ld	r24, Z
    2592:	8c 93       	st	X, r24
    2594:	80 e0       	ldi	r24, 0x00	; 0
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	a0 e2       	ldi	r26, 0x20	; 32
    259a:	b1 e4       	ldi	r27, 0x41	; 65
    259c:	89 8f       	std	Y+25, r24	; 0x19
    259e:	9a 8f       	std	Y+26, r25	; 0x1a
    25a0:	ab 8f       	std	Y+27, r26	; 0x1b
    25a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25a4:	69 8d       	ldd	r22, Y+25	; 0x19
    25a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	4a e7       	ldi	r20, 0x7A	; 122
    25b2:	53 e4       	ldi	r21, 0x43	; 67
    25b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	8d 8b       	std	Y+21, r24	; 0x15
    25be:	9e 8b       	std	Y+22, r25	; 0x16
    25c0:	af 8b       	std	Y+23, r26	; 0x17
    25c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25c4:	6d 89       	ldd	r22, Y+21	; 0x15
    25c6:	7e 89       	ldd	r23, Y+22	; 0x16
    25c8:	8f 89       	ldd	r24, Y+23	; 0x17
    25ca:	98 8d       	ldd	r25, Y+24	; 0x18
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	40 e8       	ldi	r20, 0x80	; 128
    25d2:	5f e3       	ldi	r21, 0x3F	; 63
    25d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25d8:	88 23       	and	r24, r24
    25da:	2c f4       	brge	.+10     	; 0x25e6 <EF_void_LCD_init+0x94>
		__ticks = 1;
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	9c 8b       	std	Y+20, r25	; 0x14
    25e2:	8b 8b       	std	Y+19, r24	; 0x13
    25e4:	3f c0       	rjmp	.+126    	; 0x2664 <EF_void_LCD_init+0x112>
	else if (__tmp > 65535)
    25e6:	6d 89       	ldd	r22, Y+21	; 0x15
    25e8:	7e 89       	ldd	r23, Y+22	; 0x16
    25ea:	8f 89       	ldd	r24, Y+23	; 0x17
    25ec:	98 8d       	ldd	r25, Y+24	; 0x18
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	3f ef       	ldi	r19, 0xFF	; 255
    25f2:	4f e7       	ldi	r20, 0x7F	; 127
    25f4:	57 e4       	ldi	r21, 0x47	; 71
    25f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25fa:	18 16       	cp	r1, r24
    25fc:	4c f5       	brge	.+82     	; 0x2650 <EF_void_LCD_init+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25fe:	69 8d       	ldd	r22, Y+25	; 0x19
    2600:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2602:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2604:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2606:	20 e0       	ldi	r18, 0x00	; 0
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	40 e2       	ldi	r20, 0x20	; 32
    260c:	51 e4       	ldi	r21, 0x41	; 65
    260e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	bc 01       	movw	r22, r24
    2618:	cd 01       	movw	r24, r26
    261a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261e:	dc 01       	movw	r26, r24
    2620:	cb 01       	movw	r24, r22
    2622:	9c 8b       	std	Y+20, r25	; 0x14
    2624:	8b 8b       	std	Y+19, r24	; 0x13
    2626:	0f c0       	rjmp	.+30     	; 0x2646 <EF_void_LCD_init+0xf4>
    2628:	89 e1       	ldi	r24, 0x19	; 25
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	9a 8b       	std	Y+18, r25	; 0x12
    262e:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2630:	89 89       	ldd	r24, Y+17	; 0x11
    2632:	9a 89       	ldd	r25, Y+18	; 0x12
    2634:	01 97       	sbiw	r24, 0x01	; 1
    2636:	f1 f7       	brne	.-4      	; 0x2634 <EF_void_LCD_init+0xe2>
    2638:	9a 8b       	std	Y+18, r25	; 0x12
    263a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    263c:	8b 89       	ldd	r24, Y+19	; 0x13
    263e:	9c 89       	ldd	r25, Y+20	; 0x14
    2640:	01 97       	sbiw	r24, 0x01	; 1
    2642:	9c 8b       	std	Y+20, r25	; 0x14
    2644:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2646:	8b 89       	ldd	r24, Y+19	; 0x13
    2648:	9c 89       	ldd	r25, Y+20	; 0x14
    264a:	00 97       	sbiw	r24, 0x00	; 0
    264c:	69 f7       	brne	.-38     	; 0x2628 <EF_void_LCD_init+0xd6>
    264e:	14 c0       	rjmp	.+40     	; 0x2678 <EF_void_LCD_init+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2650:	6d 89       	ldd	r22, Y+21	; 0x15
    2652:	7e 89       	ldd	r23, Y+22	; 0x16
    2654:	8f 89       	ldd	r24, Y+23	; 0x17
    2656:	98 8d       	ldd	r25, Y+24	; 0x18
    2658:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	9c 8b       	std	Y+20, r25	; 0x14
    2662:	8b 8b       	std	Y+19, r24	; 0x13
    2664:	8b 89       	ldd	r24, Y+19	; 0x13
    2666:	9c 89       	ldd	r25, Y+20	; 0x14
    2668:	98 8b       	std	Y+16, r25	; 0x10
    266a:	8f 87       	std	Y+15, r24	; 0x0f
    266c:	8f 85       	ldd	r24, Y+15	; 0x0f
    266e:	98 89       	ldd	r25, Y+16	; 0x10
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	f1 f7       	brne	.-4      	; 0x2670 <EF_void_LCD_init+0x11e>
    2674:	98 8b       	std	Y+16, r25	; 0x10
    2676:	8f 87       	std	Y+15, r24	; 0x0f
	/* after power up , delay 10ms should be existed */
	_delay_ms(10);
	EF_void_LCD_send_command(0x28);            /* Command ..0x28---> 4-bit mode - 2 line - 5x7 font */
    2678:	88 e2       	ldi	r24, 0x28	; 40
    267a:	0e 94 c3 13 	call	0x2786	; 0x2786 <EF_void_LCD_send_command>
	EF_void_LCD_send_command(0x0C);            /* Command ..0x0C---> Display no cursor - no blink */
    267e:	8c e0       	ldi	r24, 0x0C	; 12
    2680:	0e 94 c3 13 	call	0x2786	; 0x2786 <EF_void_LCD_send_command>
	EF_void_LCD_send_command(0x06);            /* Command ..0x06---> Automatic Increment - No Display shift */
    2684:	86 e0       	ldi	r24, 0x06	; 6
    2686:	0e 94 c3 13 	call	0x2786	; 0x2786 <EF_void_LCD_send_command>
	EF_void_LCD_send_command(0x80);            /* Command ..0x80---> Address DDRAM with 0 offset 80h */
    268a:	80 e8       	ldi	r24, 0x80	; 128
    268c:	0e 94 c3 13 	call	0x2786	; 0x2786 <EF_void_LCD_send_command>
    2690:	80 e0       	ldi	r24, 0x00	; 0
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	a0 ea       	ldi	r26, 0xA0	; 160
    2696:	b1 e4       	ldi	r27, 0x41	; 65
    2698:	8b 87       	std	Y+11, r24	; 0x0b
    269a:	9c 87       	std	Y+12, r25	; 0x0c
    269c:	ad 87       	std	Y+13, r26	; 0x0d
    269e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    26a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    26a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    26a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	4a e7       	ldi	r20, 0x7A	; 122
    26ae:	53 e4       	ldi	r21, 0x43	; 67
    26b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	8f 83       	std	Y+7, r24	; 0x07
    26ba:	98 87       	std	Y+8, r25	; 0x08
    26bc:	a9 87       	std	Y+9, r26	; 0x09
    26be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26c0:	6f 81       	ldd	r22, Y+7	; 0x07
    26c2:	78 85       	ldd	r23, Y+8	; 0x08
    26c4:	89 85       	ldd	r24, Y+9	; 0x09
    26c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	40 e8       	ldi	r20, 0x80	; 128
    26ce:	5f e3       	ldi	r21, 0x3F	; 63
    26d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26d4:	88 23       	and	r24, r24
    26d6:	2c f4       	brge	.+10     	; 0x26e2 <EF_void_LCD_init+0x190>
		__ticks = 1;
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	9e 83       	std	Y+6, r25	; 0x06
    26de:	8d 83       	std	Y+5, r24	; 0x05
    26e0:	3f c0       	rjmp	.+126    	; 0x2760 <EF_void_LCD_init+0x20e>
	else if (__tmp > 65535)
    26e2:	6f 81       	ldd	r22, Y+7	; 0x07
    26e4:	78 85       	ldd	r23, Y+8	; 0x08
    26e6:	89 85       	ldd	r24, Y+9	; 0x09
    26e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	3f ef       	ldi	r19, 0xFF	; 255
    26ee:	4f e7       	ldi	r20, 0x7F	; 127
    26f0:	57 e4       	ldi	r21, 0x47	; 71
    26f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26f6:	18 16       	cp	r1, r24
    26f8:	4c f5       	brge	.+82     	; 0x274c <EF_void_LCD_init+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    26fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    26fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2700:	9e 85       	ldd	r25, Y+14	; 0x0e
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	40 e2       	ldi	r20, 0x20	; 32
    2708:	51 e4       	ldi	r21, 0x41	; 65
    270a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270e:	dc 01       	movw	r26, r24
    2710:	cb 01       	movw	r24, r22
    2712:	bc 01       	movw	r22, r24
    2714:	cd 01       	movw	r24, r26
    2716:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	9e 83       	std	Y+6, r25	; 0x06
    2720:	8d 83       	std	Y+5, r24	; 0x05
    2722:	0f c0       	rjmp	.+30     	; 0x2742 <EF_void_LCD_init+0x1f0>
    2724:	89 e1       	ldi	r24, 0x19	; 25
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	9c 83       	std	Y+4, r25	; 0x04
    272a:	8b 83       	std	Y+3, r24	; 0x03
    272c:	8b 81       	ldd	r24, Y+3	; 0x03
    272e:	9c 81       	ldd	r25, Y+4	; 0x04
    2730:	01 97       	sbiw	r24, 0x01	; 1
    2732:	f1 f7       	brne	.-4      	; 0x2730 <EF_void_LCD_init+0x1de>
    2734:	9c 83       	std	Y+4, r25	; 0x04
    2736:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2738:	8d 81       	ldd	r24, Y+5	; 0x05
    273a:	9e 81       	ldd	r25, Y+6	; 0x06
    273c:	01 97       	sbiw	r24, 0x01	; 1
    273e:	9e 83       	std	Y+6, r25	; 0x06
    2740:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2742:	8d 81       	ldd	r24, Y+5	; 0x05
    2744:	9e 81       	ldd	r25, Y+6	; 0x06
    2746:	00 97       	sbiw	r24, 0x00	; 0
    2748:	69 f7       	brne	.-38     	; 0x2724 <EF_void_LCD_init+0x1d2>
    274a:	14 c0       	rjmp	.+40     	; 0x2774 <EF_void_LCD_init+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    274c:	6f 81       	ldd	r22, Y+7	; 0x07
    274e:	78 85       	ldd	r23, Y+8	; 0x08
    2750:	89 85       	ldd	r24, Y+9	; 0x09
    2752:	9a 85       	ldd	r25, Y+10	; 0x0a
    2754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2758:	dc 01       	movw	r26, r24
    275a:	cb 01       	movw	r24, r22
    275c:	9e 83       	std	Y+6, r25	; 0x06
    275e:	8d 83       	std	Y+5, r24	; 0x05
    2760:	8d 81       	ldd	r24, Y+5	; 0x05
    2762:	9e 81       	ldd	r25, Y+6	; 0x06
    2764:	9a 83       	std	Y+2, r25	; 0x02
    2766:	89 83       	std	Y+1, r24	; 0x01
    2768:	89 81       	ldd	r24, Y+1	; 0x01
    276a:	9a 81       	ldd	r25, Y+2	; 0x02
    276c:	01 97       	sbiw	r24, 0x01	; 1
    276e:	f1 f7       	brne	.-4      	; 0x276c <EF_void_LCD_init+0x21a>
    2770:	9a 83       	std	Y+2, r25	; 0x02
    2772:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    2774:	6c 96       	adiw	r28, 0x1c	; 28
    2776:	0f b6       	in	r0, 0x3f	; 63
    2778:	f8 94       	cli
    277a:	de bf       	out	0x3e, r29	; 62
    277c:	0f be       	out	0x3f, r0	; 63
    277e:	cd bf       	out	0x3d, r28	; 61
    2780:	cf 91       	pop	r28
    2782:	df 91       	pop	r29
    2784:	08 95       	ret

00002786 <EF_void_LCD_send_command>:
 * PARAMETERS  : u8 cmnd:  Command User want to send.
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_send_command(u8 cmnd)
{
    2786:	0f 93       	push	r16
    2788:	1f 93       	push	r17
    278a:	df 93       	push	r29
    278c:	cf 93       	push	r28
    278e:	cd b7       	in	r28, 0x3d	; 61
    2790:	de b7       	in	r29, 0x3e	; 62
    2792:	c9 54       	subi	r28, 0x49	; 73
    2794:	d0 40       	sbci	r29, 0x00	; 0
    2796:	0f b6       	in	r0, 0x3f	; 63
    2798:	f8 94       	cli
    279a:	de bf       	out	0x3e, r29	; 62
    279c:	0f be       	out	0x3f, r0	; 63
    279e:	cd bf       	out	0x3d, r28	; 61
    27a0:	fe 01       	movw	r30, r28
    27a2:	e7 5b       	subi	r30, 0xB7	; 183
    27a4:	ff 4f       	sbci	r31, 0xFF	; 255
    27a6:	80 83       	st	Z, r24
	/*RS and RW will be LOW */
	LCD_CNTRL_PORT &= ~(1<<LCD_RW_PIN);
    27a8:	a5 e3       	ldi	r26, 0x35	; 53
    27aa:	b0 e0       	ldi	r27, 0x00	; 0
    27ac:	e5 e3       	ldi	r30, 0x35	; 53
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	80 81       	ld	r24, Z
    27b2:	8f 7b       	andi	r24, 0xBF	; 191
    27b4:	8c 93       	st	X, r24
	LCD_CNTRL_PORT &= ~(1<<LCD_RS_PIN);
    27b6:	a5 e3       	ldi	r26, 0x35	; 53
    27b8:	b0 e0       	ldi	r27, 0x00	; 0
    27ba:	e5 e3       	ldi	r30, 0x35	; 53
    27bc:	f0 e0       	ldi	r31, 0x00	; 0
    27be:	80 81       	ld	r24, Z
    27c0:	8f 7d       	andi	r24, 0xDF	; 223
    27c2:	8c 93       	st	X, r24
	/*
	 * output high nibble first , "Generic method", attach data by bit
	 * first: put 0 in each pin then if the corresponding bit =1 , put 1
	 * -------- output high nibble first ---------*
	 * * */
	LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
    27c4:	a8 e3       	ldi	r26, 0x38	; 56
    27c6:	b0 e0       	ldi	r27, 0x00	; 0
    27c8:	e8 e3       	ldi	r30, 0x38	; 56
    27ca:	f0 e0       	ldi	r31, 0x00	; 0
    27cc:	80 81       	ld	r24, Z
    27ce:	8f 77       	andi	r24, 0x7F	; 127
    27d0:	8c 93       	st	X, r24
	LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
    27d2:	a8 e3       	ldi	r26, 0x38	; 56
    27d4:	b0 e0       	ldi	r27, 0x00	; 0
    27d6:	e8 e3       	ldi	r30, 0x38	; 56
    27d8:	f0 e0       	ldi	r31, 0x00	; 0
    27da:	80 81       	ld	r24, Z
    27dc:	8f 7b       	andi	r24, 0xBF	; 191
    27de:	8c 93       	st	X, r24
	LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
    27e0:	a8 e3       	ldi	r26, 0x38	; 56
    27e2:	b0 e0       	ldi	r27, 0x00	; 0
    27e4:	e8 e3       	ldi	r30, 0x38	; 56
    27e6:	f0 e0       	ldi	r31, 0x00	; 0
    27e8:	80 81       	ld	r24, Z
    27ea:	8f 7d       	andi	r24, 0xDF	; 223
    27ec:	8c 93       	st	X, r24
	LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
    27ee:	a8 e3       	ldi	r26, 0x38	; 56
    27f0:	b0 e0       	ldi	r27, 0x00	; 0
    27f2:	e8 e3       	ldi	r30, 0x38	; 56
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	80 81       	ld	r24, Z
    27f8:	8f 7e       	andi	r24, 0xEF	; 239
    27fa:	8c 93       	st	X, r24
	if(cmnd & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    27fc:	fe 01       	movw	r30, r28
    27fe:	e7 5b       	subi	r30, 0xB7	; 183
    2800:	ff 4f       	sbci	r31, 0xFF	; 255
    2802:	80 81       	ld	r24, Z
    2804:	88 23       	and	r24, r24
    2806:	3c f4       	brge	.+14     	; 0x2816 <EF_void_LCD_send_command+0x90>
    2808:	a8 e3       	ldi	r26, 0x38	; 56
    280a:	b0 e0       	ldi	r27, 0x00	; 0
    280c:	e8 e3       	ldi	r30, 0x38	; 56
    280e:	f0 e0       	ldi	r31, 0x00	; 0
    2810:	80 81       	ld	r24, Z
    2812:	80 68       	ori	r24, 0x80	; 128
    2814:	8c 93       	st	X, r24
	if(cmnd & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
    2816:	fe 01       	movw	r30, r28
    2818:	e7 5b       	subi	r30, 0xB7	; 183
    281a:	ff 4f       	sbci	r31, 0xFF	; 255
    281c:	80 81       	ld	r24, Z
    281e:	88 2f       	mov	r24, r24
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	80 74       	andi	r24, 0x40	; 64
    2824:	90 70       	andi	r25, 0x00	; 0
    2826:	00 97       	sbiw	r24, 0x00	; 0
    2828:	39 f0       	breq	.+14     	; 0x2838 <EF_void_LCD_send_command+0xb2>
    282a:	a8 e3       	ldi	r26, 0x38	; 56
    282c:	b0 e0       	ldi	r27, 0x00	; 0
    282e:	e8 e3       	ldi	r30, 0x38	; 56
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	80 81       	ld	r24, Z
    2834:	80 64       	ori	r24, 0x40	; 64
    2836:	8c 93       	st	X, r24
	if(cmnd & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    2838:	fe 01       	movw	r30, r28
    283a:	e7 5b       	subi	r30, 0xB7	; 183
    283c:	ff 4f       	sbci	r31, 0xFF	; 255
    283e:	80 81       	ld	r24, Z
    2840:	88 2f       	mov	r24, r24
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	80 72       	andi	r24, 0x20	; 32
    2846:	90 70       	andi	r25, 0x00	; 0
    2848:	00 97       	sbiw	r24, 0x00	; 0
    284a:	39 f0       	breq	.+14     	; 0x285a <EF_void_LCD_send_command+0xd4>
    284c:	a8 e3       	ldi	r26, 0x38	; 56
    284e:	b0 e0       	ldi	r27, 0x00	; 0
    2850:	e8 e3       	ldi	r30, 0x38	; 56
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	80 81       	ld	r24, Z
    2856:	80 62       	ori	r24, 0x20	; 32
    2858:	8c 93       	st	X, r24
	if(cmnd & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
    285a:	fe 01       	movw	r30, r28
    285c:	e7 5b       	subi	r30, 0xB7	; 183
    285e:	ff 4f       	sbci	r31, 0xFF	; 255
    2860:	80 81       	ld	r24, Z
    2862:	88 2f       	mov	r24, r24
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	80 71       	andi	r24, 0x10	; 16
    2868:	90 70       	andi	r25, 0x00	; 0
    286a:	00 97       	sbiw	r24, 0x00	; 0
    286c:	39 f0       	breq	.+14     	; 0x287c <EF_void_LCD_send_command+0xf6>
    286e:	a8 e3       	ldi	r26, 0x38	; 56
    2870:	b0 e0       	ldi	r27, 0x00	; 0
    2872:	e8 e3       	ldi	r30, 0x38	; 56
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	80 81       	ld	r24, Z
    2878:	80 61       	ori	r24, 0x10	; 16
    287a:	8c 93       	st	X, r24

	/* make Enable High to low with delay to enable the internal latch at the LCD*/
	LCD_CNTRL_PORT |= (1<<LCD_ENABLE_PIN);
    287c:	a5 e3       	ldi	r26, 0x35	; 53
    287e:	b0 e0       	ldi	r27, 0x00	; 0
    2880:	e5 e3       	ldi	r30, 0x35	; 53
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	80 81       	ld	r24, Z
    2886:	80 68       	ori	r24, 0x80	; 128
    2888:	8c 93       	st	X, r24
    288a:	fe 01       	movw	r30, r28
    288c:	eb 5b       	subi	r30, 0xBB	; 187
    288e:	ff 4f       	sbci	r31, 0xFF	; 255
    2890:	80 e0       	ldi	r24, 0x00	; 0
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	a0 e0       	ldi	r26, 0x00	; 0
    2896:	b0 e4       	ldi	r27, 0x40	; 64
    2898:	80 83       	st	Z, r24
    289a:	91 83       	std	Z+1, r25	; 0x01
    289c:	a2 83       	std	Z+2, r26	; 0x02
    289e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    28a0:	8e 01       	movw	r16, r28
    28a2:	0f 5b       	subi	r16, 0xBF	; 191
    28a4:	1f 4f       	sbci	r17, 0xFF	; 255
    28a6:	fe 01       	movw	r30, r28
    28a8:	eb 5b       	subi	r30, 0xBB	; 187
    28aa:	ff 4f       	sbci	r31, 0xFF	; 255
    28ac:	60 81       	ld	r22, Z
    28ae:	71 81       	ldd	r23, Z+1	; 0x01
    28b0:	82 81       	ldd	r24, Z+2	; 0x02
    28b2:	93 81       	ldd	r25, Z+3	; 0x03
    28b4:	2b ea       	ldi	r18, 0xAB	; 171
    28b6:	3a ea       	ldi	r19, 0xAA	; 170
    28b8:	4a ea       	ldi	r20, 0xAA	; 170
    28ba:	5e e3       	ldi	r21, 0x3E	; 62
    28bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	f8 01       	movw	r30, r16
    28c6:	80 83       	st	Z, r24
    28c8:	91 83       	std	Z+1, r25	; 0x01
    28ca:	a2 83       	std	Z+2, r26	; 0x02
    28cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28ce:	fe 01       	movw	r30, r28
    28d0:	ef 5b       	subi	r30, 0xBF	; 191
    28d2:	ff 4f       	sbci	r31, 0xFF	; 255
    28d4:	60 81       	ld	r22, Z
    28d6:	71 81       	ldd	r23, Z+1	; 0x01
    28d8:	82 81       	ldd	r24, Z+2	; 0x02
    28da:	93 81       	ldd	r25, Z+3	; 0x03
    28dc:	20 e0       	ldi	r18, 0x00	; 0
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	40 e8       	ldi	r20, 0x80	; 128
    28e2:	5f e3       	ldi	r21, 0x3F	; 63
    28e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28e8:	88 23       	and	r24, r24
    28ea:	34 f4       	brge	.+12     	; 0x28f8 <EF_void_LCD_send_command+0x172>
		__ticks = 1;
    28ec:	81 e0       	ldi	r24, 0x01	; 1
    28ee:	fe 01       	movw	r30, r28
    28f0:	e0 5c       	subi	r30, 0xC0	; 192
    28f2:	ff 4f       	sbci	r31, 0xFF	; 255
    28f4:	80 83       	st	Z, r24
    28f6:	9d c0       	rjmp	.+314    	; 0x2a32 <EF_void_LCD_send_command+0x2ac>
	else if (__tmp > 255)
    28f8:	fe 01       	movw	r30, r28
    28fa:	ef 5b       	subi	r30, 0xBF	; 191
    28fc:	ff 4f       	sbci	r31, 0xFF	; 255
    28fe:	60 81       	ld	r22, Z
    2900:	71 81       	ldd	r23, Z+1	; 0x01
    2902:	82 81       	ldd	r24, Z+2	; 0x02
    2904:	93 81       	ldd	r25, Z+3	; 0x03
    2906:	20 e0       	ldi	r18, 0x00	; 0
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	4f e7       	ldi	r20, 0x7F	; 127
    290c:	53 e4       	ldi	r21, 0x43	; 67
    290e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2912:	18 16       	cp	r1, r24
    2914:	0c f0       	brlt	.+2      	; 0x2918 <EF_void_LCD_send_command+0x192>
    2916:	7e c0       	rjmp	.+252    	; 0x2a14 <EF_void_LCD_send_command+0x28e>
	{
		_delay_ms(__us / 1000.0);
    2918:	fe 01       	movw	r30, r28
    291a:	eb 5b       	subi	r30, 0xBB	; 187
    291c:	ff 4f       	sbci	r31, 0xFF	; 255
    291e:	60 81       	ld	r22, Z
    2920:	71 81       	ldd	r23, Z+1	; 0x01
    2922:	82 81       	ldd	r24, Z+2	; 0x02
    2924:	93 81       	ldd	r25, Z+3	; 0x03
    2926:	20 e0       	ldi	r18, 0x00	; 0
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	4a e7       	ldi	r20, 0x7A	; 122
    292c:	54 e4       	ldi	r21, 0x44	; 68
    292e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2932:	dc 01       	movw	r26, r24
    2934:	cb 01       	movw	r24, r22
    2936:	8c af       	std	Y+60, r24	; 0x3c
    2938:	9d af       	std	Y+61, r25	; 0x3d
    293a:	ae af       	std	Y+62, r26	; 0x3e
    293c:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    293e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2940:	7d ad       	ldd	r23, Y+61	; 0x3d
    2942:	8e ad       	ldd	r24, Y+62	; 0x3e
    2944:	9f ad       	ldd	r25, Y+63	; 0x3f
    2946:	20 e0       	ldi	r18, 0x00	; 0
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	4a e7       	ldi	r20, 0x7A	; 122
    294c:	53 e4       	ldi	r21, 0x43	; 67
    294e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2952:	dc 01       	movw	r26, r24
    2954:	cb 01       	movw	r24, r22
    2956:	88 af       	std	Y+56, r24	; 0x38
    2958:	99 af       	std	Y+57, r25	; 0x39
    295a:	aa af       	std	Y+58, r26	; 0x3a
    295c:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    295e:	68 ad       	ldd	r22, Y+56	; 0x38
    2960:	79 ad       	ldd	r23, Y+57	; 0x39
    2962:	8a ad       	ldd	r24, Y+58	; 0x3a
    2964:	9b ad       	ldd	r25, Y+59	; 0x3b
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	40 e8       	ldi	r20, 0x80	; 128
    296c:	5f e3       	ldi	r21, 0x3F	; 63
    296e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2972:	88 23       	and	r24, r24
    2974:	2c f4       	brge	.+10     	; 0x2980 <EF_void_LCD_send_command+0x1fa>
		__ticks = 1;
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	9f ab       	std	Y+55, r25	; 0x37
    297c:	8e ab       	std	Y+54, r24	; 0x36
    297e:	3f c0       	rjmp	.+126    	; 0x29fe <EF_void_LCD_send_command+0x278>
	else if (__tmp > 65535)
    2980:	68 ad       	ldd	r22, Y+56	; 0x38
    2982:	79 ad       	ldd	r23, Y+57	; 0x39
    2984:	8a ad       	ldd	r24, Y+58	; 0x3a
    2986:	9b ad       	ldd	r25, Y+59	; 0x3b
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	3f ef       	ldi	r19, 0xFF	; 255
    298c:	4f e7       	ldi	r20, 0x7F	; 127
    298e:	57 e4       	ldi	r21, 0x47	; 71
    2990:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2994:	18 16       	cp	r1, r24
    2996:	4c f5       	brge	.+82     	; 0x29ea <EF_void_LCD_send_command+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2998:	6c ad       	ldd	r22, Y+60	; 0x3c
    299a:	7d ad       	ldd	r23, Y+61	; 0x3d
    299c:	8e ad       	ldd	r24, Y+62	; 0x3e
    299e:	9f ad       	ldd	r25, Y+63	; 0x3f
    29a0:	20 e0       	ldi	r18, 0x00	; 0
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	40 e2       	ldi	r20, 0x20	; 32
    29a6:	51 e4       	ldi	r21, 0x41	; 65
    29a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ac:	dc 01       	movw	r26, r24
    29ae:	cb 01       	movw	r24, r22
    29b0:	bc 01       	movw	r22, r24
    29b2:	cd 01       	movw	r24, r26
    29b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b8:	dc 01       	movw	r26, r24
    29ba:	cb 01       	movw	r24, r22
    29bc:	9f ab       	std	Y+55, r25	; 0x37
    29be:	8e ab       	std	Y+54, r24	; 0x36
    29c0:	0f c0       	rjmp	.+30     	; 0x29e0 <EF_void_LCD_send_command+0x25a>
    29c2:	89 e1       	ldi	r24, 0x19	; 25
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	9d ab       	std	Y+53, r25	; 0x35
    29c8:	8c ab       	std	Y+52, r24	; 0x34
    29ca:	8c a9       	ldd	r24, Y+52	; 0x34
    29cc:	9d a9       	ldd	r25, Y+53	; 0x35
    29ce:	01 97       	sbiw	r24, 0x01	; 1
    29d0:	f1 f7       	brne	.-4      	; 0x29ce <EF_void_LCD_send_command+0x248>
    29d2:	9d ab       	std	Y+53, r25	; 0x35
    29d4:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29d6:	8e a9       	ldd	r24, Y+54	; 0x36
    29d8:	9f a9       	ldd	r25, Y+55	; 0x37
    29da:	01 97       	sbiw	r24, 0x01	; 1
    29dc:	9f ab       	std	Y+55, r25	; 0x37
    29de:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e0:	8e a9       	ldd	r24, Y+54	; 0x36
    29e2:	9f a9       	ldd	r25, Y+55	; 0x37
    29e4:	00 97       	sbiw	r24, 0x00	; 0
    29e6:	69 f7       	brne	.-38     	; 0x29c2 <EF_void_LCD_send_command+0x23c>
    29e8:	2d c0       	rjmp	.+90     	; 0x2a44 <EF_void_LCD_send_command+0x2be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ea:	68 ad       	ldd	r22, Y+56	; 0x38
    29ec:	79 ad       	ldd	r23, Y+57	; 0x39
    29ee:	8a ad       	ldd	r24, Y+58	; 0x3a
    29f0:	9b ad       	ldd	r25, Y+59	; 0x3b
    29f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	9f ab       	std	Y+55, r25	; 0x37
    29fc:	8e ab       	std	Y+54, r24	; 0x36
    29fe:	8e a9       	ldd	r24, Y+54	; 0x36
    2a00:	9f a9       	ldd	r25, Y+55	; 0x37
    2a02:	9b ab       	std	Y+51, r25	; 0x33
    2a04:	8a ab       	std	Y+50, r24	; 0x32
    2a06:	8a a9       	ldd	r24, Y+50	; 0x32
    2a08:	9b a9       	ldd	r25, Y+51	; 0x33
    2a0a:	01 97       	sbiw	r24, 0x01	; 1
    2a0c:	f1 f7       	brne	.-4      	; 0x2a0a <EF_void_LCD_send_command+0x284>
    2a0e:	9b ab       	std	Y+51, r25	; 0x33
    2a10:	8a ab       	std	Y+50, r24	; 0x32
    2a12:	18 c0       	rjmp	.+48     	; 0x2a44 <EF_void_LCD_send_command+0x2be>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a14:	fe 01       	movw	r30, r28
    2a16:	ef 5b       	subi	r30, 0xBF	; 191
    2a18:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1a:	60 81       	ld	r22, Z
    2a1c:	71 81       	ldd	r23, Z+1	; 0x01
    2a1e:	82 81       	ldd	r24, Z+2	; 0x02
    2a20:	93 81       	ldd	r25, Z+3	; 0x03
    2a22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a26:	dc 01       	movw	r26, r24
    2a28:	cb 01       	movw	r24, r22
    2a2a:	fe 01       	movw	r30, r28
    2a2c:	e0 5c       	subi	r30, 0xC0	; 192
    2a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a30:	80 83       	st	Z, r24
    2a32:	fe 01       	movw	r30, r28
    2a34:	e0 5c       	subi	r30, 0xC0	; 192
    2a36:	ff 4f       	sbci	r31, 0xFF	; 255
    2a38:	80 81       	ld	r24, Z
    2a3a:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a3c:	89 a9       	ldd	r24, Y+49	; 0x31
    2a3e:	8a 95       	dec	r24
    2a40:	f1 f7       	brne	.-4      	; 0x2a3e <EF_void_LCD_send_command+0x2b8>
    2a42:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(2);
	LCD_CNTRL_PORT &= ~(1<<LCD_ENABLE_PIN);
    2a44:	a5 e3       	ldi	r26, 0x35	; 53
    2a46:	b0 e0       	ldi	r27, 0x00	; 0
    2a48:	e5 e3       	ldi	r30, 0x35	; 53
    2a4a:	f0 e0       	ldi	r31, 0x00	; 0
    2a4c:	80 81       	ld	r24, Z
    2a4e:	8f 77       	andi	r24, 0x7F	; 127
    2a50:	8c 93       	st	X, r24

	/* output low nibble */
	LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
    2a52:	a8 e3       	ldi	r26, 0x38	; 56
    2a54:	b0 e0       	ldi	r27, 0x00	; 0
    2a56:	e8 e3       	ldi	r30, 0x38	; 56
    2a58:	f0 e0       	ldi	r31, 0x00	; 0
    2a5a:	80 81       	ld	r24, Z
    2a5c:	8f 77       	andi	r24, 0x7F	; 127
    2a5e:	8c 93       	st	X, r24
	LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
    2a60:	a8 e3       	ldi	r26, 0x38	; 56
    2a62:	b0 e0       	ldi	r27, 0x00	; 0
    2a64:	e8 e3       	ldi	r30, 0x38	; 56
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	80 81       	ld	r24, Z
    2a6a:	8f 7b       	andi	r24, 0xBF	; 191
    2a6c:	8c 93       	st	X, r24
	LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
    2a6e:	a8 e3       	ldi	r26, 0x38	; 56
    2a70:	b0 e0       	ldi	r27, 0x00	; 0
    2a72:	e8 e3       	ldi	r30, 0x38	; 56
    2a74:	f0 e0       	ldi	r31, 0x00	; 0
    2a76:	80 81       	ld	r24, Z
    2a78:	8f 7d       	andi	r24, 0xDF	; 223
    2a7a:	8c 93       	st	X, r24
	LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
    2a7c:	a8 e3       	ldi	r26, 0x38	; 56
    2a7e:	b0 e0       	ldi	r27, 0x00	; 0
    2a80:	e8 e3       	ldi	r30, 0x38	; 56
    2a82:	f0 e0       	ldi	r31, 0x00	; 0
    2a84:	80 81       	ld	r24, Z
    2a86:	8f 7e       	andi	r24, 0xEF	; 239
    2a88:	8c 93       	st	X, r24
	if(cmnd & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    2a8a:	fe 01       	movw	r30, r28
    2a8c:	e7 5b       	subi	r30, 0xB7	; 183
    2a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a90:	80 81       	ld	r24, Z
    2a92:	88 2f       	mov	r24, r24
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	88 70       	andi	r24, 0x08	; 8
    2a98:	90 70       	andi	r25, 0x00	; 0
    2a9a:	00 97       	sbiw	r24, 0x00	; 0
    2a9c:	39 f0       	breq	.+14     	; 0x2aac <EF_void_LCD_send_command+0x326>
    2a9e:	a8 e3       	ldi	r26, 0x38	; 56
    2aa0:	b0 e0       	ldi	r27, 0x00	; 0
    2aa2:	e8 e3       	ldi	r30, 0x38	; 56
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	80 81       	ld	r24, Z
    2aa8:	80 68       	ori	r24, 0x80	; 128
    2aaa:	8c 93       	st	X, r24
	if(cmnd & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
    2aac:	fe 01       	movw	r30, r28
    2aae:	e7 5b       	subi	r30, 0xB7	; 183
    2ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab2:	80 81       	ld	r24, Z
    2ab4:	88 2f       	mov	r24, r24
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	84 70       	andi	r24, 0x04	; 4
    2aba:	90 70       	andi	r25, 0x00	; 0
    2abc:	00 97       	sbiw	r24, 0x00	; 0
    2abe:	39 f0       	breq	.+14     	; 0x2ace <EF_void_LCD_send_command+0x348>
    2ac0:	a8 e3       	ldi	r26, 0x38	; 56
    2ac2:	b0 e0       	ldi	r27, 0x00	; 0
    2ac4:	e8 e3       	ldi	r30, 0x38	; 56
    2ac6:	f0 e0       	ldi	r31, 0x00	; 0
    2ac8:	80 81       	ld	r24, Z
    2aca:	80 64       	ori	r24, 0x40	; 64
    2acc:	8c 93       	st	X, r24
	if(cmnd & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    2ace:	fe 01       	movw	r30, r28
    2ad0:	e7 5b       	subi	r30, 0xB7	; 183
    2ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad4:	80 81       	ld	r24, Z
    2ad6:	88 2f       	mov	r24, r24
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	82 70       	andi	r24, 0x02	; 2
    2adc:	90 70       	andi	r25, 0x00	; 0
    2ade:	00 97       	sbiw	r24, 0x00	; 0
    2ae0:	39 f0       	breq	.+14     	; 0x2af0 <EF_void_LCD_send_command+0x36a>
    2ae2:	a8 e3       	ldi	r26, 0x38	; 56
    2ae4:	b0 e0       	ldi	r27, 0x00	; 0
    2ae6:	e8 e3       	ldi	r30, 0x38	; 56
    2ae8:	f0 e0       	ldi	r31, 0x00	; 0
    2aea:	80 81       	ld	r24, Z
    2aec:	80 62       	ori	r24, 0x20	; 32
    2aee:	8c 93       	st	X, r24
	if(cmnd & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
    2af0:	fe 01       	movw	r30, r28
    2af2:	e7 5b       	subi	r30, 0xB7	; 183
    2af4:	ff 4f       	sbci	r31, 0xFF	; 255
    2af6:	80 81       	ld	r24, Z
    2af8:	88 2f       	mov	r24, r24
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	81 70       	andi	r24, 0x01	; 1
    2afe:	90 70       	andi	r25, 0x00	; 0
    2b00:	88 23       	and	r24, r24
    2b02:	39 f0       	breq	.+14     	; 0x2b12 <EF_void_LCD_send_command+0x38c>
    2b04:	a8 e3       	ldi	r26, 0x38	; 56
    2b06:	b0 e0       	ldi	r27, 0x00	; 0
    2b08:	e8 e3       	ldi	r30, 0x38	; 56
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	80 81       	ld	r24, Z
    2b0e:	80 61       	ori	r24, 0x10	; 16
    2b10:	8c 93       	st	X, r24

	/* make Enable High to low with delay to enable the internal latch at the LCD*/
	LCD_CNTRL_PORT |= (1<<LCD_ENABLE_PIN);
    2b12:	a5 e3       	ldi	r26, 0x35	; 53
    2b14:	b0 e0       	ldi	r27, 0x00	; 0
    2b16:	e5 e3       	ldi	r30, 0x35	; 53
    2b18:	f0 e0       	ldi	r31, 0x00	; 0
    2b1a:	80 81       	ld	r24, Z
    2b1c:	80 68       	ori	r24, 0x80	; 128
    2b1e:	8c 93       	st	X, r24
    2b20:	80 e0       	ldi	r24, 0x00	; 0
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	a0 e0       	ldi	r26, 0x00	; 0
    2b26:	b0 e4       	ldi	r27, 0x40	; 64
    2b28:	8d a7       	std	Y+45, r24	; 0x2d
    2b2a:	9e a7       	std	Y+46, r25	; 0x2e
    2b2c:	af a7       	std	Y+47, r26	; 0x2f
    2b2e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b30:	6d a5       	ldd	r22, Y+45	; 0x2d
    2b32:	7e a5       	ldd	r23, Y+46	; 0x2e
    2b34:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b36:	98 a9       	ldd	r25, Y+48	; 0x30
    2b38:	2b ea       	ldi	r18, 0xAB	; 171
    2b3a:	3a ea       	ldi	r19, 0xAA	; 170
    2b3c:	4a ea       	ldi	r20, 0xAA	; 170
    2b3e:	5e e3       	ldi	r21, 0x3E	; 62
    2b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b44:	dc 01       	movw	r26, r24
    2b46:	cb 01       	movw	r24, r22
    2b48:	89 a7       	std	Y+41, r24	; 0x29
    2b4a:	9a a7       	std	Y+42, r25	; 0x2a
    2b4c:	ab a7       	std	Y+43, r26	; 0x2b
    2b4e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2b50:	69 a5       	ldd	r22, Y+41	; 0x29
    2b52:	7a a5       	ldd	r23, Y+42	; 0x2a
    2b54:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b56:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b58:	20 e0       	ldi	r18, 0x00	; 0
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	40 e8       	ldi	r20, 0x80	; 128
    2b5e:	5f e3       	ldi	r21, 0x3F	; 63
    2b60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b64:	88 23       	and	r24, r24
    2b66:	1c f4       	brge	.+6      	; 0x2b6e <EF_void_LCD_send_command+0x3e8>
		__ticks = 1;
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	88 a7       	std	Y+40, r24	; 0x28
    2b6c:	91 c0       	rjmp	.+290    	; 0x2c90 <EF_void_LCD_send_command+0x50a>
	else if (__tmp > 255)
    2b6e:	69 a5       	ldd	r22, Y+41	; 0x29
    2b70:	7a a5       	ldd	r23, Y+42	; 0x2a
    2b72:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b74:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b76:	20 e0       	ldi	r18, 0x00	; 0
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	4f e7       	ldi	r20, 0x7F	; 127
    2b7c:	53 e4       	ldi	r21, 0x43	; 67
    2b7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b82:	18 16       	cp	r1, r24
    2b84:	0c f0       	brlt	.+2      	; 0x2b88 <EF_void_LCD_send_command+0x402>
    2b86:	7b c0       	rjmp	.+246    	; 0x2c7e <EF_void_LCD_send_command+0x4f8>
	{
		_delay_ms(__us / 1000.0);
    2b88:	6d a5       	ldd	r22, Y+45	; 0x2d
    2b8a:	7e a5       	ldd	r23, Y+46	; 0x2e
    2b8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b8e:	98 a9       	ldd	r25, Y+48	; 0x30
    2b90:	20 e0       	ldi	r18, 0x00	; 0
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	4a e7       	ldi	r20, 0x7A	; 122
    2b96:	54 e4       	ldi	r21, 0x44	; 68
    2b98:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b9c:	dc 01       	movw	r26, r24
    2b9e:	cb 01       	movw	r24, r22
    2ba0:	8c a3       	std	Y+36, r24	; 0x24
    2ba2:	9d a3       	std	Y+37, r25	; 0x25
    2ba4:	ae a3       	std	Y+38, r26	; 0x26
    2ba6:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ba8:	6c a1       	ldd	r22, Y+36	; 0x24
    2baa:	7d a1       	ldd	r23, Y+37	; 0x25
    2bac:	8e a1       	ldd	r24, Y+38	; 0x26
    2bae:	9f a1       	ldd	r25, Y+39	; 0x27
    2bb0:	20 e0       	ldi	r18, 0x00	; 0
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	4a e7       	ldi	r20, 0x7A	; 122
    2bb6:	53 e4       	ldi	r21, 0x43	; 67
    2bb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bbc:	dc 01       	movw	r26, r24
    2bbe:	cb 01       	movw	r24, r22
    2bc0:	88 a3       	std	Y+32, r24	; 0x20
    2bc2:	99 a3       	std	Y+33, r25	; 0x21
    2bc4:	aa a3       	std	Y+34, r26	; 0x22
    2bc6:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2bc8:	68 a1       	ldd	r22, Y+32	; 0x20
    2bca:	79 a1       	ldd	r23, Y+33	; 0x21
    2bcc:	8a a1       	ldd	r24, Y+34	; 0x22
    2bce:	9b a1       	ldd	r25, Y+35	; 0x23
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	40 e8       	ldi	r20, 0x80	; 128
    2bd6:	5f e3       	ldi	r21, 0x3F	; 63
    2bd8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bdc:	88 23       	and	r24, r24
    2bde:	2c f4       	brge	.+10     	; 0x2bea <EF_void_LCD_send_command+0x464>
		__ticks = 1;
    2be0:	81 e0       	ldi	r24, 0x01	; 1
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	9f 8f       	std	Y+31, r25	; 0x1f
    2be6:	8e 8f       	std	Y+30, r24	; 0x1e
    2be8:	3f c0       	rjmp	.+126    	; 0x2c68 <EF_void_LCD_send_command+0x4e2>
	else if (__tmp > 65535)
    2bea:	68 a1       	ldd	r22, Y+32	; 0x20
    2bec:	79 a1       	ldd	r23, Y+33	; 0x21
    2bee:	8a a1       	ldd	r24, Y+34	; 0x22
    2bf0:	9b a1       	ldd	r25, Y+35	; 0x23
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	3f ef       	ldi	r19, 0xFF	; 255
    2bf6:	4f e7       	ldi	r20, 0x7F	; 127
    2bf8:	57 e4       	ldi	r21, 0x47	; 71
    2bfa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bfe:	18 16       	cp	r1, r24
    2c00:	4c f5       	brge	.+82     	; 0x2c54 <EF_void_LCD_send_command+0x4ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c02:	6c a1       	ldd	r22, Y+36	; 0x24
    2c04:	7d a1       	ldd	r23, Y+37	; 0x25
    2c06:	8e a1       	ldd	r24, Y+38	; 0x26
    2c08:	9f a1       	ldd	r25, Y+39	; 0x27
    2c0a:	20 e0       	ldi	r18, 0x00	; 0
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	40 e2       	ldi	r20, 0x20	; 32
    2c10:	51 e4       	ldi	r21, 0x41	; 65
    2c12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c16:	dc 01       	movw	r26, r24
    2c18:	cb 01       	movw	r24, r22
    2c1a:	bc 01       	movw	r22, r24
    2c1c:	cd 01       	movw	r24, r26
    2c1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c22:	dc 01       	movw	r26, r24
    2c24:	cb 01       	movw	r24, r22
    2c26:	9f 8f       	std	Y+31, r25	; 0x1f
    2c28:	8e 8f       	std	Y+30, r24	; 0x1e
    2c2a:	0f c0       	rjmp	.+30     	; 0x2c4a <EF_void_LCD_send_command+0x4c4>
    2c2c:	89 e1       	ldi	r24, 0x19	; 25
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	9d 8f       	std	Y+29, r25	; 0x1d
    2c32:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c34:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2c36:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2c38:	01 97       	sbiw	r24, 0x01	; 1
    2c3a:	f1 f7       	brne	.-4      	; 0x2c38 <EF_void_LCD_send_command+0x4b2>
    2c3c:	9d 8f       	std	Y+29, r25	; 0x1d
    2c3e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c40:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c42:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2c44:	01 97       	sbiw	r24, 0x01	; 1
    2c46:	9f 8f       	std	Y+31, r25	; 0x1f
    2c48:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c4a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c4c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2c4e:	00 97       	sbiw	r24, 0x00	; 0
    2c50:	69 f7       	brne	.-38     	; 0x2c2c <EF_void_LCD_send_command+0x4a6>
    2c52:	24 c0       	rjmp	.+72     	; 0x2c9c <EF_void_LCD_send_command+0x516>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c54:	68 a1       	ldd	r22, Y+32	; 0x20
    2c56:	79 a1       	ldd	r23, Y+33	; 0x21
    2c58:	8a a1       	ldd	r24, Y+34	; 0x22
    2c5a:	9b a1       	ldd	r25, Y+35	; 0x23
    2c5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c60:	dc 01       	movw	r26, r24
    2c62:	cb 01       	movw	r24, r22
    2c64:	9f 8f       	std	Y+31, r25	; 0x1f
    2c66:	8e 8f       	std	Y+30, r24	; 0x1e
    2c68:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c6a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2c6c:	9b 8f       	std	Y+27, r25	; 0x1b
    2c6e:	8a 8f       	std	Y+26, r24	; 0x1a
    2c70:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c72:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2c74:	01 97       	sbiw	r24, 0x01	; 1
    2c76:	f1 f7       	brne	.-4      	; 0x2c74 <EF_void_LCD_send_command+0x4ee>
    2c78:	9b 8f       	std	Y+27, r25	; 0x1b
    2c7a:	8a 8f       	std	Y+26, r24	; 0x1a
    2c7c:	0f c0       	rjmp	.+30     	; 0x2c9c <EF_void_LCD_send_command+0x516>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c7e:	69 a5       	ldd	r22, Y+41	; 0x29
    2c80:	7a a5       	ldd	r23, Y+42	; 0x2a
    2c82:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c84:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c8a:	dc 01       	movw	r26, r24
    2c8c:	cb 01       	movw	r24, r22
    2c8e:	88 a7       	std	Y+40, r24	; 0x28
    2c90:	88 a5       	ldd	r24, Y+40	; 0x28
    2c92:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c94:	89 8d       	ldd	r24, Y+25	; 0x19
    2c96:	8a 95       	dec	r24
    2c98:	f1 f7       	brne	.-4      	; 0x2c96 <EF_void_LCD_send_command+0x510>
    2c9a:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(2);
	LCD_CNTRL_PORT &= ~(1<<LCD_ENABLE_PIN);
    2c9c:	a5 e3       	ldi	r26, 0x35	; 53
    2c9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ca0:	e5 e3       	ldi	r30, 0x35	; 53
    2ca2:	f0 e0       	ldi	r31, 0x00	; 0
    2ca4:	80 81       	ld	r24, Z
    2ca6:	8f 77       	andi	r24, 0x7F	; 127
    2ca8:	8c 93       	st	X, r24
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	a6 e9       	ldi	r26, 0x96	; 150
    2cb0:	b3 e4       	ldi	r27, 0x43	; 67
    2cb2:	8d 8b       	std	Y+21, r24	; 0x15
    2cb4:	9e 8b       	std	Y+22, r25	; 0x16
    2cb6:	af 8b       	std	Y+23, r26	; 0x17
    2cb8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2cba:	6d 89       	ldd	r22, Y+21	; 0x15
    2cbc:	7e 89       	ldd	r23, Y+22	; 0x16
    2cbe:	8f 89       	ldd	r24, Y+23	; 0x17
    2cc0:	98 8d       	ldd	r25, Y+24	; 0x18
    2cc2:	2b ea       	ldi	r18, 0xAB	; 171
    2cc4:	3a ea       	ldi	r19, 0xAA	; 170
    2cc6:	4a ea       	ldi	r20, 0xAA	; 170
    2cc8:	5e e3       	ldi	r21, 0x3E	; 62
    2cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	89 8b       	std	Y+17, r24	; 0x11
    2cd4:	9a 8b       	std	Y+18, r25	; 0x12
    2cd6:	ab 8b       	std	Y+19, r26	; 0x13
    2cd8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2cda:	69 89       	ldd	r22, Y+17	; 0x11
    2cdc:	7a 89       	ldd	r23, Y+18	; 0x12
    2cde:	8b 89       	ldd	r24, Y+19	; 0x13
    2ce0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ce2:	20 e0       	ldi	r18, 0x00	; 0
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	40 e8       	ldi	r20, 0x80	; 128
    2ce8:	5f e3       	ldi	r21, 0x3F	; 63
    2cea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cee:	88 23       	and	r24, r24
    2cf0:	1c f4       	brge	.+6      	; 0x2cf8 <EF_void_LCD_send_command+0x572>
		__ticks = 1;
    2cf2:	81 e0       	ldi	r24, 0x01	; 1
    2cf4:	88 8b       	std	Y+16, r24	; 0x10
    2cf6:	91 c0       	rjmp	.+290    	; 0x2e1a <EF_void_LCD_send_command+0x694>
	else if (__tmp > 255)
    2cf8:	69 89       	ldd	r22, Y+17	; 0x11
    2cfa:	7a 89       	ldd	r23, Y+18	; 0x12
    2cfc:	8b 89       	ldd	r24, Y+19	; 0x13
    2cfe:	9c 89       	ldd	r25, Y+20	; 0x14
    2d00:	20 e0       	ldi	r18, 0x00	; 0
    2d02:	30 e0       	ldi	r19, 0x00	; 0
    2d04:	4f e7       	ldi	r20, 0x7F	; 127
    2d06:	53 e4       	ldi	r21, 0x43	; 67
    2d08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d0c:	18 16       	cp	r1, r24
    2d0e:	0c f0       	brlt	.+2      	; 0x2d12 <EF_void_LCD_send_command+0x58c>
    2d10:	7b c0       	rjmp	.+246    	; 0x2e08 <EF_void_LCD_send_command+0x682>
	{
		_delay_ms(__us / 1000.0);
    2d12:	6d 89       	ldd	r22, Y+21	; 0x15
    2d14:	7e 89       	ldd	r23, Y+22	; 0x16
    2d16:	8f 89       	ldd	r24, Y+23	; 0x17
    2d18:	98 8d       	ldd	r25, Y+24	; 0x18
    2d1a:	20 e0       	ldi	r18, 0x00	; 0
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	4a e7       	ldi	r20, 0x7A	; 122
    2d20:	54 e4       	ldi	r21, 0x44	; 68
    2d22:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2d26:	dc 01       	movw	r26, r24
    2d28:	cb 01       	movw	r24, r22
    2d2a:	8c 87       	std	Y+12, r24	; 0x0c
    2d2c:	9d 87       	std	Y+13, r25	; 0x0d
    2d2e:	ae 87       	std	Y+14, r26	; 0x0e
    2d30:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d32:	6c 85       	ldd	r22, Y+12	; 0x0c
    2d34:	7d 85       	ldd	r23, Y+13	; 0x0d
    2d36:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d38:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d3a:	20 e0       	ldi	r18, 0x00	; 0
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	4a e7       	ldi	r20, 0x7A	; 122
    2d40:	53 e4       	ldi	r21, 0x43	; 67
    2d42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d46:	dc 01       	movw	r26, r24
    2d48:	cb 01       	movw	r24, r22
    2d4a:	88 87       	std	Y+8, r24	; 0x08
    2d4c:	99 87       	std	Y+9, r25	; 0x09
    2d4e:	aa 87       	std	Y+10, r26	; 0x0a
    2d50:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2d52:	68 85       	ldd	r22, Y+8	; 0x08
    2d54:	79 85       	ldd	r23, Y+9	; 0x09
    2d56:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d58:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d5a:	20 e0       	ldi	r18, 0x00	; 0
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	40 e8       	ldi	r20, 0x80	; 128
    2d60:	5f e3       	ldi	r21, 0x3F	; 63
    2d62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d66:	88 23       	and	r24, r24
    2d68:	2c f4       	brge	.+10     	; 0x2d74 <EF_void_LCD_send_command+0x5ee>
		__ticks = 1;
    2d6a:	81 e0       	ldi	r24, 0x01	; 1
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	9f 83       	std	Y+7, r25	; 0x07
    2d70:	8e 83       	std	Y+6, r24	; 0x06
    2d72:	3f c0       	rjmp	.+126    	; 0x2df2 <EF_void_LCD_send_command+0x66c>
	else if (__tmp > 65535)
    2d74:	68 85       	ldd	r22, Y+8	; 0x08
    2d76:	79 85       	ldd	r23, Y+9	; 0x09
    2d78:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d7a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	3f ef       	ldi	r19, 0xFF	; 255
    2d80:	4f e7       	ldi	r20, 0x7F	; 127
    2d82:	57 e4       	ldi	r21, 0x47	; 71
    2d84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d88:	18 16       	cp	r1, r24
    2d8a:	4c f5       	brge	.+82     	; 0x2dde <EF_void_LCD_send_command+0x658>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d8c:	6c 85       	ldd	r22, Y+12	; 0x0c
    2d8e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2d90:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d92:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d94:	20 e0       	ldi	r18, 0x00	; 0
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	40 e2       	ldi	r20, 0x20	; 32
    2d9a:	51 e4       	ldi	r21, 0x41	; 65
    2d9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da0:	dc 01       	movw	r26, r24
    2da2:	cb 01       	movw	r24, r22
    2da4:	bc 01       	movw	r22, r24
    2da6:	cd 01       	movw	r24, r26
    2da8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dac:	dc 01       	movw	r26, r24
    2dae:	cb 01       	movw	r24, r22
    2db0:	9f 83       	std	Y+7, r25	; 0x07
    2db2:	8e 83       	std	Y+6, r24	; 0x06
    2db4:	0f c0       	rjmp	.+30     	; 0x2dd4 <EF_void_LCD_send_command+0x64e>
    2db6:	89 e1       	ldi	r24, 0x19	; 25
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	9d 83       	std	Y+5, r25	; 0x05
    2dbc:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2dbe:	8c 81       	ldd	r24, Y+4	; 0x04
    2dc0:	9d 81       	ldd	r25, Y+5	; 0x05
    2dc2:	01 97       	sbiw	r24, 0x01	; 1
    2dc4:	f1 f7       	brne	.-4      	; 0x2dc2 <EF_void_LCD_send_command+0x63c>
    2dc6:	9d 83       	std	Y+5, r25	; 0x05
    2dc8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dca:	8e 81       	ldd	r24, Y+6	; 0x06
    2dcc:	9f 81       	ldd	r25, Y+7	; 0x07
    2dce:	01 97       	sbiw	r24, 0x01	; 1
    2dd0:	9f 83       	std	Y+7, r25	; 0x07
    2dd2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dd4:	8e 81       	ldd	r24, Y+6	; 0x06
    2dd6:	9f 81       	ldd	r25, Y+7	; 0x07
    2dd8:	00 97       	sbiw	r24, 0x00	; 0
    2dda:	69 f7       	brne	.-38     	; 0x2db6 <EF_void_LCD_send_command+0x630>
    2ddc:	24 c0       	rjmp	.+72     	; 0x2e26 <EF_void_LCD_send_command+0x6a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dde:	68 85       	ldd	r22, Y+8	; 0x08
    2de0:	79 85       	ldd	r23, Y+9	; 0x09
    2de2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2de4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2de6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dea:	dc 01       	movw	r26, r24
    2dec:	cb 01       	movw	r24, r22
    2dee:	9f 83       	std	Y+7, r25	; 0x07
    2df0:	8e 83       	std	Y+6, r24	; 0x06
    2df2:	8e 81       	ldd	r24, Y+6	; 0x06
    2df4:	9f 81       	ldd	r25, Y+7	; 0x07
    2df6:	9b 83       	std	Y+3, r25	; 0x03
    2df8:	8a 83       	std	Y+2, r24	; 0x02
    2dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfc:	9b 81       	ldd	r25, Y+3	; 0x03
    2dfe:	01 97       	sbiw	r24, 0x01	; 1
    2e00:	f1 f7       	brne	.-4      	; 0x2dfe <EF_void_LCD_send_command+0x678>
    2e02:	9b 83       	std	Y+3, r25	; 0x03
    2e04:	8a 83       	std	Y+2, r24	; 0x02
    2e06:	0f c0       	rjmp	.+30     	; 0x2e26 <EF_void_LCD_send_command+0x6a0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e08:	69 89       	ldd	r22, Y+17	; 0x11
    2e0a:	7a 89       	ldd	r23, Y+18	; 0x12
    2e0c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e0e:	9c 89       	ldd	r25, Y+20	; 0x14
    2e10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e14:	dc 01       	movw	r26, r24
    2e16:	cb 01       	movw	r24, r22
    2e18:	88 8b       	std	Y+16, r24	; 0x10
    2e1a:	88 89       	ldd	r24, Y+16	; 0x10
    2e1c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e1e:	89 81       	ldd	r24, Y+1	; 0x01
    2e20:	8a 95       	dec	r24
    2e22:	f1 f7       	brne	.-4      	; 0x2e20 <EF_void_LCD_send_command+0x69a>
    2e24:	89 83       	std	Y+1, r24	; 0x01

	/* wait to let LCD running the command*/
	_delay_us(300);
}
    2e26:	c7 5b       	subi	r28, 0xB7	; 183
    2e28:	df 4f       	sbci	r29, 0xFF	; 255
    2e2a:	0f b6       	in	r0, 0x3f	; 63
    2e2c:	f8 94       	cli
    2e2e:	de bf       	out	0x3e, r29	; 62
    2e30:	0f be       	out	0x3f, r0	; 63
    2e32:	cd bf       	out	0x3d, r28	; 61
    2e34:	cf 91       	pop	r28
    2e36:	df 91       	pop	r29
    2e38:	1f 91       	pop	r17
    2e3a:	0f 91       	pop	r16
    2e3c:	08 95       	ret

00002e3e <EF_void_LCD_send_data>:
 * PARAMETERS  : u8 Data:  Data User want to send.
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_send_data(u8 data)
{
    2e3e:	0f 93       	push	r16
    2e40:	1f 93       	push	r17
    2e42:	df 93       	push	r29
    2e44:	cf 93       	push	r28
    2e46:	cd b7       	in	r28, 0x3d	; 61
    2e48:	de b7       	in	r29, 0x3e	; 62
    2e4a:	c9 54       	subi	r28, 0x49	; 73
    2e4c:	d0 40       	sbci	r29, 0x00	; 0
    2e4e:	0f b6       	in	r0, 0x3f	; 63
    2e50:	f8 94       	cli
    2e52:	de bf       	out	0x3e, r29	; 62
    2e54:	0f be       	out	0x3f, r0	; 63
    2e56:	cd bf       	out	0x3d, r28	; 61
    2e58:	fe 01       	movw	r30, r28
    2e5a:	e7 5b       	subi	r30, 0xB7	; 183
    2e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5e:	80 83       	st	Z, r24
	/*RS will be high and RW will be LOW */
	LCD_CNTRL_PORT &= ~(1<<LCD_RW_PIN);
    2e60:	a5 e3       	ldi	r26, 0x35	; 53
    2e62:	b0 e0       	ldi	r27, 0x00	; 0
    2e64:	e5 e3       	ldi	r30, 0x35	; 53
    2e66:	f0 e0       	ldi	r31, 0x00	; 0
    2e68:	80 81       	ld	r24, Z
    2e6a:	8f 7b       	andi	r24, 0xBF	; 191
    2e6c:	8c 93       	st	X, r24
	LCD_CNTRL_PORT |= (1<<LCD_RS_PIN);
    2e6e:	a5 e3       	ldi	r26, 0x35	; 53
    2e70:	b0 e0       	ldi	r27, 0x00	; 0
    2e72:	e5 e3       	ldi	r30, 0x35	; 53
    2e74:	f0 e0       	ldi	r31, 0x00	; 0
    2e76:	80 81       	ld	r24, Z
    2e78:	80 62       	ori	r24, 0x20	; 32
    2e7a:	8c 93       	st	X, r24
	/*
	 * output high nibble first , "Generic method", attach data by bit
	 * first: put 0 in each pin then if the corresponding bit =1 , put 1
	 * -----------output high nibble first--------*
	 * * */
	LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
    2e7c:	a8 e3       	ldi	r26, 0x38	; 56
    2e7e:	b0 e0       	ldi	r27, 0x00	; 0
    2e80:	e8 e3       	ldi	r30, 0x38	; 56
    2e82:	f0 e0       	ldi	r31, 0x00	; 0
    2e84:	80 81       	ld	r24, Z
    2e86:	8f 77       	andi	r24, 0x7F	; 127
    2e88:	8c 93       	st	X, r24
	LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
    2e8a:	a8 e3       	ldi	r26, 0x38	; 56
    2e8c:	b0 e0       	ldi	r27, 0x00	; 0
    2e8e:	e8 e3       	ldi	r30, 0x38	; 56
    2e90:	f0 e0       	ldi	r31, 0x00	; 0
    2e92:	80 81       	ld	r24, Z
    2e94:	8f 7b       	andi	r24, 0xBF	; 191
    2e96:	8c 93       	st	X, r24
	LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
    2e98:	a8 e3       	ldi	r26, 0x38	; 56
    2e9a:	b0 e0       	ldi	r27, 0x00	; 0
    2e9c:	e8 e3       	ldi	r30, 0x38	; 56
    2e9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ea0:	80 81       	ld	r24, Z
    2ea2:	8f 7d       	andi	r24, 0xDF	; 223
    2ea4:	8c 93       	st	X, r24
	LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
    2ea6:	a8 e3       	ldi	r26, 0x38	; 56
    2ea8:	b0 e0       	ldi	r27, 0x00	; 0
    2eaa:	e8 e3       	ldi	r30, 0x38	; 56
    2eac:	f0 e0       	ldi	r31, 0x00	; 0
    2eae:	80 81       	ld	r24, Z
    2eb0:	8f 7e       	andi	r24, 0xEF	; 239
    2eb2:	8c 93       	st	X, r24
	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    2eb4:	fe 01       	movw	r30, r28
    2eb6:	e7 5b       	subi	r30, 0xB7	; 183
    2eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eba:	80 81       	ld	r24, Z
    2ebc:	88 23       	and	r24, r24
    2ebe:	3c f4       	brge	.+14     	; 0x2ece <EF_void_LCD_send_data+0x90>
    2ec0:	a8 e3       	ldi	r26, 0x38	; 56
    2ec2:	b0 e0       	ldi	r27, 0x00	; 0
    2ec4:	e8 e3       	ldi	r30, 0x38	; 56
    2ec6:	f0 e0       	ldi	r31, 0x00	; 0
    2ec8:	80 81       	ld	r24, Z
    2eca:	80 68       	ori	r24, 0x80	; 128
    2ecc:	8c 93       	st	X, r24
	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
    2ece:	fe 01       	movw	r30, r28
    2ed0:	e7 5b       	subi	r30, 0xB7	; 183
    2ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed4:	80 81       	ld	r24, Z
    2ed6:	88 2f       	mov	r24, r24
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	80 74       	andi	r24, 0x40	; 64
    2edc:	90 70       	andi	r25, 0x00	; 0
    2ede:	00 97       	sbiw	r24, 0x00	; 0
    2ee0:	39 f0       	breq	.+14     	; 0x2ef0 <EF_void_LCD_send_data+0xb2>
    2ee2:	a8 e3       	ldi	r26, 0x38	; 56
    2ee4:	b0 e0       	ldi	r27, 0x00	; 0
    2ee6:	e8 e3       	ldi	r30, 0x38	; 56
    2ee8:	f0 e0       	ldi	r31, 0x00	; 0
    2eea:	80 81       	ld	r24, Z
    2eec:	80 64       	ori	r24, 0x40	; 64
    2eee:	8c 93       	st	X, r24
	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    2ef0:	fe 01       	movw	r30, r28
    2ef2:	e7 5b       	subi	r30, 0xB7	; 183
    2ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef6:	80 81       	ld	r24, Z
    2ef8:	88 2f       	mov	r24, r24
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	80 72       	andi	r24, 0x20	; 32
    2efe:	90 70       	andi	r25, 0x00	; 0
    2f00:	00 97       	sbiw	r24, 0x00	; 0
    2f02:	39 f0       	breq	.+14     	; 0x2f12 <EF_void_LCD_send_data+0xd4>
    2f04:	a8 e3       	ldi	r26, 0x38	; 56
    2f06:	b0 e0       	ldi	r27, 0x00	; 0
    2f08:	e8 e3       	ldi	r30, 0x38	; 56
    2f0a:	f0 e0       	ldi	r31, 0x00	; 0
    2f0c:	80 81       	ld	r24, Z
    2f0e:	80 62       	ori	r24, 0x20	; 32
    2f10:	8c 93       	st	X, r24
	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
    2f12:	fe 01       	movw	r30, r28
    2f14:	e7 5b       	subi	r30, 0xB7	; 183
    2f16:	ff 4f       	sbci	r31, 0xFF	; 255
    2f18:	80 81       	ld	r24, Z
    2f1a:	88 2f       	mov	r24, r24
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	80 71       	andi	r24, 0x10	; 16
    2f20:	90 70       	andi	r25, 0x00	; 0
    2f22:	00 97       	sbiw	r24, 0x00	; 0
    2f24:	39 f0       	breq	.+14     	; 0x2f34 <EF_void_LCD_send_data+0xf6>
    2f26:	a8 e3       	ldi	r26, 0x38	; 56
    2f28:	b0 e0       	ldi	r27, 0x00	; 0
    2f2a:	e8 e3       	ldi	r30, 0x38	; 56
    2f2c:	f0 e0       	ldi	r31, 0x00	; 0
    2f2e:	80 81       	ld	r24, Z
    2f30:	80 61       	ori	r24, 0x10	; 16
    2f32:	8c 93       	st	X, r24

	/* make Enable High to low with delay to enable the internal latch at the LCD */
	LCD_CNTRL_PORT |= (1<<LCD_ENABLE_PIN);
    2f34:	a5 e3       	ldi	r26, 0x35	; 53
    2f36:	b0 e0       	ldi	r27, 0x00	; 0
    2f38:	e5 e3       	ldi	r30, 0x35	; 53
    2f3a:	f0 e0       	ldi	r31, 0x00	; 0
    2f3c:	80 81       	ld	r24, Z
    2f3e:	80 68       	ori	r24, 0x80	; 128
    2f40:	8c 93       	st	X, r24
    2f42:	fe 01       	movw	r30, r28
    2f44:	eb 5b       	subi	r30, 0xBB	; 187
    2f46:	ff 4f       	sbci	r31, 0xFF	; 255
    2f48:	80 e0       	ldi	r24, 0x00	; 0
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	a0 e0       	ldi	r26, 0x00	; 0
    2f4e:	b0 e4       	ldi	r27, 0x40	; 64
    2f50:	80 83       	st	Z, r24
    2f52:	91 83       	std	Z+1, r25	; 0x01
    2f54:	a2 83       	std	Z+2, r26	; 0x02
    2f56:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2f58:	8e 01       	movw	r16, r28
    2f5a:	0f 5b       	subi	r16, 0xBF	; 191
    2f5c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f5e:	fe 01       	movw	r30, r28
    2f60:	eb 5b       	subi	r30, 0xBB	; 187
    2f62:	ff 4f       	sbci	r31, 0xFF	; 255
    2f64:	60 81       	ld	r22, Z
    2f66:	71 81       	ldd	r23, Z+1	; 0x01
    2f68:	82 81       	ldd	r24, Z+2	; 0x02
    2f6a:	93 81       	ldd	r25, Z+3	; 0x03
    2f6c:	2b ea       	ldi	r18, 0xAB	; 171
    2f6e:	3a ea       	ldi	r19, 0xAA	; 170
    2f70:	4a ea       	ldi	r20, 0xAA	; 170
    2f72:	5e e3       	ldi	r21, 0x3E	; 62
    2f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f78:	dc 01       	movw	r26, r24
    2f7a:	cb 01       	movw	r24, r22
    2f7c:	f8 01       	movw	r30, r16
    2f7e:	80 83       	st	Z, r24
    2f80:	91 83       	std	Z+1, r25	; 0x01
    2f82:	a2 83       	std	Z+2, r26	; 0x02
    2f84:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f86:	fe 01       	movw	r30, r28
    2f88:	ef 5b       	subi	r30, 0xBF	; 191
    2f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8c:	60 81       	ld	r22, Z
    2f8e:	71 81       	ldd	r23, Z+1	; 0x01
    2f90:	82 81       	ldd	r24, Z+2	; 0x02
    2f92:	93 81       	ldd	r25, Z+3	; 0x03
    2f94:	20 e0       	ldi	r18, 0x00	; 0
    2f96:	30 e0       	ldi	r19, 0x00	; 0
    2f98:	40 e8       	ldi	r20, 0x80	; 128
    2f9a:	5f e3       	ldi	r21, 0x3F	; 63
    2f9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fa0:	88 23       	and	r24, r24
    2fa2:	34 f4       	brge	.+12     	; 0x2fb0 <EF_void_LCD_send_data+0x172>
		__ticks = 1;
    2fa4:	81 e0       	ldi	r24, 0x01	; 1
    2fa6:	fe 01       	movw	r30, r28
    2fa8:	e0 5c       	subi	r30, 0xC0	; 192
    2faa:	ff 4f       	sbci	r31, 0xFF	; 255
    2fac:	80 83       	st	Z, r24
    2fae:	9d c0       	rjmp	.+314    	; 0x30ea <EF_void_LCD_send_data+0x2ac>
	else if (__tmp > 255)
    2fb0:	fe 01       	movw	r30, r28
    2fb2:	ef 5b       	subi	r30, 0xBF	; 191
    2fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb6:	60 81       	ld	r22, Z
    2fb8:	71 81       	ldd	r23, Z+1	; 0x01
    2fba:	82 81       	ldd	r24, Z+2	; 0x02
    2fbc:	93 81       	ldd	r25, Z+3	; 0x03
    2fbe:	20 e0       	ldi	r18, 0x00	; 0
    2fc0:	30 e0       	ldi	r19, 0x00	; 0
    2fc2:	4f e7       	ldi	r20, 0x7F	; 127
    2fc4:	53 e4       	ldi	r21, 0x43	; 67
    2fc6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fca:	18 16       	cp	r1, r24
    2fcc:	0c f0       	brlt	.+2      	; 0x2fd0 <EF_void_LCD_send_data+0x192>
    2fce:	7e c0       	rjmp	.+252    	; 0x30cc <EF_void_LCD_send_data+0x28e>
	{
		_delay_ms(__us / 1000.0);
    2fd0:	fe 01       	movw	r30, r28
    2fd2:	eb 5b       	subi	r30, 0xBB	; 187
    2fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd6:	60 81       	ld	r22, Z
    2fd8:	71 81       	ldd	r23, Z+1	; 0x01
    2fda:	82 81       	ldd	r24, Z+2	; 0x02
    2fdc:	93 81       	ldd	r25, Z+3	; 0x03
    2fde:	20 e0       	ldi	r18, 0x00	; 0
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	4a e7       	ldi	r20, 0x7A	; 122
    2fe4:	54 e4       	ldi	r21, 0x44	; 68
    2fe6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2fea:	dc 01       	movw	r26, r24
    2fec:	cb 01       	movw	r24, r22
    2fee:	8c af       	std	Y+60, r24	; 0x3c
    2ff0:	9d af       	std	Y+61, r25	; 0x3d
    2ff2:	ae af       	std	Y+62, r26	; 0x3e
    2ff4:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ff6:	6c ad       	ldd	r22, Y+60	; 0x3c
    2ff8:	7d ad       	ldd	r23, Y+61	; 0x3d
    2ffa:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ffc:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ffe:	20 e0       	ldi	r18, 0x00	; 0
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	4a e7       	ldi	r20, 0x7A	; 122
    3004:	53 e4       	ldi	r21, 0x43	; 67
    3006:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    300a:	dc 01       	movw	r26, r24
    300c:	cb 01       	movw	r24, r22
    300e:	88 af       	std	Y+56, r24	; 0x38
    3010:	99 af       	std	Y+57, r25	; 0x39
    3012:	aa af       	std	Y+58, r26	; 0x3a
    3014:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3016:	68 ad       	ldd	r22, Y+56	; 0x38
    3018:	79 ad       	ldd	r23, Y+57	; 0x39
    301a:	8a ad       	ldd	r24, Y+58	; 0x3a
    301c:	9b ad       	ldd	r25, Y+59	; 0x3b
    301e:	20 e0       	ldi	r18, 0x00	; 0
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	40 e8       	ldi	r20, 0x80	; 128
    3024:	5f e3       	ldi	r21, 0x3F	; 63
    3026:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    302a:	88 23       	and	r24, r24
    302c:	2c f4       	brge	.+10     	; 0x3038 <EF_void_LCD_send_data+0x1fa>
		__ticks = 1;
    302e:	81 e0       	ldi	r24, 0x01	; 1
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	9f ab       	std	Y+55, r25	; 0x37
    3034:	8e ab       	std	Y+54, r24	; 0x36
    3036:	3f c0       	rjmp	.+126    	; 0x30b6 <EF_void_LCD_send_data+0x278>
	else if (__tmp > 65535)
    3038:	68 ad       	ldd	r22, Y+56	; 0x38
    303a:	79 ad       	ldd	r23, Y+57	; 0x39
    303c:	8a ad       	ldd	r24, Y+58	; 0x3a
    303e:	9b ad       	ldd	r25, Y+59	; 0x3b
    3040:	20 e0       	ldi	r18, 0x00	; 0
    3042:	3f ef       	ldi	r19, 0xFF	; 255
    3044:	4f e7       	ldi	r20, 0x7F	; 127
    3046:	57 e4       	ldi	r21, 0x47	; 71
    3048:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    304c:	18 16       	cp	r1, r24
    304e:	4c f5       	brge	.+82     	; 0x30a2 <EF_void_LCD_send_data+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3050:	6c ad       	ldd	r22, Y+60	; 0x3c
    3052:	7d ad       	ldd	r23, Y+61	; 0x3d
    3054:	8e ad       	ldd	r24, Y+62	; 0x3e
    3056:	9f ad       	ldd	r25, Y+63	; 0x3f
    3058:	20 e0       	ldi	r18, 0x00	; 0
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	40 e2       	ldi	r20, 0x20	; 32
    305e:	51 e4       	ldi	r21, 0x41	; 65
    3060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3064:	dc 01       	movw	r26, r24
    3066:	cb 01       	movw	r24, r22
    3068:	bc 01       	movw	r22, r24
    306a:	cd 01       	movw	r24, r26
    306c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3070:	dc 01       	movw	r26, r24
    3072:	cb 01       	movw	r24, r22
    3074:	9f ab       	std	Y+55, r25	; 0x37
    3076:	8e ab       	std	Y+54, r24	; 0x36
    3078:	0f c0       	rjmp	.+30     	; 0x3098 <EF_void_LCD_send_data+0x25a>
    307a:	89 e1       	ldi	r24, 0x19	; 25
    307c:	90 e0       	ldi	r25, 0x00	; 0
    307e:	9d ab       	std	Y+53, r25	; 0x35
    3080:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3082:	8c a9       	ldd	r24, Y+52	; 0x34
    3084:	9d a9       	ldd	r25, Y+53	; 0x35
    3086:	01 97       	sbiw	r24, 0x01	; 1
    3088:	f1 f7       	brne	.-4      	; 0x3086 <EF_void_LCD_send_data+0x248>
    308a:	9d ab       	std	Y+53, r25	; 0x35
    308c:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    308e:	8e a9       	ldd	r24, Y+54	; 0x36
    3090:	9f a9       	ldd	r25, Y+55	; 0x37
    3092:	01 97       	sbiw	r24, 0x01	; 1
    3094:	9f ab       	std	Y+55, r25	; 0x37
    3096:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3098:	8e a9       	ldd	r24, Y+54	; 0x36
    309a:	9f a9       	ldd	r25, Y+55	; 0x37
    309c:	00 97       	sbiw	r24, 0x00	; 0
    309e:	69 f7       	brne	.-38     	; 0x307a <EF_void_LCD_send_data+0x23c>
    30a0:	2d c0       	rjmp	.+90     	; 0x30fc <EF_void_LCD_send_data+0x2be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30a2:	68 ad       	ldd	r22, Y+56	; 0x38
    30a4:	79 ad       	ldd	r23, Y+57	; 0x39
    30a6:	8a ad       	ldd	r24, Y+58	; 0x3a
    30a8:	9b ad       	ldd	r25, Y+59	; 0x3b
    30aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ae:	dc 01       	movw	r26, r24
    30b0:	cb 01       	movw	r24, r22
    30b2:	9f ab       	std	Y+55, r25	; 0x37
    30b4:	8e ab       	std	Y+54, r24	; 0x36
    30b6:	8e a9       	ldd	r24, Y+54	; 0x36
    30b8:	9f a9       	ldd	r25, Y+55	; 0x37
    30ba:	9b ab       	std	Y+51, r25	; 0x33
    30bc:	8a ab       	std	Y+50, r24	; 0x32
    30be:	8a a9       	ldd	r24, Y+50	; 0x32
    30c0:	9b a9       	ldd	r25, Y+51	; 0x33
    30c2:	01 97       	sbiw	r24, 0x01	; 1
    30c4:	f1 f7       	brne	.-4      	; 0x30c2 <EF_void_LCD_send_data+0x284>
    30c6:	9b ab       	std	Y+51, r25	; 0x33
    30c8:	8a ab       	std	Y+50, r24	; 0x32
    30ca:	18 c0       	rjmp	.+48     	; 0x30fc <EF_void_LCD_send_data+0x2be>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    30cc:	fe 01       	movw	r30, r28
    30ce:	ef 5b       	subi	r30, 0xBF	; 191
    30d0:	ff 4f       	sbci	r31, 0xFF	; 255
    30d2:	60 81       	ld	r22, Z
    30d4:	71 81       	ldd	r23, Z+1	; 0x01
    30d6:	82 81       	ldd	r24, Z+2	; 0x02
    30d8:	93 81       	ldd	r25, Z+3	; 0x03
    30da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30de:	dc 01       	movw	r26, r24
    30e0:	cb 01       	movw	r24, r22
    30e2:	fe 01       	movw	r30, r28
    30e4:	e0 5c       	subi	r30, 0xC0	; 192
    30e6:	ff 4f       	sbci	r31, 0xFF	; 255
    30e8:	80 83       	st	Z, r24
    30ea:	fe 01       	movw	r30, r28
    30ec:	e0 5c       	subi	r30, 0xC0	; 192
    30ee:	ff 4f       	sbci	r31, 0xFF	; 255
    30f0:	80 81       	ld	r24, Z
    30f2:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    30f4:	89 a9       	ldd	r24, Y+49	; 0x31
    30f6:	8a 95       	dec	r24
    30f8:	f1 f7       	brne	.-4      	; 0x30f6 <EF_void_LCD_send_data+0x2b8>
    30fa:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(2);
	LCD_CNTRL_PORT &= ~(1<<LCD_ENABLE_PIN);
    30fc:	a5 e3       	ldi	r26, 0x35	; 53
    30fe:	b0 e0       	ldi	r27, 0x00	; 0
    3100:	e5 e3       	ldi	r30, 0x35	; 53
    3102:	f0 e0       	ldi	r31, 0x00	; 0
    3104:	80 81       	ld	r24, Z
    3106:	8f 77       	andi	r24, 0x7F	; 127
    3108:	8c 93       	st	X, r24

	/* output low nibble */
	LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
    310a:	a8 e3       	ldi	r26, 0x38	; 56
    310c:	b0 e0       	ldi	r27, 0x00	; 0
    310e:	e8 e3       	ldi	r30, 0x38	; 56
    3110:	f0 e0       	ldi	r31, 0x00	; 0
    3112:	80 81       	ld	r24, Z
    3114:	8f 77       	andi	r24, 0x7F	; 127
    3116:	8c 93       	st	X, r24
	LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
    3118:	a8 e3       	ldi	r26, 0x38	; 56
    311a:	b0 e0       	ldi	r27, 0x00	; 0
    311c:	e8 e3       	ldi	r30, 0x38	; 56
    311e:	f0 e0       	ldi	r31, 0x00	; 0
    3120:	80 81       	ld	r24, Z
    3122:	8f 7b       	andi	r24, 0xBF	; 191
    3124:	8c 93       	st	X, r24
	LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
    3126:	a8 e3       	ldi	r26, 0x38	; 56
    3128:	b0 e0       	ldi	r27, 0x00	; 0
    312a:	e8 e3       	ldi	r30, 0x38	; 56
    312c:	f0 e0       	ldi	r31, 0x00	; 0
    312e:	80 81       	ld	r24, Z
    3130:	8f 7d       	andi	r24, 0xDF	; 223
    3132:	8c 93       	st	X, r24
	LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
    3134:	a8 e3       	ldi	r26, 0x38	; 56
    3136:	b0 e0       	ldi	r27, 0x00	; 0
    3138:	e8 e3       	ldi	r30, 0x38	; 56
    313a:	f0 e0       	ldi	r31, 0x00	; 0
    313c:	80 81       	ld	r24, Z
    313e:	8f 7e       	andi	r24, 0xEF	; 239
    3140:	8c 93       	st	X, r24
	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    3142:	fe 01       	movw	r30, r28
    3144:	e7 5b       	subi	r30, 0xB7	; 183
    3146:	ff 4f       	sbci	r31, 0xFF	; 255
    3148:	80 81       	ld	r24, Z
    314a:	88 2f       	mov	r24, r24
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	88 70       	andi	r24, 0x08	; 8
    3150:	90 70       	andi	r25, 0x00	; 0
    3152:	00 97       	sbiw	r24, 0x00	; 0
    3154:	39 f0       	breq	.+14     	; 0x3164 <EF_void_LCD_send_data+0x326>
    3156:	a8 e3       	ldi	r26, 0x38	; 56
    3158:	b0 e0       	ldi	r27, 0x00	; 0
    315a:	e8 e3       	ldi	r30, 0x38	; 56
    315c:	f0 e0       	ldi	r31, 0x00	; 0
    315e:	80 81       	ld	r24, Z
    3160:	80 68       	ori	r24, 0x80	; 128
    3162:	8c 93       	st	X, r24
	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
    3164:	fe 01       	movw	r30, r28
    3166:	e7 5b       	subi	r30, 0xB7	; 183
    3168:	ff 4f       	sbci	r31, 0xFF	; 255
    316a:	80 81       	ld	r24, Z
    316c:	88 2f       	mov	r24, r24
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	84 70       	andi	r24, 0x04	; 4
    3172:	90 70       	andi	r25, 0x00	; 0
    3174:	00 97       	sbiw	r24, 0x00	; 0
    3176:	39 f0       	breq	.+14     	; 0x3186 <EF_void_LCD_send_data+0x348>
    3178:	a8 e3       	ldi	r26, 0x38	; 56
    317a:	b0 e0       	ldi	r27, 0x00	; 0
    317c:	e8 e3       	ldi	r30, 0x38	; 56
    317e:	f0 e0       	ldi	r31, 0x00	; 0
    3180:	80 81       	ld	r24, Z
    3182:	80 64       	ori	r24, 0x40	; 64
    3184:	8c 93       	st	X, r24
	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    3186:	fe 01       	movw	r30, r28
    3188:	e7 5b       	subi	r30, 0xB7	; 183
    318a:	ff 4f       	sbci	r31, 0xFF	; 255
    318c:	80 81       	ld	r24, Z
    318e:	88 2f       	mov	r24, r24
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	82 70       	andi	r24, 0x02	; 2
    3194:	90 70       	andi	r25, 0x00	; 0
    3196:	00 97       	sbiw	r24, 0x00	; 0
    3198:	39 f0       	breq	.+14     	; 0x31a8 <EF_void_LCD_send_data+0x36a>
    319a:	a8 e3       	ldi	r26, 0x38	; 56
    319c:	b0 e0       	ldi	r27, 0x00	; 0
    319e:	e8 e3       	ldi	r30, 0x38	; 56
    31a0:	f0 e0       	ldi	r31, 0x00	; 0
    31a2:	80 81       	ld	r24, Z
    31a4:	80 62       	ori	r24, 0x20	; 32
    31a6:	8c 93       	st	X, r24
	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
    31a8:	fe 01       	movw	r30, r28
    31aa:	e7 5b       	subi	r30, 0xB7	; 183
    31ac:	ff 4f       	sbci	r31, 0xFF	; 255
    31ae:	80 81       	ld	r24, Z
    31b0:	88 2f       	mov	r24, r24
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	81 70       	andi	r24, 0x01	; 1
    31b6:	90 70       	andi	r25, 0x00	; 0
    31b8:	88 23       	and	r24, r24
    31ba:	39 f0       	breq	.+14     	; 0x31ca <EF_void_LCD_send_data+0x38c>
    31bc:	a8 e3       	ldi	r26, 0x38	; 56
    31be:	b0 e0       	ldi	r27, 0x00	; 0
    31c0:	e8 e3       	ldi	r30, 0x38	; 56
    31c2:	f0 e0       	ldi	r31, 0x00	; 0
    31c4:	80 81       	ld	r24, Z
    31c6:	80 61       	ori	r24, 0x10	; 16
    31c8:	8c 93       	st	X, r24

	/* make Enable High to low with delay to enable the internal latch at the LCD */
	LCD_CNTRL_PORT |= (1<<LCD_ENABLE_PIN);
    31ca:	a5 e3       	ldi	r26, 0x35	; 53
    31cc:	b0 e0       	ldi	r27, 0x00	; 0
    31ce:	e5 e3       	ldi	r30, 0x35	; 53
    31d0:	f0 e0       	ldi	r31, 0x00	; 0
    31d2:	80 81       	ld	r24, Z
    31d4:	80 68       	ori	r24, 0x80	; 128
    31d6:	8c 93       	st	X, r24
    31d8:	80 e0       	ldi	r24, 0x00	; 0
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	a0 e0       	ldi	r26, 0x00	; 0
    31de:	b0 e4       	ldi	r27, 0x40	; 64
    31e0:	8d a7       	std	Y+45, r24	; 0x2d
    31e2:	9e a7       	std	Y+46, r25	; 0x2e
    31e4:	af a7       	std	Y+47, r26	; 0x2f
    31e6:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    31e8:	6d a5       	ldd	r22, Y+45	; 0x2d
    31ea:	7e a5       	ldd	r23, Y+46	; 0x2e
    31ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    31ee:	98 a9       	ldd	r25, Y+48	; 0x30
    31f0:	2b ea       	ldi	r18, 0xAB	; 171
    31f2:	3a ea       	ldi	r19, 0xAA	; 170
    31f4:	4a ea       	ldi	r20, 0xAA	; 170
    31f6:	5e e3       	ldi	r21, 0x3E	; 62
    31f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31fc:	dc 01       	movw	r26, r24
    31fe:	cb 01       	movw	r24, r22
    3200:	89 a7       	std	Y+41, r24	; 0x29
    3202:	9a a7       	std	Y+42, r25	; 0x2a
    3204:	ab a7       	std	Y+43, r26	; 0x2b
    3206:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3208:	69 a5       	ldd	r22, Y+41	; 0x29
    320a:	7a a5       	ldd	r23, Y+42	; 0x2a
    320c:	8b a5       	ldd	r24, Y+43	; 0x2b
    320e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3210:	20 e0       	ldi	r18, 0x00	; 0
    3212:	30 e0       	ldi	r19, 0x00	; 0
    3214:	40 e8       	ldi	r20, 0x80	; 128
    3216:	5f e3       	ldi	r21, 0x3F	; 63
    3218:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    321c:	88 23       	and	r24, r24
    321e:	1c f4       	brge	.+6      	; 0x3226 <EF_void_LCD_send_data+0x3e8>
		__ticks = 1;
    3220:	81 e0       	ldi	r24, 0x01	; 1
    3222:	88 a7       	std	Y+40, r24	; 0x28
    3224:	91 c0       	rjmp	.+290    	; 0x3348 <EF_void_LCD_send_data+0x50a>
	else if (__tmp > 255)
    3226:	69 a5       	ldd	r22, Y+41	; 0x29
    3228:	7a a5       	ldd	r23, Y+42	; 0x2a
    322a:	8b a5       	ldd	r24, Y+43	; 0x2b
    322c:	9c a5       	ldd	r25, Y+44	; 0x2c
    322e:	20 e0       	ldi	r18, 0x00	; 0
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	4f e7       	ldi	r20, 0x7F	; 127
    3234:	53 e4       	ldi	r21, 0x43	; 67
    3236:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    323a:	18 16       	cp	r1, r24
    323c:	0c f0       	brlt	.+2      	; 0x3240 <EF_void_LCD_send_data+0x402>
    323e:	7b c0       	rjmp	.+246    	; 0x3336 <EF_void_LCD_send_data+0x4f8>
	{
		_delay_ms(__us / 1000.0);
    3240:	6d a5       	ldd	r22, Y+45	; 0x2d
    3242:	7e a5       	ldd	r23, Y+46	; 0x2e
    3244:	8f a5       	ldd	r24, Y+47	; 0x2f
    3246:	98 a9       	ldd	r25, Y+48	; 0x30
    3248:	20 e0       	ldi	r18, 0x00	; 0
    324a:	30 e0       	ldi	r19, 0x00	; 0
    324c:	4a e7       	ldi	r20, 0x7A	; 122
    324e:	54 e4       	ldi	r21, 0x44	; 68
    3250:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3254:	dc 01       	movw	r26, r24
    3256:	cb 01       	movw	r24, r22
    3258:	8c a3       	std	Y+36, r24	; 0x24
    325a:	9d a3       	std	Y+37, r25	; 0x25
    325c:	ae a3       	std	Y+38, r26	; 0x26
    325e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3260:	6c a1       	ldd	r22, Y+36	; 0x24
    3262:	7d a1       	ldd	r23, Y+37	; 0x25
    3264:	8e a1       	ldd	r24, Y+38	; 0x26
    3266:	9f a1       	ldd	r25, Y+39	; 0x27
    3268:	20 e0       	ldi	r18, 0x00	; 0
    326a:	30 e0       	ldi	r19, 0x00	; 0
    326c:	4a e7       	ldi	r20, 0x7A	; 122
    326e:	53 e4       	ldi	r21, 0x43	; 67
    3270:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3274:	dc 01       	movw	r26, r24
    3276:	cb 01       	movw	r24, r22
    3278:	88 a3       	std	Y+32, r24	; 0x20
    327a:	99 a3       	std	Y+33, r25	; 0x21
    327c:	aa a3       	std	Y+34, r26	; 0x22
    327e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3280:	68 a1       	ldd	r22, Y+32	; 0x20
    3282:	79 a1       	ldd	r23, Y+33	; 0x21
    3284:	8a a1       	ldd	r24, Y+34	; 0x22
    3286:	9b a1       	ldd	r25, Y+35	; 0x23
    3288:	20 e0       	ldi	r18, 0x00	; 0
    328a:	30 e0       	ldi	r19, 0x00	; 0
    328c:	40 e8       	ldi	r20, 0x80	; 128
    328e:	5f e3       	ldi	r21, 0x3F	; 63
    3290:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3294:	88 23       	and	r24, r24
    3296:	2c f4       	brge	.+10     	; 0x32a2 <EF_void_LCD_send_data+0x464>
		__ticks = 1;
    3298:	81 e0       	ldi	r24, 0x01	; 1
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	9f 8f       	std	Y+31, r25	; 0x1f
    329e:	8e 8f       	std	Y+30, r24	; 0x1e
    32a0:	3f c0       	rjmp	.+126    	; 0x3320 <EF_void_LCD_send_data+0x4e2>
	else if (__tmp > 65535)
    32a2:	68 a1       	ldd	r22, Y+32	; 0x20
    32a4:	79 a1       	ldd	r23, Y+33	; 0x21
    32a6:	8a a1       	ldd	r24, Y+34	; 0x22
    32a8:	9b a1       	ldd	r25, Y+35	; 0x23
    32aa:	20 e0       	ldi	r18, 0x00	; 0
    32ac:	3f ef       	ldi	r19, 0xFF	; 255
    32ae:	4f e7       	ldi	r20, 0x7F	; 127
    32b0:	57 e4       	ldi	r21, 0x47	; 71
    32b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32b6:	18 16       	cp	r1, r24
    32b8:	4c f5       	brge	.+82     	; 0x330c <EF_void_LCD_send_data+0x4ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ba:	6c a1       	ldd	r22, Y+36	; 0x24
    32bc:	7d a1       	ldd	r23, Y+37	; 0x25
    32be:	8e a1       	ldd	r24, Y+38	; 0x26
    32c0:	9f a1       	ldd	r25, Y+39	; 0x27
    32c2:	20 e0       	ldi	r18, 0x00	; 0
    32c4:	30 e0       	ldi	r19, 0x00	; 0
    32c6:	40 e2       	ldi	r20, 0x20	; 32
    32c8:	51 e4       	ldi	r21, 0x41	; 65
    32ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ce:	dc 01       	movw	r26, r24
    32d0:	cb 01       	movw	r24, r22
    32d2:	bc 01       	movw	r22, r24
    32d4:	cd 01       	movw	r24, r26
    32d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32da:	dc 01       	movw	r26, r24
    32dc:	cb 01       	movw	r24, r22
    32de:	9f 8f       	std	Y+31, r25	; 0x1f
    32e0:	8e 8f       	std	Y+30, r24	; 0x1e
    32e2:	0f c0       	rjmp	.+30     	; 0x3302 <EF_void_LCD_send_data+0x4c4>
    32e4:	89 e1       	ldi	r24, 0x19	; 25
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	9d 8f       	std	Y+29, r25	; 0x1d
    32ea:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    32ec:	8c 8d       	ldd	r24, Y+28	; 0x1c
    32ee:	9d 8d       	ldd	r25, Y+29	; 0x1d
    32f0:	01 97       	sbiw	r24, 0x01	; 1
    32f2:	f1 f7       	brne	.-4      	; 0x32f0 <EF_void_LCD_send_data+0x4b2>
    32f4:	9d 8f       	std	Y+29, r25	; 0x1d
    32f6:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32f8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    32fa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    32fc:	01 97       	sbiw	r24, 0x01	; 1
    32fe:	9f 8f       	std	Y+31, r25	; 0x1f
    3300:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3302:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3304:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3306:	00 97       	sbiw	r24, 0x00	; 0
    3308:	69 f7       	brne	.-38     	; 0x32e4 <EF_void_LCD_send_data+0x4a6>
    330a:	24 c0       	rjmp	.+72     	; 0x3354 <EF_void_LCD_send_data+0x516>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    330c:	68 a1       	ldd	r22, Y+32	; 0x20
    330e:	79 a1       	ldd	r23, Y+33	; 0x21
    3310:	8a a1       	ldd	r24, Y+34	; 0x22
    3312:	9b a1       	ldd	r25, Y+35	; 0x23
    3314:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3318:	dc 01       	movw	r26, r24
    331a:	cb 01       	movw	r24, r22
    331c:	9f 8f       	std	Y+31, r25	; 0x1f
    331e:	8e 8f       	std	Y+30, r24	; 0x1e
    3320:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3322:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3324:	9b 8f       	std	Y+27, r25	; 0x1b
    3326:	8a 8f       	std	Y+26, r24	; 0x1a
    3328:	8a 8d       	ldd	r24, Y+26	; 0x1a
    332a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    332c:	01 97       	sbiw	r24, 0x01	; 1
    332e:	f1 f7       	brne	.-4      	; 0x332c <EF_void_LCD_send_data+0x4ee>
    3330:	9b 8f       	std	Y+27, r25	; 0x1b
    3332:	8a 8f       	std	Y+26, r24	; 0x1a
    3334:	0f c0       	rjmp	.+30     	; 0x3354 <EF_void_LCD_send_data+0x516>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3336:	69 a5       	ldd	r22, Y+41	; 0x29
    3338:	7a a5       	ldd	r23, Y+42	; 0x2a
    333a:	8b a5       	ldd	r24, Y+43	; 0x2b
    333c:	9c a5       	ldd	r25, Y+44	; 0x2c
    333e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3342:	dc 01       	movw	r26, r24
    3344:	cb 01       	movw	r24, r22
    3346:	88 a7       	std	Y+40, r24	; 0x28
    3348:	88 a5       	ldd	r24, Y+40	; 0x28
    334a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    334c:	89 8d       	ldd	r24, Y+25	; 0x19
    334e:	8a 95       	dec	r24
    3350:	f1 f7       	brne	.-4      	; 0x334e <EF_void_LCD_send_data+0x510>
    3352:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(2);
	LCD_CNTRL_PORT &= ~(1<<LCD_ENABLE_PIN);
    3354:	a5 e3       	ldi	r26, 0x35	; 53
    3356:	b0 e0       	ldi	r27, 0x00	; 0
    3358:	e5 e3       	ldi	r30, 0x35	; 53
    335a:	f0 e0       	ldi	r31, 0x00	; 0
    335c:	80 81       	ld	r24, Z
    335e:	8f 77       	andi	r24, 0x7F	; 127
    3360:	8c 93       	st	X, r24
    3362:	80 e0       	ldi	r24, 0x00	; 0
    3364:	90 e0       	ldi	r25, 0x00	; 0
    3366:	a6 e9       	ldi	r26, 0x96	; 150
    3368:	b3 e4       	ldi	r27, 0x43	; 67
    336a:	8d 8b       	std	Y+21, r24	; 0x15
    336c:	9e 8b       	std	Y+22, r25	; 0x16
    336e:	af 8b       	std	Y+23, r26	; 0x17
    3370:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3372:	6d 89       	ldd	r22, Y+21	; 0x15
    3374:	7e 89       	ldd	r23, Y+22	; 0x16
    3376:	8f 89       	ldd	r24, Y+23	; 0x17
    3378:	98 8d       	ldd	r25, Y+24	; 0x18
    337a:	2b ea       	ldi	r18, 0xAB	; 171
    337c:	3a ea       	ldi	r19, 0xAA	; 170
    337e:	4a ea       	ldi	r20, 0xAA	; 170
    3380:	5e e3       	ldi	r21, 0x3E	; 62
    3382:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3386:	dc 01       	movw	r26, r24
    3388:	cb 01       	movw	r24, r22
    338a:	89 8b       	std	Y+17, r24	; 0x11
    338c:	9a 8b       	std	Y+18, r25	; 0x12
    338e:	ab 8b       	std	Y+19, r26	; 0x13
    3390:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3392:	69 89       	ldd	r22, Y+17	; 0x11
    3394:	7a 89       	ldd	r23, Y+18	; 0x12
    3396:	8b 89       	ldd	r24, Y+19	; 0x13
    3398:	9c 89       	ldd	r25, Y+20	; 0x14
    339a:	20 e0       	ldi	r18, 0x00	; 0
    339c:	30 e0       	ldi	r19, 0x00	; 0
    339e:	40 e8       	ldi	r20, 0x80	; 128
    33a0:	5f e3       	ldi	r21, 0x3F	; 63
    33a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33a6:	88 23       	and	r24, r24
    33a8:	1c f4       	brge	.+6      	; 0x33b0 <EF_void_LCD_send_data+0x572>
		__ticks = 1;
    33aa:	81 e0       	ldi	r24, 0x01	; 1
    33ac:	88 8b       	std	Y+16, r24	; 0x10
    33ae:	91 c0       	rjmp	.+290    	; 0x34d2 <EF_void_LCD_send_data+0x694>
	else if (__tmp > 255)
    33b0:	69 89       	ldd	r22, Y+17	; 0x11
    33b2:	7a 89       	ldd	r23, Y+18	; 0x12
    33b4:	8b 89       	ldd	r24, Y+19	; 0x13
    33b6:	9c 89       	ldd	r25, Y+20	; 0x14
    33b8:	20 e0       	ldi	r18, 0x00	; 0
    33ba:	30 e0       	ldi	r19, 0x00	; 0
    33bc:	4f e7       	ldi	r20, 0x7F	; 127
    33be:	53 e4       	ldi	r21, 0x43	; 67
    33c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33c4:	18 16       	cp	r1, r24
    33c6:	0c f0       	brlt	.+2      	; 0x33ca <EF_void_LCD_send_data+0x58c>
    33c8:	7b c0       	rjmp	.+246    	; 0x34c0 <EF_void_LCD_send_data+0x682>
	{
		_delay_ms(__us / 1000.0);
    33ca:	6d 89       	ldd	r22, Y+21	; 0x15
    33cc:	7e 89       	ldd	r23, Y+22	; 0x16
    33ce:	8f 89       	ldd	r24, Y+23	; 0x17
    33d0:	98 8d       	ldd	r25, Y+24	; 0x18
    33d2:	20 e0       	ldi	r18, 0x00	; 0
    33d4:	30 e0       	ldi	r19, 0x00	; 0
    33d6:	4a e7       	ldi	r20, 0x7A	; 122
    33d8:	54 e4       	ldi	r21, 0x44	; 68
    33da:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    33de:	dc 01       	movw	r26, r24
    33e0:	cb 01       	movw	r24, r22
    33e2:	8c 87       	std	Y+12, r24	; 0x0c
    33e4:	9d 87       	std	Y+13, r25	; 0x0d
    33e6:	ae 87       	std	Y+14, r26	; 0x0e
    33e8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33ea:	6c 85       	ldd	r22, Y+12	; 0x0c
    33ec:	7d 85       	ldd	r23, Y+13	; 0x0d
    33ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    33f0:	9f 85       	ldd	r25, Y+15	; 0x0f
    33f2:	20 e0       	ldi	r18, 0x00	; 0
    33f4:	30 e0       	ldi	r19, 0x00	; 0
    33f6:	4a e7       	ldi	r20, 0x7A	; 122
    33f8:	53 e4       	ldi	r21, 0x43	; 67
    33fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33fe:	dc 01       	movw	r26, r24
    3400:	cb 01       	movw	r24, r22
    3402:	88 87       	std	Y+8, r24	; 0x08
    3404:	99 87       	std	Y+9, r25	; 0x09
    3406:	aa 87       	std	Y+10, r26	; 0x0a
    3408:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    340a:	68 85       	ldd	r22, Y+8	; 0x08
    340c:	79 85       	ldd	r23, Y+9	; 0x09
    340e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3410:	9b 85       	ldd	r25, Y+11	; 0x0b
    3412:	20 e0       	ldi	r18, 0x00	; 0
    3414:	30 e0       	ldi	r19, 0x00	; 0
    3416:	40 e8       	ldi	r20, 0x80	; 128
    3418:	5f e3       	ldi	r21, 0x3F	; 63
    341a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    341e:	88 23       	and	r24, r24
    3420:	2c f4       	brge	.+10     	; 0x342c <EF_void_LCD_send_data+0x5ee>
		__ticks = 1;
    3422:	81 e0       	ldi	r24, 0x01	; 1
    3424:	90 e0       	ldi	r25, 0x00	; 0
    3426:	9f 83       	std	Y+7, r25	; 0x07
    3428:	8e 83       	std	Y+6, r24	; 0x06
    342a:	3f c0       	rjmp	.+126    	; 0x34aa <EF_void_LCD_send_data+0x66c>
	else if (__tmp > 65535)
    342c:	68 85       	ldd	r22, Y+8	; 0x08
    342e:	79 85       	ldd	r23, Y+9	; 0x09
    3430:	8a 85       	ldd	r24, Y+10	; 0x0a
    3432:	9b 85       	ldd	r25, Y+11	; 0x0b
    3434:	20 e0       	ldi	r18, 0x00	; 0
    3436:	3f ef       	ldi	r19, 0xFF	; 255
    3438:	4f e7       	ldi	r20, 0x7F	; 127
    343a:	57 e4       	ldi	r21, 0x47	; 71
    343c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3440:	18 16       	cp	r1, r24
    3442:	4c f5       	brge	.+82     	; 0x3496 <EF_void_LCD_send_data+0x658>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3444:	6c 85       	ldd	r22, Y+12	; 0x0c
    3446:	7d 85       	ldd	r23, Y+13	; 0x0d
    3448:	8e 85       	ldd	r24, Y+14	; 0x0e
    344a:	9f 85       	ldd	r25, Y+15	; 0x0f
    344c:	20 e0       	ldi	r18, 0x00	; 0
    344e:	30 e0       	ldi	r19, 0x00	; 0
    3450:	40 e2       	ldi	r20, 0x20	; 32
    3452:	51 e4       	ldi	r21, 0x41	; 65
    3454:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3458:	dc 01       	movw	r26, r24
    345a:	cb 01       	movw	r24, r22
    345c:	bc 01       	movw	r22, r24
    345e:	cd 01       	movw	r24, r26
    3460:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3464:	dc 01       	movw	r26, r24
    3466:	cb 01       	movw	r24, r22
    3468:	9f 83       	std	Y+7, r25	; 0x07
    346a:	8e 83       	std	Y+6, r24	; 0x06
    346c:	0f c0       	rjmp	.+30     	; 0x348c <EF_void_LCD_send_data+0x64e>
    346e:	89 e1       	ldi	r24, 0x19	; 25
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	9d 83       	std	Y+5, r25	; 0x05
    3474:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3476:	8c 81       	ldd	r24, Y+4	; 0x04
    3478:	9d 81       	ldd	r25, Y+5	; 0x05
    347a:	01 97       	sbiw	r24, 0x01	; 1
    347c:	f1 f7       	brne	.-4      	; 0x347a <EF_void_LCD_send_data+0x63c>
    347e:	9d 83       	std	Y+5, r25	; 0x05
    3480:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3482:	8e 81       	ldd	r24, Y+6	; 0x06
    3484:	9f 81       	ldd	r25, Y+7	; 0x07
    3486:	01 97       	sbiw	r24, 0x01	; 1
    3488:	9f 83       	std	Y+7, r25	; 0x07
    348a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    348c:	8e 81       	ldd	r24, Y+6	; 0x06
    348e:	9f 81       	ldd	r25, Y+7	; 0x07
    3490:	00 97       	sbiw	r24, 0x00	; 0
    3492:	69 f7       	brne	.-38     	; 0x346e <EF_void_LCD_send_data+0x630>
    3494:	24 c0       	rjmp	.+72     	; 0x34de <EF_void_LCD_send_data+0x6a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3496:	68 85       	ldd	r22, Y+8	; 0x08
    3498:	79 85       	ldd	r23, Y+9	; 0x09
    349a:	8a 85       	ldd	r24, Y+10	; 0x0a
    349c:	9b 85       	ldd	r25, Y+11	; 0x0b
    349e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34a2:	dc 01       	movw	r26, r24
    34a4:	cb 01       	movw	r24, r22
    34a6:	9f 83       	std	Y+7, r25	; 0x07
    34a8:	8e 83       	std	Y+6, r24	; 0x06
    34aa:	8e 81       	ldd	r24, Y+6	; 0x06
    34ac:	9f 81       	ldd	r25, Y+7	; 0x07
    34ae:	9b 83       	std	Y+3, r25	; 0x03
    34b0:	8a 83       	std	Y+2, r24	; 0x02
    34b2:	8a 81       	ldd	r24, Y+2	; 0x02
    34b4:	9b 81       	ldd	r25, Y+3	; 0x03
    34b6:	01 97       	sbiw	r24, 0x01	; 1
    34b8:	f1 f7       	brne	.-4      	; 0x34b6 <EF_void_LCD_send_data+0x678>
    34ba:	9b 83       	std	Y+3, r25	; 0x03
    34bc:	8a 83       	std	Y+2, r24	; 0x02
    34be:	0f c0       	rjmp	.+30     	; 0x34de <EF_void_LCD_send_data+0x6a0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    34c0:	69 89       	ldd	r22, Y+17	; 0x11
    34c2:	7a 89       	ldd	r23, Y+18	; 0x12
    34c4:	8b 89       	ldd	r24, Y+19	; 0x13
    34c6:	9c 89       	ldd	r25, Y+20	; 0x14
    34c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34cc:	dc 01       	movw	r26, r24
    34ce:	cb 01       	movw	r24, r22
    34d0:	88 8b       	std	Y+16, r24	; 0x10
    34d2:	88 89       	ldd	r24, Y+16	; 0x10
    34d4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    34d6:	89 81       	ldd	r24, Y+1	; 0x01
    34d8:	8a 95       	dec	r24
    34da:	f1 f7       	brne	.-4      	; 0x34d8 <EF_void_LCD_send_data+0x69a>
    34dc:	89 83       	std	Y+1, r24	; 0x01

	/* wait to let LCD running the command*/
	_delay_us(300);
}
    34de:	c7 5b       	subi	r28, 0xB7	; 183
    34e0:	df 4f       	sbci	r29, 0xFF	; 255
    34e2:	0f b6       	in	r0, 0x3f	; 63
    34e4:	f8 94       	cli
    34e6:	de bf       	out	0x3e, r29	; 62
    34e8:	0f be       	out	0x3f, r0	; 63
    34ea:	cd bf       	out	0x3d, r28	; 61
    34ec:	cf 91       	pop	r28
    34ee:	df 91       	pop	r29
    34f0:	1f 91       	pop	r17
    34f2:	0f 91       	pop	r16
    34f4:	08 95       	ret

000034f6 <EF_void_LCD_goto>:
 * PARAMETERS  : u8 y, u8 x.
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_goto(u8 y, u8 x)
{
    34f6:	df 93       	push	r29
    34f8:	cf 93       	push	r28
    34fa:	cd b7       	in	r28, 0x3d	; 61
    34fc:	de b7       	in	r29, 0x3e	; 62
    34fe:	64 97       	sbiw	r28, 0x14	; 20
    3500:	0f b6       	in	r0, 0x3f	; 63
    3502:	f8 94       	cli
    3504:	de bf       	out	0x3e, r29	; 62
    3506:	0f be       	out	0x3f, r0	; 63
    3508:	cd bf       	out	0x3d, r28	; 61
    350a:	8b 8b       	std	Y+19, r24	; 0x13
    350c:	6c 8b       	std	Y+20, r22	; 0x14
	u8 firstAddress[] = {0x80,0xC0,0x94,0xD4};
    350e:	80 e8       	ldi	r24, 0x80	; 128
    3510:	8f 87       	std	Y+15, r24	; 0x0f
    3512:	80 ec       	ldi	r24, 0xC0	; 192
    3514:	88 8b       	std	Y+16, r24	; 0x10
    3516:	84 e9       	ldi	r24, 0x94	; 148
    3518:	89 8b       	std	Y+17, r24	; 0x11
    351a:	84 ed       	ldi	r24, 0xD4	; 212
    351c:	8a 8b       	std	Y+18, r24	; 0x12

	EF_void_LCD_send_command(firstAddress[y-1] + x-1);
    351e:	8b 89       	ldd	r24, Y+19	; 0x13
    3520:	88 2f       	mov	r24, r24
    3522:	90 e0       	ldi	r25, 0x00	; 0
    3524:	9c 01       	movw	r18, r24
    3526:	21 50       	subi	r18, 0x01	; 1
    3528:	30 40       	sbci	r19, 0x00	; 0
    352a:	ce 01       	movw	r24, r28
    352c:	0f 96       	adiw	r24, 0x0f	; 15
    352e:	fc 01       	movw	r30, r24
    3530:	e2 0f       	add	r30, r18
    3532:	f3 1f       	adc	r31, r19
    3534:	90 81       	ld	r25, Z
    3536:	8c 89       	ldd	r24, Y+20	; 0x14
    3538:	89 0f       	add	r24, r25
    353a:	81 50       	subi	r24, 0x01	; 1
    353c:	0e 94 c3 13 	call	0x2786	; 0x2786 <EF_void_LCD_send_command>
    3540:	80 e0       	ldi	r24, 0x00	; 0
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	a0 e2       	ldi	r26, 0x20	; 32
    3546:	b1 e4       	ldi	r27, 0x41	; 65
    3548:	8b 87       	std	Y+11, r24	; 0x0b
    354a:	9c 87       	std	Y+12, r25	; 0x0c
    354c:	ad 87       	std	Y+13, r26	; 0x0d
    354e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3550:	6b 85       	ldd	r22, Y+11	; 0x0b
    3552:	7c 85       	ldd	r23, Y+12	; 0x0c
    3554:	8d 85       	ldd	r24, Y+13	; 0x0d
    3556:	9e 85       	ldd	r25, Y+14	; 0x0e
    3558:	20 e0       	ldi	r18, 0x00	; 0
    355a:	30 e0       	ldi	r19, 0x00	; 0
    355c:	4a e7       	ldi	r20, 0x7A	; 122
    355e:	53 e4       	ldi	r21, 0x43	; 67
    3560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3564:	dc 01       	movw	r26, r24
    3566:	cb 01       	movw	r24, r22
    3568:	8f 83       	std	Y+7, r24	; 0x07
    356a:	98 87       	std	Y+8, r25	; 0x08
    356c:	a9 87       	std	Y+9, r26	; 0x09
    356e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3570:	6f 81       	ldd	r22, Y+7	; 0x07
    3572:	78 85       	ldd	r23, Y+8	; 0x08
    3574:	89 85       	ldd	r24, Y+9	; 0x09
    3576:	9a 85       	ldd	r25, Y+10	; 0x0a
    3578:	20 e0       	ldi	r18, 0x00	; 0
    357a:	30 e0       	ldi	r19, 0x00	; 0
    357c:	40 e8       	ldi	r20, 0x80	; 128
    357e:	5f e3       	ldi	r21, 0x3F	; 63
    3580:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3584:	88 23       	and	r24, r24
    3586:	2c f4       	brge	.+10     	; 0x3592 <EF_void_LCD_goto+0x9c>
		__ticks = 1;
    3588:	81 e0       	ldi	r24, 0x01	; 1
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	9e 83       	std	Y+6, r25	; 0x06
    358e:	8d 83       	std	Y+5, r24	; 0x05
    3590:	3f c0       	rjmp	.+126    	; 0x3610 <EF_void_LCD_goto+0x11a>
	else if (__tmp > 65535)
    3592:	6f 81       	ldd	r22, Y+7	; 0x07
    3594:	78 85       	ldd	r23, Y+8	; 0x08
    3596:	89 85       	ldd	r24, Y+9	; 0x09
    3598:	9a 85       	ldd	r25, Y+10	; 0x0a
    359a:	20 e0       	ldi	r18, 0x00	; 0
    359c:	3f ef       	ldi	r19, 0xFF	; 255
    359e:	4f e7       	ldi	r20, 0x7F	; 127
    35a0:	57 e4       	ldi	r21, 0x47	; 71
    35a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35a6:	18 16       	cp	r1, r24
    35a8:	4c f5       	brge	.+82     	; 0x35fc <EF_void_LCD_goto+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    35ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    35ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    35b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    35b2:	20 e0       	ldi	r18, 0x00	; 0
    35b4:	30 e0       	ldi	r19, 0x00	; 0
    35b6:	40 e2       	ldi	r20, 0x20	; 32
    35b8:	51 e4       	ldi	r21, 0x41	; 65
    35ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35be:	dc 01       	movw	r26, r24
    35c0:	cb 01       	movw	r24, r22
    35c2:	bc 01       	movw	r22, r24
    35c4:	cd 01       	movw	r24, r26
    35c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ca:	dc 01       	movw	r26, r24
    35cc:	cb 01       	movw	r24, r22
    35ce:	9e 83       	std	Y+6, r25	; 0x06
    35d0:	8d 83       	std	Y+5, r24	; 0x05
    35d2:	0f c0       	rjmp	.+30     	; 0x35f2 <EF_void_LCD_goto+0xfc>
    35d4:	89 e1       	ldi	r24, 0x19	; 25
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	9c 83       	std	Y+4, r25	; 0x04
    35da:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    35dc:	8b 81       	ldd	r24, Y+3	; 0x03
    35de:	9c 81       	ldd	r25, Y+4	; 0x04
    35e0:	01 97       	sbiw	r24, 0x01	; 1
    35e2:	f1 f7       	brne	.-4      	; 0x35e0 <EF_void_LCD_goto+0xea>
    35e4:	9c 83       	std	Y+4, r25	; 0x04
    35e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35e8:	8d 81       	ldd	r24, Y+5	; 0x05
    35ea:	9e 81       	ldd	r25, Y+6	; 0x06
    35ec:	01 97       	sbiw	r24, 0x01	; 1
    35ee:	9e 83       	std	Y+6, r25	; 0x06
    35f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35f2:	8d 81       	ldd	r24, Y+5	; 0x05
    35f4:	9e 81       	ldd	r25, Y+6	; 0x06
    35f6:	00 97       	sbiw	r24, 0x00	; 0
    35f8:	69 f7       	brne	.-38     	; 0x35d4 <EF_void_LCD_goto+0xde>
    35fa:	14 c0       	rjmp	.+40     	; 0x3624 <EF_void_LCD_goto+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35fc:	6f 81       	ldd	r22, Y+7	; 0x07
    35fe:	78 85       	ldd	r23, Y+8	; 0x08
    3600:	89 85       	ldd	r24, Y+9	; 0x09
    3602:	9a 85       	ldd	r25, Y+10	; 0x0a
    3604:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3608:	dc 01       	movw	r26, r24
    360a:	cb 01       	movw	r24, r22
    360c:	9e 83       	std	Y+6, r25	; 0x06
    360e:	8d 83       	std	Y+5, r24	; 0x05
    3610:	8d 81       	ldd	r24, Y+5	; 0x05
    3612:	9e 81       	ldd	r25, Y+6	; 0x06
    3614:	9a 83       	std	Y+2, r25	; 0x02
    3616:	89 83       	std	Y+1, r24	; 0x01
    3618:	89 81       	ldd	r24, Y+1	; 0x01
    361a:	9a 81       	ldd	r25, Y+2	; 0x02
    361c:	01 97       	sbiw	r24, 0x01	; 1
    361e:	f1 f7       	brne	.-4      	; 0x361c <EF_void_LCD_goto+0x126>
    3620:	9a 83       	std	Y+2, r25	; 0x02
    3622:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    3624:	64 96       	adiw	r28, 0x14	; 20
    3626:	0f b6       	in	r0, 0x3f	; 63
    3628:	f8 94       	cli
    362a:	de bf       	out	0x3e, r29	; 62
    362c:	0f be       	out	0x3f, r0	; 63
    362e:	cd bf       	out	0x3d, r28	; 61
    3630:	cf 91       	pop	r28
    3632:	df 91       	pop	r29
    3634:	08 95       	ret

00003636 <EF_void_LCD_print_NUM>:
*				take 1 for first row, 2: for the second row
*
* Return Value: Void.
***********************************************************************/
void EF_void_LCD_print_NUM(s32 s16Numberstring,u8 u8RowNumber)
{
    3636:	df 93       	push	r29
    3638:	cf 93       	push	r28
    363a:	cd b7       	in	r28, 0x3d	; 61
    363c:	de b7       	in	r29, 0x3e	; 62
    363e:	2a 97       	sbiw	r28, 0x0a	; 10
    3640:	0f b6       	in	r0, 0x3f	; 63
    3642:	f8 94       	cli
    3644:	de bf       	out	0x3e, r29	; 62
    3646:	0f be       	out	0x3f, r0	; 63
    3648:	cd bf       	out	0x3d, r28	; 61
    364a:	99 87       	std	Y+9, r25	; 0x09
    364c:	88 87       	std	Y+8, r24	; 0x08
    364e:	6a 87       	std	Y+10, r22	; 0x0a
	u8 ArrayIndex = 0;
    3650:	19 82       	std	Y+1, r1	; 0x01
	u8 s8DisplayStr[6] = {0};
    3652:	86 e0       	ldi	r24, 0x06	; 6
    3654:	fe 01       	movw	r30, r28
    3656:	32 96       	adiw	r30, 0x02	; 2
    3658:	df 01       	movw	r26, r30
    365a:	98 2f       	mov	r25, r24
    365c:	1d 92       	st	X+, r1
    365e:	9a 95       	dec	r25
    3660:	e9 f7       	brne	.-6      	; 0x365c <EF_void_LCD_print_NUM+0x26>
	/* convert number to ASCII */
	itoa( (int )s16Numberstring,  (char*)s8DisplayStr, 10);
    3662:	88 85       	ldd	r24, Y+8	; 0x08
    3664:	99 85       	ldd	r25, Y+9	; 0x09
    3666:	9e 01       	movw	r18, r28
    3668:	2e 5f       	subi	r18, 0xFE	; 254
    366a:	3f 4f       	sbci	r19, 0xFF	; 255
    366c:	b9 01       	movw	r22, r18
    366e:	4a e0       	ldi	r20, 0x0A	; 10
    3670:	50 e0       	ldi	r21, 0x00	; 0
    3672:	0e 94 d7 20 	call	0x41ae	; 0x41ae <itoa>
	for(ArrayIndex = 0; s8DisplayStr[ArrayIndex] != 0; ArrayIndex++)
    3676:	19 82       	std	Y+1, r1	; 0x01
    3678:	15 c0       	rjmp	.+42     	; 0x36a4 <EF_void_LCD_print_NUM+0x6e>
	{
		EF_void_LCD_goto(u8RowNumber, (ArrayIndex + 1));
    367a:	89 81       	ldd	r24, Y+1	; 0x01
    367c:	98 2f       	mov	r25, r24
    367e:	9f 5f       	subi	r25, 0xFF	; 255
    3680:	8a 85       	ldd	r24, Y+10	; 0x0a
    3682:	69 2f       	mov	r22, r25
    3684:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <EF_void_LCD_goto>
		EF_void_LCD_send_data(s8DisplayStr[ArrayIndex]);
    3688:	89 81       	ldd	r24, Y+1	; 0x01
    368a:	28 2f       	mov	r18, r24
    368c:	30 e0       	ldi	r19, 0x00	; 0
    368e:	ce 01       	movw	r24, r28
    3690:	02 96       	adiw	r24, 0x02	; 2
    3692:	fc 01       	movw	r30, r24
    3694:	e2 0f       	add	r30, r18
    3696:	f3 1f       	adc	r31, r19
    3698:	80 81       	ld	r24, Z
    369a:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <EF_void_LCD_send_data>
{
	u8 ArrayIndex = 0;
	u8 s8DisplayStr[6] = {0};
	/* convert number to ASCII */
	itoa( (int )s16Numberstring,  (char*)s8DisplayStr, 10);
	for(ArrayIndex = 0; s8DisplayStr[ArrayIndex] != 0; ArrayIndex++)
    369e:	89 81       	ldd	r24, Y+1	; 0x01
    36a0:	8f 5f       	subi	r24, 0xFF	; 255
    36a2:	89 83       	std	Y+1, r24	; 0x01
    36a4:	89 81       	ldd	r24, Y+1	; 0x01
    36a6:	28 2f       	mov	r18, r24
    36a8:	30 e0       	ldi	r19, 0x00	; 0
    36aa:	ce 01       	movw	r24, r28
    36ac:	02 96       	adiw	r24, 0x02	; 2
    36ae:	fc 01       	movw	r30, r24
    36b0:	e2 0f       	add	r30, r18
    36b2:	f3 1f       	adc	r31, r19
    36b4:	80 81       	ld	r24, Z
    36b6:	88 23       	and	r24, r24
    36b8:	01 f7       	brne	.-64     	; 0x367a <EF_void_LCD_print_NUM+0x44>
	{
		EF_void_LCD_goto(u8RowNumber, (ArrayIndex + 1));
		EF_void_LCD_send_data(s8DisplayStr[ArrayIndex]);
	}
}
    36ba:	2a 96       	adiw	r28, 0x0a	; 10
    36bc:	0f b6       	in	r0, 0x3f	; 63
    36be:	f8 94       	cli
    36c0:	de bf       	out	0x3e, r29	; 62
    36c2:	0f be       	out	0x3f, r0	; 63
    36c4:	cd bf       	out	0x3d, r28	; 61
    36c6:	cf 91       	pop	r28
    36c8:	df 91       	pop	r29
    36ca:	08 95       	ret

000036cc <EF_void_LCD_print>:
* PARAMETERS  : u8 *string:  String User want to send.
*
* Return Value: Void.
***********************************************************************/
void EF_void_LCD_print(unsigned char *string)
{
    36cc:	df 93       	push	r29
    36ce:	cf 93       	push	r28
    36d0:	00 d0       	rcall	.+0      	; 0x36d2 <EF_void_LCD_print+0x6>
    36d2:	0f 92       	push	r0
    36d4:	cd b7       	in	r28, 0x3d	; 61
    36d6:	de b7       	in	r29, 0x3e	; 62
    36d8:	9b 83       	std	Y+3, r25	; 0x03
    36da:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    36dc:	19 82       	std	Y+1, r1	; 0x01
    36de:	0e c0       	rjmp	.+28     	; 0x36fc <EF_void_LCD_print+0x30>

	while(string[i]!=0)
	{
		EF_void_LCD_send_data(string[i]);
    36e0:	89 81       	ldd	r24, Y+1	; 0x01
    36e2:	28 2f       	mov	r18, r24
    36e4:	30 e0       	ldi	r19, 0x00	; 0
    36e6:	8a 81       	ldd	r24, Y+2	; 0x02
    36e8:	9b 81       	ldd	r25, Y+3	; 0x03
    36ea:	fc 01       	movw	r30, r24
    36ec:	e2 0f       	add	r30, r18
    36ee:	f3 1f       	adc	r31, r19
    36f0:	80 81       	ld	r24, Z
    36f2:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <EF_void_LCD_send_data>
		i++;
    36f6:	89 81       	ldd	r24, Y+1	; 0x01
    36f8:	8f 5f       	subi	r24, 0xFF	; 255
    36fa:	89 83       	std	Y+1, r24	; 0x01
***********************************************************************/
void EF_void_LCD_print(unsigned char *string)
{
	u8 i = 0;

	while(string[i]!=0)
    36fc:	89 81       	ldd	r24, Y+1	; 0x01
    36fe:	28 2f       	mov	r18, r24
    3700:	30 e0       	ldi	r19, 0x00	; 0
    3702:	8a 81       	ldd	r24, Y+2	; 0x02
    3704:	9b 81       	ldd	r25, Y+3	; 0x03
    3706:	fc 01       	movw	r30, r24
    3708:	e2 0f       	add	r30, r18
    370a:	f3 1f       	adc	r31, r19
    370c:	80 81       	ld	r24, Z
    370e:	88 23       	and	r24, r24
    3710:	39 f7       	brne	.-50     	; 0x36e0 <EF_void_LCD_print+0x14>
	{
		EF_void_LCD_send_data(string[i]);
		i++;
	}
}
    3712:	0f 90       	pop	r0
    3714:	0f 90       	pop	r0
    3716:	0f 90       	pop	r0
    3718:	cf 91       	pop	r28
    371a:	df 91       	pop	r29
    371c:	08 95       	ret

0000371e <EF_void_LCD_print_ByLength>:
* 				u8  length:  number of characters to be displayed
*
* Return Value: Void.
***********************************************************************/
void EF_void_LCD_print_ByLength(unsigned char *string, u8 length)
{
    371e:	df 93       	push	r29
    3720:	cf 93       	push	r28
    3722:	00 d0       	rcall	.+0      	; 0x3724 <EF_void_LCD_print_ByLength+0x6>
    3724:	00 d0       	rcall	.+0      	; 0x3726 <EF_void_LCD_print_ByLength+0x8>
    3726:	cd b7       	in	r28, 0x3d	; 61
    3728:	de b7       	in	r29, 0x3e	; 62
    372a:	9b 83       	std	Y+3, r25	; 0x03
    372c:	8a 83       	std	Y+2, r24	; 0x02
    372e:	6c 83       	std	Y+4, r22	; 0x04
	u8 i = 0;
    3730:	19 82       	std	Y+1, r1	; 0x01
    3732:	0e c0       	rjmp	.+28     	; 0x3750 <EF_void_LCD_print_ByLength+0x32>

	while( i < length)
	{
		EF_void_LCD_send_data(string[i]);
    3734:	89 81       	ldd	r24, Y+1	; 0x01
    3736:	28 2f       	mov	r18, r24
    3738:	30 e0       	ldi	r19, 0x00	; 0
    373a:	8a 81       	ldd	r24, Y+2	; 0x02
    373c:	9b 81       	ldd	r25, Y+3	; 0x03
    373e:	fc 01       	movw	r30, r24
    3740:	e2 0f       	add	r30, r18
    3742:	f3 1f       	adc	r31, r19
    3744:	80 81       	ld	r24, Z
    3746:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <EF_void_LCD_send_data>
		i++;
    374a:	89 81       	ldd	r24, Y+1	; 0x01
    374c:	8f 5f       	subi	r24, 0xFF	; 255
    374e:	89 83       	std	Y+1, r24	; 0x01
***********************************************************************/
void EF_void_LCD_print_ByLength(unsigned char *string, u8 length)
{
	u8 i = 0;

	while( i < length)
    3750:	99 81       	ldd	r25, Y+1	; 0x01
    3752:	8c 81       	ldd	r24, Y+4	; 0x04
    3754:	98 17       	cp	r25, r24
    3756:	70 f3       	brcs	.-36     	; 0x3734 <EF_void_LCD_print_ByLength+0x16>
	{
		EF_void_LCD_send_data(string[i]);
		i++;
	}
}
    3758:	0f 90       	pop	r0
    375a:	0f 90       	pop	r0
    375c:	0f 90       	pop	r0
    375e:	0f 90       	pop	r0
    3760:	cf 91       	pop	r28
    3762:	df 91       	pop	r29
    3764:	08 95       	ret

00003766 <EF_void_LCD_Clear_Screen>:
* PARAMETERS  : Void.
*
* Return Value: Void.
***********************************************************************/
void EF_void_LCD_Clear_Screen(void)
{
    3766:	df 93       	push	r29
    3768:	cf 93       	push	r28
    376a:	cd b7       	in	r28, 0x3d	; 61
    376c:	de b7       	in	r29, 0x3e	; 62
    376e:	a6 97       	sbiw	r28, 0x26	; 38
    3770:	0f b6       	in	r0, 0x3f	; 63
    3772:	f8 94       	cli
    3774:	de bf       	out	0x3e, r29	; 62
    3776:	0f be       	out	0x3f, r0	; 63
    3778:	cd bf       	out	0x3d, r28	; 61
	EF_void_LCD_send_command(1<<0);
    377a:	81 e0       	ldi	r24, 0x01	; 1
    377c:	0e 94 c3 13 	call	0x2786	; 0x2786 <EF_void_LCD_send_command>
    3780:	80 e0       	ldi	r24, 0x00	; 0
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	a0 e0       	ldi	r26, 0x00	; 0
    3786:	b0 e4       	ldi	r27, 0x40	; 64
    3788:	8b a3       	std	Y+35, r24	; 0x23
    378a:	9c a3       	std	Y+36, r25	; 0x24
    378c:	ad a3       	std	Y+37, r26	; 0x25
    378e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3790:	6b a1       	ldd	r22, Y+35	; 0x23
    3792:	7c a1       	ldd	r23, Y+36	; 0x24
    3794:	8d a1       	ldd	r24, Y+37	; 0x25
    3796:	9e a1       	ldd	r25, Y+38	; 0x26
    3798:	2b ea       	ldi	r18, 0xAB	; 171
    379a:	3a ea       	ldi	r19, 0xAA	; 170
    379c:	4a ea       	ldi	r20, 0xAA	; 170
    379e:	5e e3       	ldi	r21, 0x3E	; 62
    37a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37a4:	dc 01       	movw	r26, r24
    37a6:	cb 01       	movw	r24, r22
    37a8:	8f 8f       	std	Y+31, r24	; 0x1f
    37aa:	98 a3       	std	Y+32, r25	; 0x20
    37ac:	a9 a3       	std	Y+33, r26	; 0x21
    37ae:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    37b0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    37b2:	78 a1       	ldd	r23, Y+32	; 0x20
    37b4:	89 a1       	ldd	r24, Y+33	; 0x21
    37b6:	9a a1       	ldd	r25, Y+34	; 0x22
    37b8:	20 e0       	ldi	r18, 0x00	; 0
    37ba:	30 e0       	ldi	r19, 0x00	; 0
    37bc:	40 e8       	ldi	r20, 0x80	; 128
    37be:	5f e3       	ldi	r21, 0x3F	; 63
    37c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37c4:	88 23       	and	r24, r24
    37c6:	1c f4       	brge	.+6      	; 0x37ce <EF_void_LCD_Clear_Screen+0x68>
		__ticks = 1;
    37c8:	81 e0       	ldi	r24, 0x01	; 1
    37ca:	8e 8f       	std	Y+30, r24	; 0x1e
    37cc:	91 c0       	rjmp	.+290    	; 0x38f0 <EF_void_LCD_Clear_Screen+0x18a>
	else if (__tmp > 255)
    37ce:	6f 8d       	ldd	r22, Y+31	; 0x1f
    37d0:	78 a1       	ldd	r23, Y+32	; 0x20
    37d2:	89 a1       	ldd	r24, Y+33	; 0x21
    37d4:	9a a1       	ldd	r25, Y+34	; 0x22
    37d6:	20 e0       	ldi	r18, 0x00	; 0
    37d8:	30 e0       	ldi	r19, 0x00	; 0
    37da:	4f e7       	ldi	r20, 0x7F	; 127
    37dc:	53 e4       	ldi	r21, 0x43	; 67
    37de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37e2:	18 16       	cp	r1, r24
    37e4:	0c f0       	brlt	.+2      	; 0x37e8 <EF_void_LCD_Clear_Screen+0x82>
    37e6:	7b c0       	rjmp	.+246    	; 0x38de <EF_void_LCD_Clear_Screen+0x178>
	{
		_delay_ms(__us / 1000.0);
    37e8:	6b a1       	ldd	r22, Y+35	; 0x23
    37ea:	7c a1       	ldd	r23, Y+36	; 0x24
    37ec:	8d a1       	ldd	r24, Y+37	; 0x25
    37ee:	9e a1       	ldd	r25, Y+38	; 0x26
    37f0:	20 e0       	ldi	r18, 0x00	; 0
    37f2:	30 e0       	ldi	r19, 0x00	; 0
    37f4:	4a e7       	ldi	r20, 0x7A	; 122
    37f6:	54 e4       	ldi	r21, 0x44	; 68
    37f8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    37fc:	dc 01       	movw	r26, r24
    37fe:	cb 01       	movw	r24, r22
    3800:	8a 8f       	std	Y+26, r24	; 0x1a
    3802:	9b 8f       	std	Y+27, r25	; 0x1b
    3804:	ac 8f       	std	Y+28, r26	; 0x1c
    3806:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3808:	6a 8d       	ldd	r22, Y+26	; 0x1a
    380a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    380c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    380e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3810:	20 e0       	ldi	r18, 0x00	; 0
    3812:	30 e0       	ldi	r19, 0x00	; 0
    3814:	4a e7       	ldi	r20, 0x7A	; 122
    3816:	53 e4       	ldi	r21, 0x43	; 67
    3818:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    381c:	dc 01       	movw	r26, r24
    381e:	cb 01       	movw	r24, r22
    3820:	8e 8b       	std	Y+22, r24	; 0x16
    3822:	9f 8b       	std	Y+23, r25	; 0x17
    3824:	a8 8f       	std	Y+24, r26	; 0x18
    3826:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    3828:	6e 89       	ldd	r22, Y+22	; 0x16
    382a:	7f 89       	ldd	r23, Y+23	; 0x17
    382c:	88 8d       	ldd	r24, Y+24	; 0x18
    382e:	99 8d       	ldd	r25, Y+25	; 0x19
    3830:	20 e0       	ldi	r18, 0x00	; 0
    3832:	30 e0       	ldi	r19, 0x00	; 0
    3834:	40 e8       	ldi	r20, 0x80	; 128
    3836:	5f e3       	ldi	r21, 0x3F	; 63
    3838:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    383c:	88 23       	and	r24, r24
    383e:	2c f4       	brge	.+10     	; 0x384a <EF_void_LCD_Clear_Screen+0xe4>
		__ticks = 1;
    3840:	81 e0       	ldi	r24, 0x01	; 1
    3842:	90 e0       	ldi	r25, 0x00	; 0
    3844:	9d 8b       	std	Y+21, r25	; 0x15
    3846:	8c 8b       	std	Y+20, r24	; 0x14
    3848:	3f c0       	rjmp	.+126    	; 0x38c8 <EF_void_LCD_Clear_Screen+0x162>
	else if (__tmp > 65535)
    384a:	6e 89       	ldd	r22, Y+22	; 0x16
    384c:	7f 89       	ldd	r23, Y+23	; 0x17
    384e:	88 8d       	ldd	r24, Y+24	; 0x18
    3850:	99 8d       	ldd	r25, Y+25	; 0x19
    3852:	20 e0       	ldi	r18, 0x00	; 0
    3854:	3f ef       	ldi	r19, 0xFF	; 255
    3856:	4f e7       	ldi	r20, 0x7F	; 127
    3858:	57 e4       	ldi	r21, 0x47	; 71
    385a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    385e:	18 16       	cp	r1, r24
    3860:	4c f5       	brge	.+82     	; 0x38b4 <EF_void_LCD_Clear_Screen+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3862:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3864:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3866:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3868:	9d 8d       	ldd	r25, Y+29	; 0x1d
    386a:	20 e0       	ldi	r18, 0x00	; 0
    386c:	30 e0       	ldi	r19, 0x00	; 0
    386e:	40 e2       	ldi	r20, 0x20	; 32
    3870:	51 e4       	ldi	r21, 0x41	; 65
    3872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3876:	dc 01       	movw	r26, r24
    3878:	cb 01       	movw	r24, r22
    387a:	bc 01       	movw	r22, r24
    387c:	cd 01       	movw	r24, r26
    387e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3882:	dc 01       	movw	r26, r24
    3884:	cb 01       	movw	r24, r22
    3886:	9d 8b       	std	Y+21, r25	; 0x15
    3888:	8c 8b       	std	Y+20, r24	; 0x14
    388a:	0f c0       	rjmp	.+30     	; 0x38aa <EF_void_LCD_Clear_Screen+0x144>
    388c:	89 e1       	ldi	r24, 0x19	; 25
    388e:	90 e0       	ldi	r25, 0x00	; 0
    3890:	9b 8b       	std	Y+19, r25	; 0x13
    3892:	8a 8b       	std	Y+18, r24	; 0x12
    3894:	8a 89       	ldd	r24, Y+18	; 0x12
    3896:	9b 89       	ldd	r25, Y+19	; 0x13
    3898:	01 97       	sbiw	r24, 0x01	; 1
    389a:	f1 f7       	brne	.-4      	; 0x3898 <EF_void_LCD_Clear_Screen+0x132>
    389c:	9b 8b       	std	Y+19, r25	; 0x13
    389e:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38a0:	8c 89       	ldd	r24, Y+20	; 0x14
    38a2:	9d 89       	ldd	r25, Y+21	; 0x15
    38a4:	01 97       	sbiw	r24, 0x01	; 1
    38a6:	9d 8b       	std	Y+21, r25	; 0x15
    38a8:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38aa:	8c 89       	ldd	r24, Y+20	; 0x14
    38ac:	9d 89       	ldd	r25, Y+21	; 0x15
    38ae:	00 97       	sbiw	r24, 0x00	; 0
    38b0:	69 f7       	brne	.-38     	; 0x388c <EF_void_LCD_Clear_Screen+0x126>
    38b2:	24 c0       	rjmp	.+72     	; 0x38fc <EF_void_LCD_Clear_Screen+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38b4:	6e 89       	ldd	r22, Y+22	; 0x16
    38b6:	7f 89       	ldd	r23, Y+23	; 0x17
    38b8:	88 8d       	ldd	r24, Y+24	; 0x18
    38ba:	99 8d       	ldd	r25, Y+25	; 0x19
    38bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38c0:	dc 01       	movw	r26, r24
    38c2:	cb 01       	movw	r24, r22
    38c4:	9d 8b       	std	Y+21, r25	; 0x15
    38c6:	8c 8b       	std	Y+20, r24	; 0x14
    38c8:	8c 89       	ldd	r24, Y+20	; 0x14
    38ca:	9d 89       	ldd	r25, Y+21	; 0x15
    38cc:	99 8b       	std	Y+17, r25	; 0x11
    38ce:	88 8b       	std	Y+16, r24	; 0x10
    38d0:	88 89       	ldd	r24, Y+16	; 0x10
    38d2:	99 89       	ldd	r25, Y+17	; 0x11
    38d4:	01 97       	sbiw	r24, 0x01	; 1
    38d6:	f1 f7       	brne	.-4      	; 0x38d4 <EF_void_LCD_Clear_Screen+0x16e>
    38d8:	99 8b       	std	Y+17, r25	; 0x11
    38da:	88 8b       	std	Y+16, r24	; 0x10
    38dc:	0f c0       	rjmp	.+30     	; 0x38fc <EF_void_LCD_Clear_Screen+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    38de:	6f 8d       	ldd	r22, Y+31	; 0x1f
    38e0:	78 a1       	ldd	r23, Y+32	; 0x20
    38e2:	89 a1       	ldd	r24, Y+33	; 0x21
    38e4:	9a a1       	ldd	r25, Y+34	; 0x22
    38e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ea:	dc 01       	movw	r26, r24
    38ec:	cb 01       	movw	r24, r22
    38ee:	8e 8f       	std	Y+30, r24	; 0x1e
    38f0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    38f2:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    38f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    38f6:	8a 95       	dec	r24
    38f8:	f1 f7       	brne	.-4      	; 0x38f6 <EF_void_LCD_Clear_Screen+0x190>
    38fa:	8f 87       	std	Y+15, r24	; 0x0f
    38fc:	80 e0       	ldi	r24, 0x00	; 0
    38fe:	90 e0       	ldi	r25, 0x00	; 0
    3900:	a0 e2       	ldi	r26, 0x20	; 32
    3902:	b1 e4       	ldi	r27, 0x41	; 65
    3904:	8b 87       	std	Y+11, r24	; 0x0b
    3906:	9c 87       	std	Y+12, r25	; 0x0c
    3908:	ad 87       	std	Y+13, r26	; 0x0d
    390a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    390c:	6b 85       	ldd	r22, Y+11	; 0x0b
    390e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3910:	8d 85       	ldd	r24, Y+13	; 0x0d
    3912:	9e 85       	ldd	r25, Y+14	; 0x0e
    3914:	20 e0       	ldi	r18, 0x00	; 0
    3916:	30 e0       	ldi	r19, 0x00	; 0
    3918:	4a e7       	ldi	r20, 0x7A	; 122
    391a:	53 e4       	ldi	r21, 0x43	; 67
    391c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3920:	dc 01       	movw	r26, r24
    3922:	cb 01       	movw	r24, r22
    3924:	8f 83       	std	Y+7, r24	; 0x07
    3926:	98 87       	std	Y+8, r25	; 0x08
    3928:	a9 87       	std	Y+9, r26	; 0x09
    392a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    392c:	6f 81       	ldd	r22, Y+7	; 0x07
    392e:	78 85       	ldd	r23, Y+8	; 0x08
    3930:	89 85       	ldd	r24, Y+9	; 0x09
    3932:	9a 85       	ldd	r25, Y+10	; 0x0a
    3934:	20 e0       	ldi	r18, 0x00	; 0
    3936:	30 e0       	ldi	r19, 0x00	; 0
    3938:	40 e8       	ldi	r20, 0x80	; 128
    393a:	5f e3       	ldi	r21, 0x3F	; 63
    393c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3940:	88 23       	and	r24, r24
    3942:	2c f4       	brge	.+10     	; 0x394e <EF_void_LCD_Clear_Screen+0x1e8>
		__ticks = 1;
    3944:	81 e0       	ldi	r24, 0x01	; 1
    3946:	90 e0       	ldi	r25, 0x00	; 0
    3948:	9e 83       	std	Y+6, r25	; 0x06
    394a:	8d 83       	std	Y+5, r24	; 0x05
    394c:	3f c0       	rjmp	.+126    	; 0x39cc <EF_void_LCD_Clear_Screen+0x266>
	else if (__tmp > 65535)
    394e:	6f 81       	ldd	r22, Y+7	; 0x07
    3950:	78 85       	ldd	r23, Y+8	; 0x08
    3952:	89 85       	ldd	r24, Y+9	; 0x09
    3954:	9a 85       	ldd	r25, Y+10	; 0x0a
    3956:	20 e0       	ldi	r18, 0x00	; 0
    3958:	3f ef       	ldi	r19, 0xFF	; 255
    395a:	4f e7       	ldi	r20, 0x7F	; 127
    395c:	57 e4       	ldi	r21, 0x47	; 71
    395e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3962:	18 16       	cp	r1, r24
    3964:	4c f5       	brge	.+82     	; 0x39b8 <EF_void_LCD_Clear_Screen+0x252>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3966:	6b 85       	ldd	r22, Y+11	; 0x0b
    3968:	7c 85       	ldd	r23, Y+12	; 0x0c
    396a:	8d 85       	ldd	r24, Y+13	; 0x0d
    396c:	9e 85       	ldd	r25, Y+14	; 0x0e
    396e:	20 e0       	ldi	r18, 0x00	; 0
    3970:	30 e0       	ldi	r19, 0x00	; 0
    3972:	40 e2       	ldi	r20, 0x20	; 32
    3974:	51 e4       	ldi	r21, 0x41	; 65
    3976:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    397a:	dc 01       	movw	r26, r24
    397c:	cb 01       	movw	r24, r22
    397e:	bc 01       	movw	r22, r24
    3980:	cd 01       	movw	r24, r26
    3982:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3986:	dc 01       	movw	r26, r24
    3988:	cb 01       	movw	r24, r22
    398a:	9e 83       	std	Y+6, r25	; 0x06
    398c:	8d 83       	std	Y+5, r24	; 0x05
    398e:	0f c0       	rjmp	.+30     	; 0x39ae <EF_void_LCD_Clear_Screen+0x248>
    3990:	89 e1       	ldi	r24, 0x19	; 25
    3992:	90 e0       	ldi	r25, 0x00	; 0
    3994:	9c 83       	std	Y+4, r25	; 0x04
    3996:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3998:	8b 81       	ldd	r24, Y+3	; 0x03
    399a:	9c 81       	ldd	r25, Y+4	; 0x04
    399c:	01 97       	sbiw	r24, 0x01	; 1
    399e:	f1 f7       	brne	.-4      	; 0x399c <EF_void_LCD_Clear_Screen+0x236>
    39a0:	9c 83       	std	Y+4, r25	; 0x04
    39a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39a4:	8d 81       	ldd	r24, Y+5	; 0x05
    39a6:	9e 81       	ldd	r25, Y+6	; 0x06
    39a8:	01 97       	sbiw	r24, 0x01	; 1
    39aa:	9e 83       	std	Y+6, r25	; 0x06
    39ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39ae:	8d 81       	ldd	r24, Y+5	; 0x05
    39b0:	9e 81       	ldd	r25, Y+6	; 0x06
    39b2:	00 97       	sbiw	r24, 0x00	; 0
    39b4:	69 f7       	brne	.-38     	; 0x3990 <EF_void_LCD_Clear_Screen+0x22a>
    39b6:	14 c0       	rjmp	.+40     	; 0x39e0 <EF_void_LCD_Clear_Screen+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39b8:	6f 81       	ldd	r22, Y+7	; 0x07
    39ba:	78 85       	ldd	r23, Y+8	; 0x08
    39bc:	89 85       	ldd	r24, Y+9	; 0x09
    39be:	9a 85       	ldd	r25, Y+10	; 0x0a
    39c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c4:	dc 01       	movw	r26, r24
    39c6:	cb 01       	movw	r24, r22
    39c8:	9e 83       	std	Y+6, r25	; 0x06
    39ca:	8d 83       	std	Y+5, r24	; 0x05
    39cc:	8d 81       	ldd	r24, Y+5	; 0x05
    39ce:	9e 81       	ldd	r25, Y+6	; 0x06
    39d0:	9a 83       	std	Y+2, r25	; 0x02
    39d2:	89 83       	std	Y+1, r24	; 0x01
    39d4:	89 81       	ldd	r24, Y+1	; 0x01
    39d6:	9a 81       	ldd	r25, Y+2	; 0x02
    39d8:	01 97       	sbiw	r24, 0x01	; 1
    39da:	f1 f7       	brne	.-4      	; 0x39d8 <EF_void_LCD_Clear_Screen+0x272>
    39dc:	9a 83       	std	Y+2, r25	; 0x02
    39de:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2);
	_delay_ms(10);
}
    39e0:	a6 96       	adiw	r28, 0x26	; 38
    39e2:	0f b6       	in	r0, 0x3f	; 63
    39e4:	f8 94       	cli
    39e6:	de bf       	out	0x3e, r29	; 62
    39e8:	0f be       	out	0x3f, r0	; 63
    39ea:	cd bf       	out	0x3d, r28	; 61
    39ec:	cf 91       	pop	r28
    39ee:	df 91       	pop	r29
    39f0:	08 95       	ret

000039f2 <EF_void_uploadCustomChar>:
*
* Return Value: Void.
***********************************************************************/
void EF_void_uploadCustomChar(u8 location, unsigned char *character)

{
    39f2:	df 93       	push	r29
    39f4:	cf 93       	push	r28
    39f6:	00 d0       	rcall	.+0      	; 0x39f8 <EF_void_uploadCustomChar+0x6>
    39f8:	00 d0       	rcall	.+0      	; 0x39fa <EF_void_uploadCustomChar+0x8>
    39fa:	cd b7       	in	r28, 0x3d	; 61
    39fc:	de b7       	in	r29, 0x3e	; 62
    39fe:	8a 83       	std	Y+2, r24	; 0x02
    3a00:	7c 83       	std	Y+4, r23	; 0x04
    3a02:	6b 83       	std	Y+3, r22	; 0x03
	u8 ArrayIndex;
	/* the Add offset must be 0 to 7*/
	if (location < 8)
    3a04:	8a 81       	ldd	r24, Y+2	; 0x02
    3a06:	88 30       	cpi	r24, 0x08	; 8
    3a08:	f8 f4       	brcc	.+62     	; 0x3a48 <EF_void_uploadCustomChar+0x56>
	{
		EF_void_LCD_send_command(0x40 + (location * 8));
    3a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a0c:	88 2f       	mov	r24, r24
    3a0e:	90 e0       	ldi	r25, 0x00	; 0
    3a10:	08 96       	adiw	r24, 0x08	; 8
    3a12:	88 0f       	add	r24, r24
    3a14:	99 1f       	adc	r25, r25
    3a16:	88 0f       	add	r24, r24
    3a18:	99 1f       	adc	r25, r25
    3a1a:	88 0f       	add	r24, r24
    3a1c:	99 1f       	adc	r25, r25
    3a1e:	0e 94 c3 13 	call	0x2786	; 0x2786 <EF_void_LCD_send_command>
		for (ArrayIndex = 0; ArrayIndex < 8; ArrayIndex++)
    3a22:	19 82       	std	Y+1, r1	; 0x01
    3a24:	0e c0       	rjmp	.+28     	; 0x3a42 <EF_void_uploadCustomChar+0x50>
		{
			EF_void_LCD_send_data(character[ArrayIndex]);
    3a26:	89 81       	ldd	r24, Y+1	; 0x01
    3a28:	28 2f       	mov	r18, r24
    3a2a:	30 e0       	ldi	r19, 0x00	; 0
    3a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a2e:	9c 81       	ldd	r25, Y+4	; 0x04
    3a30:	fc 01       	movw	r30, r24
    3a32:	e2 0f       	add	r30, r18
    3a34:	f3 1f       	adc	r31, r19
    3a36:	80 81       	ld	r24, Z
    3a38:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <EF_void_LCD_send_data>
	u8 ArrayIndex;
	/* the Add offset must be 0 to 7*/
	if (location < 8)
	{
		EF_void_LCD_send_command(0x40 + (location * 8));
		for (ArrayIndex = 0; ArrayIndex < 8; ArrayIndex++)
    3a3c:	89 81       	ldd	r24, Y+1	; 0x01
    3a3e:	8f 5f       	subi	r24, 0xFF	; 255
    3a40:	89 83       	std	Y+1, r24	; 0x01
    3a42:	89 81       	ldd	r24, Y+1	; 0x01
    3a44:	88 30       	cpi	r24, 0x08	; 8
    3a46:	78 f3       	brcs	.-34     	; 0x3a26 <EF_void_uploadCustomChar+0x34>
	else
	{
		/* TODO: return Error */
	}

}
    3a48:	0f 90       	pop	r0
    3a4a:	0f 90       	pop	r0
    3a4c:	0f 90       	pop	r0
    3a4e:	0f 90       	pop	r0
    3a50:	cf 91       	pop	r28
    3a52:	df 91       	pop	r29
    3a54:	08 95       	ret

00003a56 <EF_void_LCD_HextoASCII>:
* PARAMETERS  : hex: pointer to hex (one byte)
*
* Return Value: Void.
***********************************************************************/
void EF_void_LCD_HextoASCII(u8 *hex)
{
    3a56:	df 93       	push	r29
    3a58:	cf 93       	push	r28
    3a5a:	00 d0       	rcall	.+0      	; 0x3a5c <EF_void_LCD_HextoASCII+0x6>
    3a5c:	00 d0       	rcall	.+0      	; 0x3a5e <EF_void_LCD_HextoASCII+0x8>
    3a5e:	cd b7       	in	r28, 0x3d	; 61
    3a60:	de b7       	in	r29, 0x3e	; 62
    3a62:	9c 83       	std	Y+4, r25	; 0x04
    3a64:	8b 83       	std	Y+3, r24	; 0x03

	u8 temp_L = 0;                    // dummy variable that will hold LSBs of Hex number
    3a66:	1a 82       	std	Y+2, r1	; 0x02
	u8 temp_H = 0;                    // dummy variable that will hold MSBs of Hex number
    3a68:	19 82       	std	Y+1, r1	; 0x01

	temp_H = *hex & 0xF0;           // Obtain the upper 4 bits (MSBs) of hex number
    3a6a:	eb 81       	ldd	r30, Y+3	; 0x03
    3a6c:	fc 81       	ldd	r31, Y+4	; 0x04
    3a6e:	80 81       	ld	r24, Z
    3a70:	80 7f       	andi	r24, 0xF0	; 240
    3a72:	89 83       	std	Y+1, r24	; 0x01
	temp_H = temp_H >> 4;           //
    3a74:	89 81       	ldd	r24, Y+1	; 0x01
    3a76:	82 95       	swap	r24
    3a78:	8f 70       	andi	r24, 0x0F	; 15
    3a7a:	89 83       	std	Y+1, r24	; 0x01

	if(temp_H >9)                   // Check if the number is a letter
    3a7c:	89 81       	ldd	r24, Y+1	; 0x01
    3a7e:	8a 30       	cpi	r24, 0x0A	; 10
    3a80:	20 f0       	brcs	.+8      	; 0x3a8a <EF_void_LCD_HextoASCII+0x34>
	{
		temp_H += 0x37;             // Convert the number to a letter in ASCII
    3a82:	89 81       	ldd	r24, Y+1	; 0x01
    3a84:	89 5c       	subi	r24, 0xC9	; 201
    3a86:	89 83       	std	Y+1, r24	; 0x01
    3a88:	03 c0       	rjmp	.+6      	; 0x3a90 <EF_void_LCD_HextoASCII+0x3a>
	}
	else
	{
		temp_H += 0x30;             // Convert the number to ASCII number
    3a8a:	89 81       	ldd	r24, Y+1	; 0x01
    3a8c:	80 5d       	subi	r24, 0xD0	; 208
    3a8e:	89 83       	std	Y+1, r24	; 0x01
	}

	EF_void_LCD_send_data(temp_H);           // Display the number
    3a90:	89 81       	ldd	r24, Y+1	; 0x01
    3a92:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <EF_void_LCD_send_data>

	temp_L = *hex & 0x0F;           // Obtain the lower 4 bits (LSBs) of hex number
    3a96:	eb 81       	ldd	r30, Y+3	; 0x03
    3a98:	fc 81       	ldd	r31, Y+4	; 0x04
    3a9a:	80 81       	ld	r24, Z
    3a9c:	8f 70       	andi	r24, 0x0F	; 15
    3a9e:	8a 83       	std	Y+2, r24	; 0x02

	if(temp_L >9)                   // Check if the the number is a letter
    3aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    3aa2:	8a 30       	cpi	r24, 0x0A	; 10
    3aa4:	20 f0       	brcs	.+8      	; 0x3aae <EF_void_LCD_HextoASCII+0x58>
	{
		temp_L += 0x37;             // Convert the number to a letter in ASCII
    3aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    3aa8:	89 5c       	subi	r24, 0xC9	; 201
    3aaa:	8a 83       	std	Y+2, r24	; 0x02
    3aac:	03 c0       	rjmp	.+6      	; 0x3ab4 <EF_void_LCD_HextoASCII+0x5e>
	}
	else
	{
		temp_L += 0x30;             // Convert the number to ASCII number
    3aae:	8a 81       	ldd	r24, Y+2	; 0x02
    3ab0:	80 5d       	subi	r24, 0xD0	; 208
    3ab2:	8a 83       	std	Y+2, r24	; 0x02
	}

	EF_void_LCD_send_data(temp_L);           // Display the number
    3ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ab6:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <EF_void_LCD_send_data>
}
    3aba:	0f 90       	pop	r0
    3abc:	0f 90       	pop	r0
    3abe:	0f 90       	pop	r0
    3ac0:	0f 90       	pop	r0
    3ac2:	cf 91       	pop	r28
    3ac4:	df 91       	pop	r29
    3ac6:	08 95       	ret

00003ac8 <GPS_inlinevidAsciiToInt>:
//
//}


void GPS_inlinevidAsciiToInt(const u8* GPS_p2Constu8_DataBuffer , f32** Copy_pf32Lat , f32** Copy_pf32Long , u8** Copy_pu8LatDir , u8** Copy_pu8LongDir  )
{
    3ac8:	ef 92       	push	r14
    3aca:	ff 92       	push	r15
    3acc:	0f 93       	push	r16
    3ace:	1f 93       	push	r17
    3ad0:	df 93       	push	r29
    3ad2:	cf 93       	push	r28
    3ad4:	cd b7       	in	r28, 0x3d	; 61
    3ad6:	de b7       	in	r29, 0x3e	; 62
    3ad8:	63 97       	sbiw	r28, 0x13	; 19
    3ada:	0f b6       	in	r0, 0x3f	; 63
    3adc:	f8 94       	cli
    3ade:	de bf       	out	0x3e, r29	; 62
    3ae0:	0f be       	out	0x3f, r0	; 63
    3ae2:	cd bf       	out	0x3d, r28	; 61
    3ae4:	9b 87       	std	Y+11, r25	; 0x0b
    3ae6:	8a 87       	std	Y+10, r24	; 0x0a
    3ae8:	7d 87       	std	Y+13, r23	; 0x0d
    3aea:	6c 87       	std	Y+12, r22	; 0x0c
    3aec:	5f 87       	std	Y+15, r21	; 0x0f
    3aee:	4e 87       	std	Y+14, r20	; 0x0e
    3af0:	39 8b       	std	Y+17, r19	; 0x11
    3af2:	28 8b       	std	Y+16, r18	; 0x10
    3af4:	1b 8b       	std	Y+19, r17	; 0x13
    3af6:	0a 8b       	std	Y+18, r16	; 0x12
//
//
//	}while( i <= GPS_LINE_LENGTH );
//

	f32 Local_f32TempLat  = 0 ;
    3af8:	80 e0       	ldi	r24, 0x00	; 0
    3afa:	90 e0       	ldi	r25, 0x00	; 0
    3afc:	a0 e0       	ldi	r26, 0x00	; 0
    3afe:	b0 e0       	ldi	r27, 0x00	; 0
    3b00:	8e 83       	std	Y+6, r24	; 0x06
    3b02:	9f 83       	std	Y+7, r25	; 0x07
    3b04:	a8 87       	std	Y+8, r26	; 0x08
    3b06:	b9 87       	std	Y+9, r27	; 0x09
	f32 Local_f32TempLong = 0 ;
    3b08:	80 e0       	ldi	r24, 0x00	; 0
    3b0a:	90 e0       	ldi	r25, 0x00	; 0
    3b0c:	a0 e0       	ldi	r26, 0x00	; 0
    3b0e:	b0 e0       	ldi	r27, 0x00	; 0
    3b10:	8a 83       	std	Y+2, r24	; 0x02
    3b12:	9b 83       	std	Y+3, r25	; 0x03
    3b14:	ac 83       	std	Y+4, r26	; 0x04
    3b16:	bd 83       	std	Y+5, r27	; 0x05
	u8  Local_u8Temp      = 1 ;
    3b18:	81 e0       	ldi	r24, 0x01	; 1
    3b1a:	89 83       	std	Y+1, r24	; 0x01
	do
	{
		// 540 4.2675
		// |

		Local_f32TempLat *= 10;
    3b1c:	6e 81       	ldd	r22, Y+6	; 0x06
    3b1e:	7f 81       	ldd	r23, Y+7	; 0x07
    3b20:	88 85       	ldd	r24, Y+8	; 0x08
    3b22:	99 85       	ldd	r25, Y+9	; 0x09
    3b24:	20 e0       	ldi	r18, 0x00	; 0
    3b26:	30 e0       	ldi	r19, 0x00	; 0
    3b28:	40 e2       	ldi	r20, 0x20	; 32
    3b2a:	51 e4       	ldi	r21, 0x41	; 65
    3b2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b30:	dc 01       	movw	r26, r24
    3b32:	cb 01       	movw	r24, r22
    3b34:	8e 83       	std	Y+6, r24	; 0x06
    3b36:	9f 83       	std	Y+7, r25	; 0x07
    3b38:	a8 87       	std	Y+8, r26	; 0x08
    3b3a:	b9 87       	std	Y+9, r27	; 0x09

		Local_f32TempLat += ((*(GPS_p2Constu8_DataBuffer)-0x30));
    3b3c:	ea 85       	ldd	r30, Y+10	; 0x0a
    3b3e:	fb 85       	ldd	r31, Y+11	; 0x0b
    3b40:	80 81       	ld	r24, Z
    3b42:	88 2f       	mov	r24, r24
    3b44:	90 e0       	ldi	r25, 0x00	; 0
    3b46:	c0 97       	sbiw	r24, 0x30	; 48
    3b48:	aa 27       	eor	r26, r26
    3b4a:	97 fd       	sbrc	r25, 7
    3b4c:	a0 95       	com	r26
    3b4e:	ba 2f       	mov	r27, r26
    3b50:	bc 01       	movw	r22, r24
    3b52:	cd 01       	movw	r24, r26
    3b54:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3b58:	9b 01       	movw	r18, r22
    3b5a:	ac 01       	movw	r20, r24
    3b5c:	6e 81       	ldd	r22, Y+6	; 0x06
    3b5e:	7f 81       	ldd	r23, Y+7	; 0x07
    3b60:	88 85       	ldd	r24, Y+8	; 0x08
    3b62:	99 85       	ldd	r25, Y+9	; 0x09
    3b64:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3b68:	dc 01       	movw	r26, r24
    3b6a:	cb 01       	movw	r24, r22
    3b6c:	8e 83       	std	Y+6, r24	; 0x06
    3b6e:	9f 83       	std	Y+7, r25	; 0x07
    3b70:	a8 87       	std	Y+8, r26	; 0x08
    3b72:	b9 87       	std	Y+9, r27	; 0x09
		//iter_#1      		0+5 = 5
		//iter_#2          50+4 = 54
		//iter_#3         540+0 = 540
		//iter_#4        5400+4 = 5404

		GPS_p2Constu8_DataBuffer++;
    3b74:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b76:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b78:	01 96       	adiw	r24, 0x01	; 1
    3b7a:	9b 87       	std	Y+11, r25	; 0x0b
    3b7c:	8a 87       	std	Y+10, r24	; 0x0a

	}while( (*GPS_p2Constu8_DataBuffer) != '.');
    3b7e:	ea 85       	ldd	r30, Y+10	; 0x0a
    3b80:	fb 85       	ldd	r31, Y+11	; 0x0b
    3b82:	80 81       	ld	r24, Z
    3b84:	8e 32       	cpi	r24, 0x2E	; 46
    3b86:	51 f6       	brne	.-108    	; 0x3b1c <GPS_inlinevidAsciiToInt+0x54>
	//  0.........  10  ....  15 ....  20  .  22  .......... 33  .  35  .............................
	//  043338.100  ,   5404  .  2675  ,   N  ,   00159.7569  ,  W  ,   1,10,4.00,100.0,M,50.0,M,,*72
	//                        |
	//P2Data:

	GPS_p2Constu8_DataBuffer++;
    3b88:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b8a:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b8c:	01 96       	adiw	r24, 0x01	; 1
    3b8e:	9b 87       	std	Y+11, r25	; 0x0b
    3b90:	8a 87       	std	Y+10, r24	; 0x0a

	do
	{
		// 5404.2675,
		//      |
		Local_u8Temp *= 10 ;
    3b92:	89 81       	ldd	r24, Y+1	; 0x01
    3b94:	88 2f       	mov	r24, r24
    3b96:	90 e0       	ldi	r25, 0x00	; 0
    3b98:	9c 01       	movw	r18, r24
    3b9a:	22 0f       	add	r18, r18
    3b9c:	33 1f       	adc	r19, r19
    3b9e:	c9 01       	movw	r24, r18
    3ba0:	88 0f       	add	r24, r24
    3ba2:	99 1f       	adc	r25, r25
    3ba4:	88 0f       	add	r24, r24
    3ba6:	99 1f       	adc	r25, r25
    3ba8:	82 0f       	add	r24, r18
    3baa:	93 1f       	adc	r25, r19
    3bac:	89 83       	std	Y+1, r24	; 0x01

		Local_f32TempLat += ((f32)(*(GPS_p2Constu8_DataBuffer)-0x30)/Local_u8Temp);
    3bae:	ea 85       	ldd	r30, Y+10	; 0x0a
    3bb0:	fb 85       	ldd	r31, Y+11	; 0x0b
    3bb2:	80 81       	ld	r24, Z
    3bb4:	88 2f       	mov	r24, r24
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	c0 97       	sbiw	r24, 0x30	; 48
    3bba:	aa 27       	eor	r26, r26
    3bbc:	97 fd       	sbrc	r25, 7
    3bbe:	a0 95       	com	r26
    3bc0:	ba 2f       	mov	r27, r26
    3bc2:	bc 01       	movw	r22, r24
    3bc4:	cd 01       	movw	r24, r26
    3bc6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3bca:	7b 01       	movw	r14, r22
    3bcc:	8c 01       	movw	r16, r24
    3bce:	89 81       	ldd	r24, Y+1	; 0x01
    3bd0:	88 2f       	mov	r24, r24
    3bd2:	90 e0       	ldi	r25, 0x00	; 0
    3bd4:	aa 27       	eor	r26, r26
    3bd6:	97 fd       	sbrc	r25, 7
    3bd8:	a0 95       	com	r26
    3bda:	ba 2f       	mov	r27, r26
    3bdc:	bc 01       	movw	r22, r24
    3bde:	cd 01       	movw	r24, r26
    3be0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3be4:	9b 01       	movw	r18, r22
    3be6:	ac 01       	movw	r20, r24
    3be8:	c8 01       	movw	r24, r16
    3bea:	b7 01       	movw	r22, r14
    3bec:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3bf0:	dc 01       	movw	r26, r24
    3bf2:	cb 01       	movw	r24, r22
    3bf4:	9c 01       	movw	r18, r24
    3bf6:	ad 01       	movw	r20, r26
    3bf8:	6e 81       	ldd	r22, Y+6	; 0x06
    3bfa:	7f 81       	ldd	r23, Y+7	; 0x07
    3bfc:	88 85       	ldd	r24, Y+8	; 0x08
    3bfe:	99 85       	ldd	r25, Y+9	; 0x09
    3c00:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3c04:	dc 01       	movw	r26, r24
    3c06:	cb 01       	movw	r24, r22
    3c08:	8e 83       	std	Y+6, r24	; 0x06
    3c0a:	9f 83       	std	Y+7, r25	; 0x07
    3c0c:	a8 87       	std	Y+8, r26	; 0x08
    3c0e:	b9 87       	std	Y+9, r27	; 0x09
		//iter_#2  Local_f32TempLat=   5404.2 + 0.06=  5404.26
		//iter_#3                      5404.26 + 0.007=  5404.267
		//iter_#4                      5404.267 + 0.0005=  5404.2675


		GPS_p2Constu8_DataBuffer++;
    3c10:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c12:	9b 85       	ldd	r25, Y+11	; 0x0b
    3c14:	01 96       	adiw	r24, 0x01	; 1
    3c16:	9b 87       	std	Y+11, r25	; 0x0b
    3c18:	8a 87       	std	Y+10, r24	; 0x0a


	}while( *(GPS_p2Constu8_DataBuffer) != ',');
    3c1a:	ea 85       	ldd	r30, Y+10	; 0x0a
    3c1c:	fb 85       	ldd	r31, Y+11	; 0x0b
    3c1e:	80 81       	ld	r24, Z
    3c20:	8c 32       	cpi	r24, 0x2C	; 44
    3c22:	09 f0       	breq	.+2      	; 0x3c26 <GPS_inlinevidAsciiToInt+0x15e>
    3c24:	b6 cf       	rjmp	.-148    	; 0x3b92 <GPS_inlinevidAsciiToInt+0xca>
	//  0.........  10  ....  15 ....  20  .  22  .......... 33  .  35  .............................
	//  043338.100  ,   5404  .  2675  ,   N  ,   00159.7569  ,  W  ,   1,10,4.00,100.0,M,50.0,M,,*72
	//  P2Data:                        |
	//

	GPS_p2Constu8_DataBuffer++;
    3c26:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c28:	9b 85       	ldd	r25, Y+11	; 0x0b
    3c2a:	01 96       	adiw	r24, 0x01	; 1
    3c2c:	9b 87       	std	Y+11, r25	; 0x0b
    3c2e:	8a 87       	std	Y+10, r24	; 0x0a
	//  0.........  10  ....  15 ....  20  .  22  .......... 33  .  35  .............................
	//  043338.100  ,   5404  .  2675  ,   N  ,   00159.7569  ,  W  ,   1,10,4.00,100.0,M,50.0,M,,*72
	//  P2Data:                            |


	**Copy_pu8LatDir = *GPS_p2Constu8_DataBuffer ;
    3c30:	e8 89       	ldd	r30, Y+16	; 0x10
    3c32:	f9 89       	ldd	r31, Y+17	; 0x11
    3c34:	a0 81       	ld	r26, Z
    3c36:	b1 81       	ldd	r27, Z+1	; 0x01
    3c38:	ea 85       	ldd	r30, Y+10	; 0x0a
    3c3a:	fb 85       	ldd	r31, Y+11	; 0x0b
    3c3c:	80 81       	ld	r24, Z
    3c3e:	8c 93       	st	X, r24

	GPS_p2Constu8_DataBuffer++;
    3c40:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c42:	9b 85       	ldd	r25, Y+11	; 0x0b
    3c44:	01 96       	adiw	r24, 0x01	; 1
    3c46:	9b 87       	std	Y+11, r25	; 0x0b
    3c48:	8a 87       	std	Y+10, r24	; 0x0a

	//  0.........  10  ....  15 ....  20  .  22  .......... 33  .  35  .............................
	//  043338.100  ,   5404  .  2675  ,   N  ,   00159.7569  ,  W  ,   1,10,4.00,100.0,M,50.0,M,,*72
	//  P2Data:                               |

	GPS_p2Constu8_DataBuffer++;
    3c4a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c4c:	9b 85       	ldd	r25, Y+11	; 0x0b
    3c4e:	01 96       	adiw	r24, 0x01	; 1
    3c50:	9b 87       	std	Y+11, r25	; 0x0b
    3c52:	8a 87       	std	Y+10, r24	; 0x0a
	do
	{
		// 00159.7569
		// |

		Local_f32TempLong *= 10;
    3c54:	6a 81       	ldd	r22, Y+2	; 0x02
    3c56:	7b 81       	ldd	r23, Y+3	; 0x03
    3c58:	8c 81       	ldd	r24, Y+4	; 0x04
    3c5a:	9d 81       	ldd	r25, Y+5	; 0x05
    3c5c:	20 e0       	ldi	r18, 0x00	; 0
    3c5e:	30 e0       	ldi	r19, 0x00	; 0
    3c60:	40 e2       	ldi	r20, 0x20	; 32
    3c62:	51 e4       	ldi	r21, 0x41	; 65
    3c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c68:	dc 01       	movw	r26, r24
    3c6a:	cb 01       	movw	r24, r22
    3c6c:	8a 83       	std	Y+2, r24	; 0x02
    3c6e:	9b 83       	std	Y+3, r25	; 0x03
    3c70:	ac 83       	std	Y+4, r26	; 0x04
    3c72:	bd 83       	std	Y+5, r27	; 0x05

		Local_f32TempLong += ((f32)((*GPS_p2Constu8_DataBuffer)-0x30));
    3c74:	ea 85       	ldd	r30, Y+10	; 0x0a
    3c76:	fb 85       	ldd	r31, Y+11	; 0x0b
    3c78:	80 81       	ld	r24, Z
    3c7a:	88 2f       	mov	r24, r24
    3c7c:	90 e0       	ldi	r25, 0x00	; 0
    3c7e:	c0 97       	sbiw	r24, 0x30	; 48
    3c80:	aa 27       	eor	r26, r26
    3c82:	97 fd       	sbrc	r25, 7
    3c84:	a0 95       	com	r26
    3c86:	ba 2f       	mov	r27, r26
    3c88:	bc 01       	movw	r22, r24
    3c8a:	cd 01       	movw	r24, r26
    3c8c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3c90:	9b 01       	movw	r18, r22
    3c92:	ac 01       	movw	r20, r24
    3c94:	6a 81       	ldd	r22, Y+2	; 0x02
    3c96:	7b 81       	ldd	r23, Y+3	; 0x03
    3c98:	8c 81       	ldd	r24, Y+4	; 0x04
    3c9a:	9d 81       	ldd	r25, Y+5	; 0x05
    3c9c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3ca0:	dc 01       	movw	r26, r24
    3ca2:	cb 01       	movw	r24, r22
    3ca4:	8a 83       	std	Y+2, r24	; 0x02
    3ca6:	9b 83       	std	Y+3, r25	; 0x03
    3ca8:	ac 83       	std	Y+4, r26	; 0x04
    3caa:	bd 83       	std	Y+5, r27	; 0x05
		//iter_#2          0 + 0 = 0
		//iter_#3          0 + 1 = 1
		//iter_#4         10 + 5 = 15
		//iter_#4        150 + 9 = 159

		GPS_p2Constu8_DataBuffer++;
    3cac:	8a 85       	ldd	r24, Y+10	; 0x0a
    3cae:	9b 85       	ldd	r25, Y+11	; 0x0b
    3cb0:	01 96       	adiw	r24, 0x01	; 1
    3cb2:	9b 87       	std	Y+11, r25	; 0x0b
    3cb4:	8a 87       	std	Y+10, r24	; 0x0a


	}while( (*GPS_p2Constu8_DataBuffer) != '.');
    3cb6:	ea 85       	ldd	r30, Y+10	; 0x0a
    3cb8:	fb 85       	ldd	r31, Y+11	; 0x0b
    3cba:	80 81       	ld	r24, Z
    3cbc:	8e 32       	cpi	r24, 0x2E	; 46
    3cbe:	51 f6       	brne	.-108    	; 0x3c54 <GPS_inlinevidAsciiToInt+0x18c>


	// 00159.7569
	//      |
	GPS_p2Constu8_DataBuffer++;
    3cc0:	8a 85       	ldd	r24, Y+10	; 0x0a
    3cc2:	9b 85       	ldd	r25, Y+11	; 0x0b
    3cc4:	01 96       	adiw	r24, 0x01	; 1
    3cc6:	9b 87       	std	Y+11, r25	; 0x0b
    3cc8:	8a 87       	std	Y+10, r24	; 0x0a

	// 00159.7569
	//       |

	Local_u8Temp = 1 ;
    3cca:	81 e0       	ldi	r24, 0x01	; 1
    3ccc:	89 83       	std	Y+1, r24	; 0x01
	{

		// 00159.7569,W
		//       |

		Local_u8Temp *= 10 ;
    3cce:	89 81       	ldd	r24, Y+1	; 0x01
    3cd0:	88 2f       	mov	r24, r24
    3cd2:	90 e0       	ldi	r25, 0x00	; 0
    3cd4:	9c 01       	movw	r18, r24
    3cd6:	22 0f       	add	r18, r18
    3cd8:	33 1f       	adc	r19, r19
    3cda:	c9 01       	movw	r24, r18
    3cdc:	88 0f       	add	r24, r24
    3cde:	99 1f       	adc	r25, r25
    3ce0:	88 0f       	add	r24, r24
    3ce2:	99 1f       	adc	r25, r25
    3ce4:	82 0f       	add	r24, r18
    3ce6:	93 1f       	adc	r25, r19
    3ce8:	89 83       	std	Y+1, r24	; 0x01

		Local_f32TempLong += (((f32)(*GPS_p2Constu8_DataBuffer)-0x30)/Local_u8Temp);
    3cea:	ea 85       	ldd	r30, Y+10	; 0x0a
    3cec:	fb 85       	ldd	r31, Y+11	; 0x0b
    3cee:	80 81       	ld	r24, Z
    3cf0:	88 2f       	mov	r24, r24
    3cf2:	90 e0       	ldi	r25, 0x00	; 0
    3cf4:	a0 e0       	ldi	r26, 0x00	; 0
    3cf6:	b0 e0       	ldi	r27, 0x00	; 0
    3cf8:	bc 01       	movw	r22, r24
    3cfa:	cd 01       	movw	r24, r26
    3cfc:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3d00:	dc 01       	movw	r26, r24
    3d02:	cb 01       	movw	r24, r22
    3d04:	bc 01       	movw	r22, r24
    3d06:	cd 01       	movw	r24, r26
    3d08:	20 e0       	ldi	r18, 0x00	; 0
    3d0a:	30 e0       	ldi	r19, 0x00	; 0
    3d0c:	40 e4       	ldi	r20, 0x40	; 64
    3d0e:	52 e4       	ldi	r21, 0x42	; 66
    3d10:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3d14:	dc 01       	movw	r26, r24
    3d16:	cb 01       	movw	r24, r22
    3d18:	7c 01       	movw	r14, r24
    3d1a:	8d 01       	movw	r16, r26
    3d1c:	89 81       	ldd	r24, Y+1	; 0x01
    3d1e:	88 2f       	mov	r24, r24
    3d20:	90 e0       	ldi	r25, 0x00	; 0
    3d22:	aa 27       	eor	r26, r26
    3d24:	97 fd       	sbrc	r25, 7
    3d26:	a0 95       	com	r26
    3d28:	ba 2f       	mov	r27, r26
    3d2a:	bc 01       	movw	r22, r24
    3d2c:	cd 01       	movw	r24, r26
    3d2e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3d32:	9b 01       	movw	r18, r22
    3d34:	ac 01       	movw	r20, r24
    3d36:	c8 01       	movw	r24, r16
    3d38:	b7 01       	movw	r22, r14
    3d3a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3d3e:	dc 01       	movw	r26, r24
    3d40:	cb 01       	movw	r24, r22
    3d42:	9c 01       	movw	r18, r24
    3d44:	ad 01       	movw	r20, r26
    3d46:	6a 81       	ldd	r22, Y+2	; 0x02
    3d48:	7b 81       	ldd	r23, Y+3	; 0x03
    3d4a:	8c 81       	ldd	r24, Y+4	; 0x04
    3d4c:	9d 81       	ldd	r25, Y+5	; 0x05
    3d4e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3d52:	dc 01       	movw	r26, r24
    3d54:	cb 01       	movw	r24, r22
    3d56:	8a 83       	std	Y+2, r24	; 0x02
    3d58:	9b 83       	std	Y+3, r25	; 0x03
    3d5a:	ac 83       	std	Y+4, r26	; 0x04
    3d5c:	bd 83       	std	Y+5, r27	; 0x05
		//iter_#2  Local_f32TempLat= 159.7+0.05 =  159.75           100
		//iter_#3                  159.75+0.006 =  159.756          1000
		//iter_#4                 159.756+0.0009 = 159.7569         10000                                   10000


		GPS_p2Constu8_DataBuffer++;
    3d5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d60:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d62:	01 96       	adiw	r24, 0x01	; 1
    3d64:	9b 87       	std	Y+11, r25	; 0x0b
    3d66:	8a 87       	std	Y+10, r24	; 0x0a


	}while( (*GPS_p2Constu8_DataBuffer) != ',');
    3d68:	ea 85       	ldd	r30, Y+10	; 0x0a
    3d6a:	fb 85       	ldd	r31, Y+11	; 0x0b
    3d6c:	80 81       	ld	r24, Z
    3d6e:	8c 32       	cpi	r24, 0x2C	; 44
    3d70:	09 f0       	breq	.+2      	; 0x3d74 <GPS_inlinevidAsciiToInt+0x2ac>
    3d72:	ad cf       	rjmp	.-166    	; 0x3cce <GPS_inlinevidAsciiToInt+0x206>

	// 00159.7569,W
	//           |


	GPS_p2Constu8_DataBuffer++;
    3d74:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d76:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d78:	01 96       	adiw	r24, 0x01	; 1
    3d7a:	9b 87       	std	Y+11, r25	; 0x0b
    3d7c:	8a 87       	std	Y+10, r24	; 0x0a
	// 00159.7569,W
	//            |

	**Copy_pu8LongDir = *GPS_p2Constu8_DataBuffer;
    3d7e:	ea 89       	ldd	r30, Y+18	; 0x12
    3d80:	fb 89       	ldd	r31, Y+19	; 0x13
    3d82:	a0 81       	ld	r26, Z
    3d84:	b1 81       	ldd	r27, Z+1	; 0x01
    3d86:	ea 85       	ldd	r30, Y+10	; 0x0a
    3d88:	fb 85       	ldd	r31, Y+11	; 0x0b
    3d8a:	80 81       	ld	r24, Z
    3d8c:	8c 93       	st	X, r24

	**Copy_pf32Long   = Local_f32TempLong;
    3d8e:	ee 85       	ldd	r30, Y+14	; 0x0e
    3d90:	ff 85       	ldd	r31, Y+15	; 0x0f
    3d92:	01 90       	ld	r0, Z+
    3d94:	f0 81       	ld	r31, Z
    3d96:	e0 2d       	mov	r30, r0
    3d98:	8a 81       	ldd	r24, Y+2	; 0x02
    3d9a:	9b 81       	ldd	r25, Y+3	; 0x03
    3d9c:	ac 81       	ldd	r26, Y+4	; 0x04
    3d9e:	bd 81       	ldd	r27, Y+5	; 0x05
    3da0:	80 83       	st	Z, r24
    3da2:	91 83       	std	Z+1, r25	; 0x01
    3da4:	a2 83       	std	Z+2, r26	; 0x02
    3da6:	b3 83       	std	Z+3, r27	; 0x03
	**Copy_pf32Lat    = Local_f32TempLat ;
    3da8:	ec 85       	ldd	r30, Y+12	; 0x0c
    3daa:	fd 85       	ldd	r31, Y+13	; 0x0d
    3dac:	01 90       	ld	r0, Z+
    3dae:	f0 81       	ld	r31, Z
    3db0:	e0 2d       	mov	r30, r0
    3db2:	8e 81       	ldd	r24, Y+6	; 0x06
    3db4:	9f 81       	ldd	r25, Y+7	; 0x07
    3db6:	a8 85       	ldd	r26, Y+8	; 0x08
    3db8:	b9 85       	ldd	r27, Y+9	; 0x09
    3dba:	80 83       	st	Z, r24
    3dbc:	91 83       	std	Z+1, r25	; 0x01
    3dbe:	a2 83       	std	Z+2, r26	; 0x02
    3dc0:	b3 83       	std	Z+3, r27	; 0x03

}//End of GPS_inlinevidAsciiToInt().
    3dc2:	63 96       	adiw	r28, 0x13	; 19
    3dc4:	0f b6       	in	r0, 0x3f	; 63
    3dc6:	f8 94       	cli
    3dc8:	de bf       	out	0x3e, r29	; 62
    3dca:	0f be       	out	0x3f, r0	; 63
    3dcc:	cd bf       	out	0x3d, r28	; 61
    3dce:	cf 91       	pop	r28
    3dd0:	df 91       	pop	r29
    3dd2:	1f 91       	pop	r17
    3dd4:	0f 91       	pop	r16
    3dd6:	ff 90       	pop	r15
    3dd8:	ef 90       	pop	r14
    3dda:	08 95       	ret

00003ddc <GPS_enuInit>:
 *                   according to the PGS Configurable structure.           *
 * Argument Type   : None .                                                 *
 * Return Type     : Error state of type ES_t.                              *
 **....................*****************************************************/
ES_t GPS_enuInit(void)
{
    3ddc:	df 93       	push	r29
    3dde:	cf 93       	push	r28
    3de0:	00 d0       	rcall	.+0      	; 0x3de2 <GPS_enuInit+0x6>
    3de2:	0f 92       	push	r0
    3de4:	cd b7       	in	r28, 0x3d	; 61
    3de6:	de b7       	in	r29, 0x3e	; 62

	ES_t Local_enuErrorState = ES_NOK ;
    3de8:	19 82       	std	Y+1, r1	; 0x01


	//Read the Status of gps module and make the appropriate configuration.
	switch( GPS.GPS_STATE_t )
    3dea:	80 91 68 01 	lds	r24, 0x0168
    3dee:	28 2f       	mov	r18, r24
    3df0:	30 e0       	ldi	r19, 0x00	; 0
    3df2:	3b 83       	std	Y+3, r19	; 0x03
    3df4:	2a 83       	std	Y+2, r18	; 0x02
    3df6:	8a 81       	ldd	r24, Y+2	; 0x02
    3df8:	9b 81       	ldd	r25, Y+3	; 0x03
    3dfa:	00 97       	sbiw	r24, 0x00	; 0
    3dfc:	31 f0       	breq	.+12     	; 0x3e0a <GPS_enuInit+0x2e>
    3dfe:	2a 81       	ldd	r18, Y+2	; 0x02
    3e00:	3b 81       	ldd	r19, Y+3	; 0x03
    3e02:	21 30       	cpi	r18, 0x01	; 1
    3e04:	31 05       	cpc	r19, r1
    3e06:	41 f1       	breq	.+80     	; 0x3e58 <GPS_enuInit+0x7c>
    3e08:	29 c0       	rjmp	.+82     	; 0x3e5c <GPS_enuInit+0x80>

		/****************************************************************************
		 *-Initialize the Direction of pins that the gps module is connected on to  *
		 * be an output pins and Set the suitable value for each.                                                       *
		 ****************************************************************************/
		DIO_enuSetPinDirection( GPS.GPS_VCC_PORT , GPS.GPS_VCC_PIN , DIO_OUTPUT_PIN );
    3e0a:	80 91 69 01 	lds	r24, 0x0169
    3e0e:	90 91 6a 01 	lds	r25, 0x016A
    3e12:	69 2f       	mov	r22, r25
    3e14:	41 e0       	ldi	r20, 0x01	; 1
    3e16:	0e 94 cc 09 	call	0x1398	; 0x1398 <DIO_enuSetPinDirection>
		DIO_enuSetPinValue( GPS.GPS_VCC_PORT , GPS.GPS_VCC_PIN , DIO_HIGH );
    3e1a:	80 91 69 01 	lds	r24, 0x0169
    3e1e:	90 91 6a 01 	lds	r25, 0x016A
    3e22:	69 2f       	mov	r22, r25
    3e24:	41 e0       	ldi	r20, 0x01	; 1
    3e26:	0e 94 c3 0a 	call	0x1586	; 0x1586 <DIO_enuSetPinValue>

		DIO_enuSetPinDirection( GPS.GPS_GND_PORT , GPS.GPS_GND_PIN , DIO_OUTPUT_PIN );
    3e2a:	80 91 6b 01 	lds	r24, 0x016B
    3e2e:	90 91 6c 01 	lds	r25, 0x016C
    3e32:	69 2f       	mov	r22, r25
    3e34:	41 e0       	ldi	r20, 0x01	; 1
    3e36:	0e 94 cc 09 	call	0x1398	; 0x1398 <DIO_enuSetPinDirection>
		DIO_enuSetPinValue( GPS.GPS_GND_PORT , GPS.GPS_GND_PIN , DIO_LOW );
    3e3a:	80 91 6b 01 	lds	r24, 0x016B
    3e3e:	90 91 6c 01 	lds	r25, 0x016C
    3e42:	69 2f       	mov	r22, r25
    3e44:	40 e0       	ldi	r20, 0x00	; 0
    3e46:	0e 94 c3 0a 	call	0x1586	; 0x1586 <DIO_enuSetPinValue>

		GPS_CLEAR_ALL_FLAGSE();
    3e4a:	10 92 a6 01 	sts	0x01A6, r1

		//Initiate the UART to receive read the gps output.
		UART_enuInit();
    3e4e:	0e 94 75 07 	call	0xeea	; 0xeea <UART_enuInit>

		Local_enuErrorState = ES_OK ;
    3e52:	81 e0       	ldi	r24, 0x01	; 1
    3e54:	89 83       	std	Y+1, r24	; 0x01
    3e56:	02 c0       	rjmp	.+4      	; 0x3e5c <GPS_enuInit+0x80>

		break ;

	case gps_off :
		//Do nothing.
		Local_enuErrorState = ES_OK ;
    3e58:	81 e0       	ldi	r24, 0x01	; 1
    3e5a:	89 83       	std	Y+1, r24	; 0x01
	default:
		break;

	}//End of switch.

	return Local_enuErrorState ;
    3e5c:	89 81       	ldd	r24, Y+1	; 0x01

}//End of GPS_enuInit(void).
    3e5e:	0f 90       	pop	r0
    3e60:	0f 90       	pop	r0
    3e62:	0f 90       	pop	r0
    3e64:	cf 91       	pop	r28
    3e66:	df 91       	pop	r29
    3e68:	08 95       	ret

00003e6a <GPS_enuGetLocation>:
 *                   Argu.4:         Address of u8 variable  --->  ~  ~ Longitude  ~ (E,w,N or S)                  *
 * Return Type     : Error state of type ES_t.                                                                     *
 **.....................................................................................................************/
//   GPS_enuGetLocation(f32* Copy_pf32Lat , f32* Copy_pf32Long , u8 Copy_pu8LatDir , u8 Copy_pu8LongDir );
ES_t GPS_enuGetLocation(f32* Copy_pf32Lat , f32* Copy_pf32Long , u8* Copy_pu8LatDir , u8* Copy_pu8LongDir )
{
    3e6a:	0f 93       	push	r16
    3e6c:	1f 93       	push	r17
    3e6e:	df 93       	push	r29
    3e70:	cf 93       	push	r28
    3e72:	cd b7       	in	r28, 0x3d	; 61
    3e74:	de b7       	in	r29, 0x3e	; 62
    3e76:	2b 97       	sbiw	r28, 0x0b	; 11
    3e78:	0f b6       	in	r0, 0x3f	; 63
    3e7a:	f8 94       	cli
    3e7c:	de bf       	out	0x3e, r29	; 62
    3e7e:	0f be       	out	0x3f, r0	; 63
    3e80:	cd bf       	out	0x3d, r28	; 61
    3e82:	9d 83       	std	Y+5, r25	; 0x05
    3e84:	8c 83       	std	Y+4, r24	; 0x04
    3e86:	7f 83       	std	Y+7, r23	; 0x07
    3e88:	6e 83       	std	Y+6, r22	; 0x06
    3e8a:	59 87       	std	Y+9, r21	; 0x09
    3e8c:	48 87       	std	Y+8, r20	; 0x08
    3e8e:	3b 87       	std	Y+11, r19	; 0x0b
    3e90:	2a 87       	std	Y+10, r18	; 0x0a

	UART_enuSendByte(' ');
    3e92:	80 e2       	ldi	r24, 0x20	; 32
    3e94:	0e 94 a3 07 	call	0xf46	; 0xf46 <UART_enuSendByte>
	UART_enuSendByte('G');
    3e98:	87 e4       	ldi	r24, 0x47	; 71
    3e9a:	0e 94 a3 07 	call	0xf46	; 0xf46 <UART_enuSendByte>
	UART_enuSendByte('e');
    3e9e:	85 e6       	ldi	r24, 0x65	; 101
    3ea0:	0e 94 a3 07 	call	0xf46	; 0xf46 <UART_enuSendByte>
	UART_enuSendByte('t');
    3ea4:	84 e7       	ldi	r24, 0x74	; 116
    3ea6:	0e 94 a3 07 	call	0xf46	; 0xf46 <UART_enuSendByte>
	UART_enuSendByte(' ');
    3eaa:	80 e2       	ldi	r24, 0x20	; 32
    3eac:	0e 94 a3 07 	call	0xf46	; 0xf46 <UART_enuSendByte>
	UART_enuSendByte('i');
    3eb0:	89 e6       	ldi	r24, 0x69	; 105
    3eb2:	0e 94 a3 07 	call	0xf46	; 0xf46 <UART_enuSendByte>
	UART_enuSendByte('n');
    3eb6:	8e e6       	ldi	r24, 0x6E	; 110
    3eb8:	0e 94 a3 07 	call	0xf46	; 0xf46 <UART_enuSendByte>
	UART_enuSendByte(' ');
    3ebc:	80 e2       	ldi	r24, 0x20	; 32
    3ebe:	0e 94 a3 07 	call	0xf46	; 0xf46 <UART_enuSendByte>



	ES_t Local_enuErrorState = ES_NOK ;
    3ec2:	1a 82       	std	Y+2, r1	; 0x02


	if(( Copy_pf32Lat != NULL) && (Copy_pf32Long != NULL) && ( Copy_pu8LatDir != NULL)&& ( Copy_pu8LongDir !=  NULL))
    3ec4:	8c 81       	ldd	r24, Y+4	; 0x04
    3ec6:	9d 81       	ldd	r25, Y+5	; 0x05
    3ec8:	00 97       	sbiw	r24, 0x00	; 0
    3eca:	09 f4       	brne	.+2      	; 0x3ece <GPS_enuGetLocation+0x64>
    3ecc:	b8 c0       	rjmp	.+368    	; 0x403e <GPS_enuGetLocation+0x1d4>
    3ece:	8e 81       	ldd	r24, Y+6	; 0x06
    3ed0:	9f 81       	ldd	r25, Y+7	; 0x07
    3ed2:	00 97       	sbiw	r24, 0x00	; 0
    3ed4:	09 f4       	brne	.+2      	; 0x3ed8 <GPS_enuGetLocation+0x6e>
    3ed6:	b3 c0       	rjmp	.+358    	; 0x403e <GPS_enuGetLocation+0x1d4>
    3ed8:	88 85       	ldd	r24, Y+8	; 0x08
    3eda:	99 85       	ldd	r25, Y+9	; 0x09
    3edc:	00 97       	sbiw	r24, 0x00	; 0
    3ede:	09 f4       	brne	.+2      	; 0x3ee2 <GPS_enuGetLocation+0x78>
    3ee0:	ae c0       	rjmp	.+348    	; 0x403e <GPS_enuGetLocation+0x1d4>
    3ee2:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ee4:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ee6:	00 97       	sbiw	r24, 0x00	; 0
    3ee8:	09 f4       	brne	.+2      	; 0x3eec <GPS_enuGetLocation+0x82>
    3eea:	a9 c0       	rjmp	.+338    	; 0x403e <GPS_enuGetLocation+0x1d4>
	{

		u8 Local_u8TempChar =  0  ;
    3eec:	1b 82       	std	Y+3, r1	; 0x03
		u8 Local_u8Counter  =  0  ;
    3eee:	19 82       	std	Y+1, r1	; 0x01


		UART_enuRecieveByte(&Local_u8TempChar);
    3ef0:	ce 01       	movw	r24, r28
    3ef2:	03 96       	adiw	r24, 0x03	; 3
    3ef4:	0e 94 d6 07 	call	0xfac	; 0xfac <UART_enuRecieveByte>
		do
		{
			/************************************************
			 * 1.Catch the Start of line '$'.               *
			 ************************************************/
			if(Local_u8TempChar != '$')
    3ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    3efa:	84 32       	cpi	r24, 0x24	; 36
    3efc:	39 f0       	breq	.+14     	; 0x3f0c <GPS_enuGetLocation+0xa2>
			{
				do
				{
					UART_enuRecieveByte(&Local_u8TempChar);
    3efe:	ce 01       	movw	r24, r28
    3f00:	03 96       	adiw	r24, 0x03	; 3
    3f02:	0e 94 d6 07 	call	0xfac	; 0xfac <UART_enuRecieveByte>

				}while( Local_u8TempChar!= '$' );
    3f06:	8b 81       	ldd	r24, Y+3	; 0x03
    3f08:	84 32       	cpi	r24, 0x24	; 36
    3f0a:	c9 f7       	brne	.-14     	; 0x3efe <GPS_enuGetLocation+0x94>
			 *                                      $GP  RMC, *
			 *                                      $GP  GSA, *
			 *                                      $GP  RMC, *
			 *                                                *
			 **************************************************/
			UART_enuRecieveByte(&Local_u8TempChar);
    3f0c:	ce 01       	movw	r24, r28
    3f0e:	03 96       	adiw	r24, 0x03	; 3
    3f10:	0e 94 d6 07 	call	0xfac	; 0xfac <UART_enuRecieveByte>
			UART_enuRecieveByte(&Local_u8TempChar);
    3f14:	ce 01       	movw	r24, r28
    3f16:	03 96       	adiw	r24, 0x03	; 3
    3f18:	0e 94 d6 07 	call	0xfac	; 0xfac <UART_enuRecieveByte>

			/************************************************
			 * 3.Read more one character and make sure it's *
			 *   'G' Not 'R'.                              *
			 ************************************************/
			UART_enuRecieveByte(&Local_u8TempChar);
    3f1c:	ce 01       	movw	r24, r28
    3f1e:	03 96       	adiw	r24, 0x03	; 3
    3f20:	0e 94 d6 07 	call	0xfac	; 0xfac <UART_enuRecieveByte>

			if(Local_u8TempChar == 'G')
    3f24:	8b 81       	ldd	r24, Y+3	; 0x03
    3f26:	87 34       	cpi	r24, 0x47	; 71
    3f28:	09 f0       	breq	.+2      	; 0x3f2c <GPS_enuGetLocation+0xc2>
    3f2a:	6d c0       	rjmp	.+218    	; 0x4006 <GPS_enuGetLocation+0x19c>

				/************************************************
				 * 4.Read more one character and make sure it's *
				 *   'G' Not 'M'or 'S'.                         *
				 ************************************************/
				UART_enuRecieveByte(&Local_u8TempChar);
    3f2c:	ce 01       	movw	r24, r28
    3f2e:	03 96       	adiw	r24, 0x03	; 3
    3f30:	0e 94 d6 07 	call	0xfac	; 0xfac <UART_enuRecieveByte>

				if(Local_u8TempChar == 'G')
    3f34:	8b 81       	ldd	r24, Y+3	; 0x03
    3f36:	87 34       	cpi	r24, 0x47	; 71
    3f38:	09 f0       	breq	.+2      	; 0x3f3c <GPS_enuGetLocation+0xd2>
    3f3a:	65 c0       	rjmp	.+202    	; 0x4006 <GPS_enuGetLocation+0x19c>

					/************************************************
					 * 5.Read more one character and make sure it's *
					 *   'A' Not 'C'.                               *
					 ************************************************/
					UART_enuRecieveByte(&Local_u8TempChar);
    3f3c:	ce 01       	movw	r24, r28
    3f3e:	03 96       	adiw	r24, 0x03	; 3
    3f40:	0e 94 d6 07 	call	0xfac	; 0xfac <UART_enuRecieveByte>

					if(Local_u8TempChar == 'A')
    3f44:	8b 81       	ldd	r24, Y+3	; 0x03
    3f46:	81 34       	cpi	r24, 0x41	; 65
    3f48:	09 f0       	breq	.+2      	; 0x3f4c <GPS_enuGetLocation+0xe2>
    3f4a:	5d c0       	rjmp	.+186    	; 0x4006 <GPS_enuGetLocation+0x19c>
						//UART_enuSendByte('A');
						/************************************************
						 * 6.Read more one character and make sure it's *
						 *   ',' (Check is an Optional Step).           *
						 ************************************************/
						UART_enuRecieveByte(&Local_u8TempChar);
    3f4c:	ce 01       	movw	r24, r28
    3f4e:	03 96       	adiw	r24, 0x03	; 3
    3f50:	0e 94 d6 07 	call	0xfac	; 0xfac <UART_enuRecieveByte>
						if( Local_u8TempChar == ',' )
    3f54:	8b 81       	ldd	r24, Y+3	; 0x03
    3f56:	8c 32       	cpi	r24, 0x2C	; 44
    3f58:	09 f0       	breq	.+2      	; 0x3f5c <GPS_enuGetLocation+0xf2>
    3f5a:	55 c0       	rjmp	.+170    	; 0x4006 <GPS_enuGetLocation+0x19c>
							 *    Hint:-                                    *
							 *          lines always ends with \n character.*
							 ************************************************/

							/*=================================================*/
							UART_enuRecieveByte(&Local_u8TempChar);
    3f5c:	ce 01       	movw	r24, r28
    3f5e:	03 96       	adiw	r24, 0x03	; 3
    3f60:	0e 94 d6 07 	call	0xfac	; 0xfac <UART_enuRecieveByte>
							UART_enuRecieveByte(&Local_u8TempChar);
    3f64:	ce 01       	movw	r24, r28
    3f66:	03 96       	adiw	r24, 0x03	; 3
    3f68:	0e 94 d6 07 	call	0xfac	; 0xfac <UART_enuRecieveByte>
							UART_enuRecieveByte(&Local_u8TempChar);
    3f6c:	ce 01       	movw	r24, r28
    3f6e:	03 96       	adiw	r24, 0x03	; 3
    3f70:	0e 94 d6 07 	call	0xfac	; 0xfac <UART_enuRecieveByte>
							UART_enuRecieveByte(&Local_u8TempChar);
    3f74:	ce 01       	movw	r24, r28
    3f76:	03 96       	adiw	r24, 0x03	; 3
    3f78:	0e 94 d6 07 	call	0xfac	; 0xfac <UART_enuRecieveByte>
							UART_enuRecieveByte(&Local_u8TempChar);
    3f7c:	ce 01       	movw	r24, r28
    3f7e:	03 96       	adiw	r24, 0x03	; 3
    3f80:	0e 94 d6 07 	call	0xfac	; 0xfac <UART_enuRecieveByte>
							UART_enuRecieveByte(&Local_u8TempChar);
    3f84:	ce 01       	movw	r24, r28
    3f86:	03 96       	adiw	r24, 0x03	; 3
    3f88:	0e 94 d6 07 	call	0xfac	; 0xfac <UART_enuRecieveByte>
							UART_enuRecieveByte(&Local_u8TempChar);
    3f8c:	ce 01       	movw	r24, r28
    3f8e:	03 96       	adiw	r24, 0x03	; 3
    3f90:	0e 94 d6 07 	call	0xfac	; 0xfac <UART_enuRecieveByte>
							UART_enuRecieveByte(&Local_u8TempChar);
    3f94:	ce 01       	movw	r24, r28
    3f96:	03 96       	adiw	r24, 0x03	; 3
    3f98:	0e 94 d6 07 	call	0xfac	; 0xfac <UART_enuRecieveByte>
							UART_enuRecieveByte(&Local_u8TempChar);
    3f9c:	ce 01       	movw	r24, r28
    3f9e:	03 96       	adiw	r24, 0x03	; 3
    3fa0:	0e 94 d6 07 	call	0xfac	; 0xfac <UART_enuRecieveByte>
							UART_enuRecieveByte(&Local_u8TempChar);
    3fa4:	ce 01       	movw	r24, r28
    3fa6:	03 96       	adiw	r24, 0x03	; 3
    3fa8:	0e 94 d6 07 	call	0xfac	; 0xfac <UART_enuRecieveByte>
							UART_enuRecieveByte(&Local_u8TempChar);
    3fac:	ce 01       	movw	r24, r28
    3fae:	03 96       	adiw	r24, 0x03	; 3
    3fb0:	0e 94 d6 07 	call	0xfac	; 0xfac <UART_enuRecieveByte>
							UART_enuRecieveByte(&Local_u8TempChar);
    3fb4:	ce 01       	movw	r24, r28
    3fb6:	03 96       	adiw	r24, 0x03	; 3
    3fb8:	0e 94 d6 07 	call	0xfac	; 0xfac <UART_enuRecieveByte>

							if( Local_u8TempChar == ',')
    3fbc:	8b 81       	ldd	r24, Y+3	; 0x03
    3fbe:	8c 32       	cpi	r24, 0x2C	; 44
    3fc0:	11 f1       	breq	.+68     	; 0x4006 <GPS_enuGetLocation+0x19c>
								continue;
							}

							//UART_enuSendByte(Local_u8TempChar);

							GPS_u8Buffer[Local_u8Counter] = Local_u8TempChar ;
    3fc2:	89 81       	ldd	r24, Y+1	; 0x01
    3fc4:	88 2f       	mov	r24, r24
    3fc6:	90 e0       	ldi	r25, 0x00	; 0
    3fc8:	2b 81       	ldd	r18, Y+3	; 0x03
    3fca:	fc 01       	movw	r30, r24
    3fcc:	e3 59       	subi	r30, 0x93	; 147
    3fce:	fe 4f       	sbci	r31, 0xFE	; 254
    3fd0:	20 83       	st	Z, r18

							Local_u8Counter++;
    3fd2:	89 81       	ldd	r24, Y+1	; 0x01
    3fd4:	8f 5f       	subi	r24, 0xFF	; 255
    3fd6:	89 83       	std	Y+1, r24	; 0x01
									//5404.2675,N,00159.7569,W,1,10,4.00,100.0,M,50.0,M,,*
							//[NMEA] $GPGGA,123534.742,5404.2675,N,00159.7569,W,1,10,4.00,100.0,M,50.0,M,,*7F [GPS1]
							do
							{

								UART_enuRecieveByte(&Local_u8TempChar);
    3fd8:	ce 01       	movw	r24, r28
    3fda:	03 96       	adiw	r24, 0x03	; 3
    3fdc:	0e 94 d6 07 	call	0xfac	; 0xfac <UART_enuRecieveByte>
								GPS_u8Buffer[Local_u8Counter] = Local_u8TempChar ;
    3fe0:	89 81       	ldd	r24, Y+1	; 0x01
    3fe2:	88 2f       	mov	r24, r24
    3fe4:	90 e0       	ldi	r25, 0x00	; 0
    3fe6:	2b 81       	ldd	r18, Y+3	; 0x03
    3fe8:	fc 01       	movw	r30, r24
    3fea:	e3 59       	subi	r30, 0x93	; 147
    3fec:	fe 4f       	sbci	r31, 0xFE	; 254
    3fee:	20 83       	st	Z, r18

								Local_u8Counter++;
    3ff0:	89 81       	ldd	r24, Y+1	; 0x01
    3ff2:	8f 5f       	subi	r24, 0xFF	; 255
    3ff4:	89 83       	std	Y+1, r24	; 0x01

							}while( Local_u8TempChar != '\n' );
    3ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ff8:	8a 30       	cpi	r24, 0x0A	; 10
    3ffa:	71 f7       	brne	.-36     	; 0x3fd8 <GPS_enuGetLocation+0x16e>

							GPS_SET_LINE_FLAG();
    3ffc:	80 91 a6 01 	lds	r24, 0x01A6
    4000:	81 60       	ori	r24, 0x01	; 1
    4002:	80 93 a6 01 	sts	0x01A6, r24
			{
				//-Hit 'R' Instead of 'G'.

			}

		}while( !(GPS_Flags.FLAG.GPGGA_LINE_FLAG) );
    4006:	80 91 a6 01 	lds	r24, 0x01A6
    400a:	81 70       	andi	r24, 0x01	; 1
    400c:	88 23       	and	r24, r24
    400e:	09 f4       	brne	.+2      	; 0x4012 <GPS_enuGetLocation+0x1a8>
    4010:	73 cf       	rjmp	.-282    	; 0x3ef8 <GPS_enuGetLocation+0x8e>





		GPS_inlinevidAsciiToInt( GPS_u8Buffer , &Copy_pf32Lat , &Copy_pf32Long , &Copy_pu8LatDir , &Copy_pu8LongDir  );
    4012:	8d e6       	ldi	r24, 0x6D	; 109
    4014:	91 e0       	ldi	r25, 0x01	; 1
    4016:	9e 01       	movw	r18, r28
    4018:	2c 5f       	subi	r18, 0xFC	; 252
    401a:	3f 4f       	sbci	r19, 0xFF	; 255
    401c:	ae 01       	movw	r20, r28
    401e:	4a 5f       	subi	r20, 0xFA	; 250
    4020:	5f 4f       	sbci	r21, 0xFF	; 255
    4022:	fe 01       	movw	r30, r28
    4024:	38 96       	adiw	r30, 0x08	; 8
    4026:	de 01       	movw	r26, r28
    4028:	1a 96       	adiw	r26, 0x0a	; 10
    402a:	b9 01       	movw	r22, r18
    402c:	9f 01       	movw	r18, r30
    402e:	8d 01       	movw	r16, r26
    4030:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <GPS_inlinevidAsciiToInt>


		GPS_CLEAR_ALL_FLAGSE();
    4034:	10 92 a6 01 	sts	0x01A6, r1
		//****************************************************************//




		Local_enuErrorState = ES_OK ;
    4038:	81 e0       	ldi	r24, 0x01	; 1
    403a:	8a 83       	std	Y+2, r24	; 0x02
    403c:	02 c0       	rjmp	.+4      	; 0x4042 <GPS_enuGetLocation+0x1d8>


	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER ;
    403e:	82 e0       	ldi	r24, 0x02	; 2
    4040:	8a 83       	std	Y+2, r24	; 0x02
	}



	return Local_enuErrorState ;
    4042:	8a 81       	ldd	r24, Y+2	; 0x02

}//End of GPS_enuGetLocation.
    4044:	2b 96       	adiw	r28, 0x0b	; 11
    4046:	0f b6       	in	r0, 0x3f	; 63
    4048:	f8 94       	cli
    404a:	de bf       	out	0x3e, r29	; 62
    404c:	0f be       	out	0x3f, r0	; 63
    404e:	cd bf       	out	0x3d, r28	; 61
    4050:	cf 91       	pop	r28
    4052:	df 91       	pop	r29
    4054:	1f 91       	pop	r17
    4056:	0f 91       	pop	r16
    4058:	08 95       	ret

0000405a <main>:

s32   ch  = 'H';


int main(void)
{
    405a:	df 93       	push	r29
    405c:	cf 93       	push	r28
    405e:	cd b7       	in	r28, 0x3d	; 61
    4060:	de b7       	in	r29, 0x3e	; 62


	EF_void_LCD_init();
    4062:	0e 94 a9 12 	call	0x2552	; 0x2552 <EF_void_LCD_init>

	GPS_enuInit();
    4066:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <GPS_enuInit>

	EF_void_LCD_goto(1 , 1);
    406a:	81 e0       	ldi	r24, 0x01	; 1
    406c:	61 e0       	ldi	r22, 0x01	; 1
    406e:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <EF_void_LCD_goto>





	UART_enuSendByte('M');
    4072:	8d e4       	ldi	r24, 0x4D	; 77
    4074:	0e 94 a3 07 	call	0xf46	; 0xf46 <UART_enuSendByte>
	UART_enuSendByte('a');
    4078:	81 e6       	ldi	r24, 0x61	; 97
    407a:	0e 94 a3 07 	call	0xf46	; 0xf46 <UART_enuSendByte>
	UART_enuSendByte('i');
    407e:	89 e6       	ldi	r24, 0x69	; 105
    4080:	0e 94 a3 07 	call	0xf46	; 0xf46 <UART_enuSendByte>
	UART_enuSendByte('n');
    4084:	8e e6       	ldi	r24, 0x6E	; 110
    4086:	0e 94 a3 07 	call	0xf46	; 0xf46 <UART_enuSendByte>


//EF_void_LCD_print_NUM(s32 s16Numberstring,u8 u8RowNumber);
	EF_void_LCD_print_NUM( ch , 1 );
    408a:	80 91 a4 01 	lds	r24, 0x01A4
    408e:	90 91 a5 01 	lds	r25, 0x01A5
    4092:	61 e0       	ldi	r22, 0x01	; 1
    4094:	0e 94 1b 1b 	call	0x3636	; 0x3636 <EF_void_LCD_print_NUM>

	GPS_enuGetLocation(&Lat , &Long , &latDir , &longDir );
    4098:	8b ea       	ldi	r24, 0xAB	; 171
    409a:	91 e0       	ldi	r25, 0x01	; 1
    409c:	27 ea       	ldi	r18, 0xA7	; 167
    409e:	31 e0       	ldi	r19, 0x01	; 1
    40a0:	40 eb       	ldi	r20, 0xB0	; 176
    40a2:	51 e0       	ldi	r21, 0x01	; 1
    40a4:	ef ea       	ldi	r30, 0xAF	; 175
    40a6:	f1 e0       	ldi	r31, 0x01	; 1
    40a8:	b9 01       	movw	r22, r18
    40aa:	9f 01       	movw	r18, r30
    40ac:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <GPS_enuGetLocation>


	//f32 Lat ;

	EF_void_LCD_print_NUM( Lat , 1 );
    40b0:	80 91 ab 01 	lds	r24, 0x01AB
    40b4:	90 91 ac 01 	lds	r25, 0x01AC
    40b8:	a0 91 ad 01 	lds	r26, 0x01AD
    40bc:	b0 91 ae 01 	lds	r27, 0x01AE
    40c0:	bc 01       	movw	r22, r24
    40c2:	cd 01       	movw	r24, r26
    40c4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    40c8:	dc 01       	movw	r26, r24
    40ca:	cb 01       	movw	r24, r22
    40cc:	61 e0       	ldi	r22, 0x01	; 1
    40ce:	0e 94 1b 1b 	call	0x3636	; 0x3636 <EF_void_LCD_print_NUM>
	while(1)
	{
		//ES_t GPS_enuGetLocation(f32* Copy_pf32Lat , f32* Copy_pf32Long , u8 Copy_pu8LatDir , u8 Copy_pu8LongDir );

		//GPS_enuGetLocation(&var1 , &var2 , &lat , &lon );
		UART_enuSendByte(' ');
    40d2:	80 e2       	ldi	r24, 0x20	; 32
    40d4:	0e 94 a3 07 	call	0xf46	; 0xf46 <UART_enuSendByte>
		UART_enuSendByte(' ');
    40d8:	80 e2       	ldi	r24, 0x20	; 32
    40da:	0e 94 a3 07 	call	0xf46	; 0xf46 <UART_enuSendByte>
		UART_enuSendByte('I');
    40de:	89 e4       	ldi	r24, 0x49	; 73
    40e0:	0e 94 a3 07 	call	0xf46	; 0xf46 <UART_enuSendByte>
		UART_enuSendByte(' ');
    40e4:	80 e2       	ldi	r24, 0x20	; 32
    40e6:	0e 94 a3 07 	call	0xf46	; 0xf46 <UART_enuSendByte>
		UART_enuSendByte('a');
    40ea:	81 e6       	ldi	r24, 0x61	; 97
    40ec:	0e 94 a3 07 	call	0xf46	; 0xf46 <UART_enuSendByte>
		UART_enuSendByte('m');
    40f0:	8d e6       	ldi	r24, 0x6D	; 109
    40f2:	0e 94 a3 07 	call	0xf46	; 0xf46 <UART_enuSendByte>
		UART_enuSendByte(' ');
    40f6:	80 e2       	ldi	r24, 0x20	; 32
    40f8:	0e 94 a3 07 	call	0xf46	; 0xf46 <UART_enuSendByte>
		UART_enuSendByte('i');
    40fc:	89 e6       	ldi	r24, 0x69	; 105
    40fe:	0e 94 a3 07 	call	0xf46	; 0xf46 <UART_enuSendByte>
		UART_enuSendByte('n');
    4102:	8e e6       	ldi	r24, 0x6E	; 110
    4104:	0e 94 a3 07 	call	0xf46	; 0xf46 <UART_enuSendByte>
		UART_enuSendByte(' ');
    4108:	80 e2       	ldi	r24, 0x20	; 32
    410a:	0e 94 a3 07 	call	0xf46	; 0xf46 <UART_enuSendByte>
		UART_enuSendByte('w');
    410e:	87 e7       	ldi	r24, 0x77	; 119
    4110:	0e 94 a3 07 	call	0xf46	; 0xf46 <UART_enuSendByte>
		UART_enuSendByte('h');
    4114:	88 e6       	ldi	r24, 0x68	; 104
    4116:	0e 94 a3 07 	call	0xf46	; 0xf46 <UART_enuSendByte>
		UART_enuSendByte('i');
    411a:	89 e6       	ldi	r24, 0x69	; 105
    411c:	0e 94 a3 07 	call	0xf46	; 0xf46 <UART_enuSendByte>
		UART_enuSendByte('l');
    4120:	8c e6       	ldi	r24, 0x6C	; 108
    4122:	0e 94 a3 07 	call	0xf46	; 0xf46 <UART_enuSendByte>
		UART_enuSendByte('e');
    4126:	85 e6       	ldi	r24, 0x65	; 101
    4128:	0e 94 a3 07 	call	0xf46	; 0xf46 <UART_enuSendByte>
		UART_enuSendByte('(');
    412c:	88 e2       	ldi	r24, 0x28	; 40
    412e:	0e 94 a3 07 	call	0xf46	; 0xf46 <UART_enuSendByte>
		UART_enuSendByte('1');
    4132:	81 e3       	ldi	r24, 0x31	; 49
    4134:	0e 94 a3 07 	call	0xf46	; 0xf46 <UART_enuSendByte>
		UART_enuSendByte(')');
    4138:	89 e2       	ldi	r24, 0x29	; 41
    413a:	0e 94 a3 07 	call	0xf46	; 0xf46 <UART_enuSendByte>
    413e:	ff cf       	rjmp	.-2      	; 0x413e <main+0xe4>

00004140 <__prologue_saves__>:
    4140:	2f 92       	push	r2
    4142:	3f 92       	push	r3
    4144:	4f 92       	push	r4
    4146:	5f 92       	push	r5
    4148:	6f 92       	push	r6
    414a:	7f 92       	push	r7
    414c:	8f 92       	push	r8
    414e:	9f 92       	push	r9
    4150:	af 92       	push	r10
    4152:	bf 92       	push	r11
    4154:	cf 92       	push	r12
    4156:	df 92       	push	r13
    4158:	ef 92       	push	r14
    415a:	ff 92       	push	r15
    415c:	0f 93       	push	r16
    415e:	1f 93       	push	r17
    4160:	cf 93       	push	r28
    4162:	df 93       	push	r29
    4164:	cd b7       	in	r28, 0x3d	; 61
    4166:	de b7       	in	r29, 0x3e	; 62
    4168:	ca 1b       	sub	r28, r26
    416a:	db 0b       	sbc	r29, r27
    416c:	0f b6       	in	r0, 0x3f	; 63
    416e:	f8 94       	cli
    4170:	de bf       	out	0x3e, r29	; 62
    4172:	0f be       	out	0x3f, r0	; 63
    4174:	cd bf       	out	0x3d, r28	; 61
    4176:	09 94       	ijmp

00004178 <__epilogue_restores__>:
    4178:	2a 88       	ldd	r2, Y+18	; 0x12
    417a:	39 88       	ldd	r3, Y+17	; 0x11
    417c:	48 88       	ldd	r4, Y+16	; 0x10
    417e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4180:	6e 84       	ldd	r6, Y+14	; 0x0e
    4182:	7d 84       	ldd	r7, Y+13	; 0x0d
    4184:	8c 84       	ldd	r8, Y+12	; 0x0c
    4186:	9b 84       	ldd	r9, Y+11	; 0x0b
    4188:	aa 84       	ldd	r10, Y+10	; 0x0a
    418a:	b9 84       	ldd	r11, Y+9	; 0x09
    418c:	c8 84       	ldd	r12, Y+8	; 0x08
    418e:	df 80       	ldd	r13, Y+7	; 0x07
    4190:	ee 80       	ldd	r14, Y+6	; 0x06
    4192:	fd 80       	ldd	r15, Y+5	; 0x05
    4194:	0c 81       	ldd	r16, Y+4	; 0x04
    4196:	1b 81       	ldd	r17, Y+3	; 0x03
    4198:	aa 81       	ldd	r26, Y+2	; 0x02
    419a:	b9 81       	ldd	r27, Y+1	; 0x01
    419c:	ce 0f       	add	r28, r30
    419e:	d1 1d       	adc	r29, r1
    41a0:	0f b6       	in	r0, 0x3f	; 63
    41a2:	f8 94       	cli
    41a4:	de bf       	out	0x3e, r29	; 62
    41a6:	0f be       	out	0x3f, r0	; 63
    41a8:	cd bf       	out	0x3d, r28	; 61
    41aa:	ed 01       	movw	r28, r26
    41ac:	08 95       	ret

000041ae <itoa>:
    41ae:	fb 01       	movw	r30, r22
    41b0:	9f 01       	movw	r18, r30
    41b2:	e8 94       	clt
    41b4:	42 30       	cpi	r20, 0x02	; 2
    41b6:	c4 f0       	brlt	.+48     	; 0x41e8 <itoa+0x3a>
    41b8:	45 32       	cpi	r20, 0x25	; 37
    41ba:	b4 f4       	brge	.+44     	; 0x41e8 <itoa+0x3a>
    41bc:	4a 30       	cpi	r20, 0x0A	; 10
    41be:	29 f4       	brne	.+10     	; 0x41ca <itoa+0x1c>
    41c0:	97 fb       	bst	r25, 7
    41c2:	1e f4       	brtc	.+6      	; 0x41ca <itoa+0x1c>
    41c4:	90 95       	com	r25
    41c6:	81 95       	neg	r24
    41c8:	9f 4f       	sbci	r25, 0xFF	; 255
    41ca:	64 2f       	mov	r22, r20
    41cc:	77 27       	eor	r23, r23
    41ce:	0e 94 08 21 	call	0x4210	; 0x4210 <__udivmodhi4>
    41d2:	80 5d       	subi	r24, 0xD0	; 208
    41d4:	8a 33       	cpi	r24, 0x3A	; 58
    41d6:	0c f0       	brlt	.+2      	; 0x41da <itoa+0x2c>
    41d8:	89 5d       	subi	r24, 0xD9	; 217
    41da:	81 93       	st	Z+, r24
    41dc:	cb 01       	movw	r24, r22
    41de:	00 97       	sbiw	r24, 0x00	; 0
    41e0:	a1 f7       	brne	.-24     	; 0x41ca <itoa+0x1c>
    41e2:	16 f4       	brtc	.+4      	; 0x41e8 <itoa+0x3a>
    41e4:	5d e2       	ldi	r21, 0x2D	; 45
    41e6:	51 93       	st	Z+, r21
    41e8:	10 82       	st	Z, r1
    41ea:	c9 01       	movw	r24, r18
    41ec:	0c 94 f8 20 	jmp	0x41f0	; 0x41f0 <strrev>

000041f0 <strrev>:
    41f0:	dc 01       	movw	r26, r24
    41f2:	fc 01       	movw	r30, r24
    41f4:	67 2f       	mov	r22, r23
    41f6:	71 91       	ld	r23, Z+
    41f8:	77 23       	and	r23, r23
    41fa:	e1 f7       	brne	.-8      	; 0x41f4 <strrev+0x4>
    41fc:	32 97       	sbiw	r30, 0x02	; 2
    41fe:	04 c0       	rjmp	.+8      	; 0x4208 <strrev+0x18>
    4200:	7c 91       	ld	r23, X
    4202:	6d 93       	st	X+, r22
    4204:	70 83       	st	Z, r23
    4206:	62 91       	ld	r22, -Z
    4208:	ae 17       	cp	r26, r30
    420a:	bf 07       	cpc	r27, r31
    420c:	c8 f3       	brcs	.-14     	; 0x4200 <strrev+0x10>
    420e:	08 95       	ret

00004210 <__udivmodhi4>:
    4210:	aa 1b       	sub	r26, r26
    4212:	bb 1b       	sub	r27, r27
    4214:	51 e1       	ldi	r21, 0x11	; 17
    4216:	07 c0       	rjmp	.+14     	; 0x4226 <__udivmodhi4_ep>

00004218 <__udivmodhi4_loop>:
    4218:	aa 1f       	adc	r26, r26
    421a:	bb 1f       	adc	r27, r27
    421c:	a6 17       	cp	r26, r22
    421e:	b7 07       	cpc	r27, r23
    4220:	10 f0       	brcs	.+4      	; 0x4226 <__udivmodhi4_ep>
    4222:	a6 1b       	sub	r26, r22
    4224:	b7 0b       	sbc	r27, r23

00004226 <__udivmodhi4_ep>:
    4226:	88 1f       	adc	r24, r24
    4228:	99 1f       	adc	r25, r25
    422a:	5a 95       	dec	r21
    422c:	a9 f7       	brne	.-22     	; 0x4218 <__udivmodhi4_loop>
    422e:	80 95       	com	r24
    4230:	90 95       	com	r25
    4232:	bc 01       	movw	r22, r24
    4234:	cd 01       	movw	r24, r26
    4236:	08 95       	ret

00004238 <_exit>:
    4238:	f8 94       	cli

0000423a <__stop_program>:
    423a:	ff cf       	rjmp	.-2      	; 0x423a <__stop_program>
