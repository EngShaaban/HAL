
GPS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000040ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000154  00800060  000040ae  00004142  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  008001b4  008001b4  00004296  2**0
                  ALLOC
  3 .stab         00003bd0  00000000  00000000  00004298  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000164b  00000000  00000000  00007e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000094b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00009653  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00009845  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000bc50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000cfd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000e1ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000e36c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000e662  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000efd0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ea       	ldi	r30, 0xAE	; 174
      68:	f0 e4       	ldi	r31, 0x40	; 64
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3b       	cpi	r26, 0xB4	; 180
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 eb       	ldi	r26, 0xB4	; 180
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3b       	cpi	r26, 0xBF	; 191
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <main>
      8a:	0c 94 55 20 	jmp	0x40aa	; 0x40aa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ed 1f 	jmp	0x3fda	; 0x3fda <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 09 20 	jmp	0x4012	; 0x4012 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f9 1f 	jmp	0x3ff2	; 0x3ff2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 15 20 	jmp	0x402a	; 0x402a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f9 1f 	jmp	0x3ff2	; 0x3ff2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 15 20 	jmp	0x402a	; 0x402a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ed 1f 	jmp	0x3fda	; 0x3fda <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 09 20 	jmp	0x4012	; 0x4012 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f5 1f 	jmp	0x3fea	; 0x3fea <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 11 20 	jmp	0x4022	; 0x4022 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f9 1f 	jmp	0x3ff2	; 0x3ff2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 15 20 	jmp	0x402a	; 0x402a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f9 1f 	jmp	0x3ff2	; 0x3ff2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 15 20 	jmp	0x402a	; 0x402a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f9 1f 	jmp	0x3ff2	; 0x3ff2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 15 20 	jmp	0x402a	; 0x402a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 fd 1f 	jmp	0x3ffa	; 0x3ffa <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 19 20 	jmp	0x4032	; 0x4032 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 f5 1f 	jmp	0x3fea	; 0x3fea <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 11 20 	jmp	0x4022	; 0x4022 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_enuInit>:
#include "UART_Priv.h"
#include "UART_Cnfg.h"


void UART_enuInit( void )
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	 *                                                                           *
	 *                               5.4_ For Asynchronous mode .                *
	 *                                          Clear UCPOL Bit.                 *
	 *                                                                           *
	 ****************************************************************************/
	UCSRC =( (UART_MSK_BIT<<URSEL)|(UART_MSK_BIT<<UCSZ0)|(UART_MSK_BIT<<UCSZ1)  );
     e36:	e0 e4       	ldi	r30, 0x40	; 64
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	86 e8       	ldi	r24, 0x86	; 134
     e3c:	80 83       	st	Z, r24

	UCSRA  &=~(UART_MSK_BIT<<U2X);

#elif UART_SPEED_MODE == DOUBLE

	UCSRA  |=(UART_MSK_BIT<<U2X);
     e3e:	ab e2       	ldi	r26, 0x2B	; 43
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	eb e2       	ldi	r30, 0x2B	; 43
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	82 60       	ori	r24, 0x02	; 2
     e4a:	8c 93       	st	X, r24

#endif



	UBRRL = MY_UBRRL  ;
     e4c:	e9 e2       	ldi	r30, 0x29	; 41
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	8c e0       	ldi	r24, 0x0C	; 12
     e52:	80 83       	st	Z, r24
	UBRRH = MY_UBRRH  ;
     e54:	e0 e4       	ldi	r30, 0x40	; 64
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	10 82       	st	Z, r1
	UART_RX_START();

#elif   UART_MODE   == TRANSCEIVER

	//3.Enable the  RXEN and TXEN Bit
	UART_TX_START();
     e5a:	aa e2       	ldi	r26, 0x2A	; 42
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	ea e2       	ldi	r30, 0x2A	; 42
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	88 60       	ori	r24, 0x08	; 8
     e66:	8c 93       	st	X, r24
	UART_RX_START();
     e68:	aa e2       	ldi	r26, 0x2A	; 42
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	ea e2       	ldi	r30, 0x2A	; 42
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	80 61       	ori	r24, 0x10	; 16
     e74:	8c 93       	st	X, r24


	//2.Configure the UART Multi-processor Communication Mode.
#if  UART_MPC_MODE   ==  DISABLE_MPCM

	UCSRA  &=~(UART_MSK_BIT<<MPCM);
     e76:	ab e2       	ldi	r26, 0x2B	; 43
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	eb e2       	ldi	r30, 0x2B	; 43
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	8e 7f       	andi	r24, 0xFE	; 254
     e82:	8c 93       	st	X, r24

	UCSRA  |=(UART_MSK_BIT<<MPCM);

#endif

}//End of UART_
     e84:	cf 91       	pop	r28
     e86:	df 91       	pop	r29
     e88:	08 95       	ret

00000e8a <UART_enuSendByte>:



ES_t UART_enuSendByte(u8 Copy_u8Data)
{
     e8a:	df 93       	push	r29
     e8c:	cf 93       	push	r28
     e8e:	00 d0       	rcall	.+0      	; 0xe90 <UART_enuSendByte+0x6>
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
     e94:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState  = ES_NOK ;
     e96:	19 82       	std	Y+1, r1	; 0x01

	// Poll the for the UDRE
	while( !((UCSRA>>UDRE)&1) );
     e98:	eb e2       	ldi	r30, 0x2B	; 43
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	82 95       	swap	r24
     ea0:	86 95       	lsr	r24
     ea2:	87 70       	andi	r24, 0x07	; 7
     ea4:	88 2f       	mov	r24, r24
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	81 70       	andi	r24, 0x01	; 1
     eaa:	90 70       	andi	r25, 0x00	; 0
     eac:	00 97       	sbiw	r24, 0x00	; 0
     eae:	a1 f3       	breq	.-24     	; 0xe98 <UART_enuSendByte+0xe>

	UDR = Copy_u8Data  ;
     eb0:	ec e2       	ldi	r30, 0x2C	; 44
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	80 83       	st	Z, r24

	//Check for the Completion of Transmittioin.
	if( (UCSRA>>TXC)&1 )
     eb8:	eb e2       	ldi	r30, 0x2B	; 43
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	82 95       	swap	r24
     ec0:	86 95       	lsr	r24
     ec2:	86 95       	lsr	r24
     ec4:	83 70       	andi	r24, 0x03	; 3
     ec6:	88 2f       	mov	r24, r24
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	81 70       	andi	r24, 0x01	; 1
     ecc:	90 70       	andi	r25, 0x00	; 0
     ece:	88 23       	and	r24, r24
     ed0:	49 f0       	breq	.+18     	; 0xee4 <UART_enuSendByte+0x5a>
	{
		//Clear the flag.
		UCSRA |=(UART_MSK_BIT<<TXC);
     ed2:	ab e2       	ldi	r26, 0x2B	; 43
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	eb e2       	ldi	r30, 0x2B	; 43
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	80 64       	ori	r24, 0x40	; 64
     ede:	8c 93       	st	X, r24

		Local_enuErrorState = ES_OK ;
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		//Do nothing.
	}

	return Local_enuErrorState  ;
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
}//End of UART_enuSendByte().
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	cf 91       	pop	r28
     eec:	df 91       	pop	r29
     eee:	08 95       	ret

00000ef0 <UART_enuRecieveByte>:


ES_t UART_enuRecieveByte( u8* Copy_u8Data )
{
     ef0:	df 93       	push	r29
     ef2:	cf 93       	push	r28
     ef4:	00 d0       	rcall	.+0      	; 0xef6 <UART_enuRecieveByte+0x6>
     ef6:	0f 92       	push	r0
     ef8:	cd b7       	in	r28, 0x3d	; 61
     efa:	de b7       	in	r29, 0x3e	; 62
     efc:	9b 83       	std	Y+3, r25	; 0x03
     efe:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState  = ES_NOK ;
     f00:	19 82       	std	Y+1, r1	; 0x01

	if(  Copy_u8Data != NULL  )
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	9b 81       	ldd	r25, Y+3	; 0x03
     f06:	00 97       	sbiw	r24, 0x00	; 0
     f08:	71 f0       	breq	.+28     	; 0xf26 <UART_enuRecieveByte+0x36>
	{
		//There is NO Data to Read.
		while( !(( UCSRA>>RXC)&1) );
     f0a:	eb e2       	ldi	r30, 0x2B	; 43
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	88 23       	and	r24, r24
     f12:	dc f7       	brge	.-10     	; 0xf0a <UART_enuRecieveByte+0x1a>

		*Copy_u8Data = UDR ;
     f14:	ec e2       	ldi	r30, 0x2C	; 44
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	ea 81       	ldd	r30, Y+2	; 0x02
     f1c:	fb 81       	ldd	r31, Y+3	; 0x03
     f1e:	80 83       	st	Z, r24

		Local_enuErrorState  = ES_OK ;
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	89 83       	std	Y+1, r24	; 0x01
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <UART_enuRecieveByte+0x3a>
	}
	else
	{
		Local_enuErrorState  = ES_NULL_POINTER;
     f26:	82 e0       	ldi	r24, 0x02	; 2
     f28:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState  ;
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
}//End of UART_enuRecieveByte().
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
     f30:	0f 90       	pop	r0
     f32:	cf 91       	pop	r28
     f34:	df 91       	pop	r29
     f36:	08 95       	ret

00000f38 <UART_enuSendString>:

//          UART_enuSendString( arr );

ES_t UART_enuSendString( const u8* Copy_pcData)
{
     f38:	df 93       	push	r29
     f3a:	cf 93       	push	r28
     f3c:	00 d0       	rcall	.+0      	; 0xf3e <UART_enuSendString+0x6>
     f3e:	0f 92       	push	r0
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	9b 83       	std	Y+3, r25	; 0x03
     f46:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState  = ES_NOK ;
     f48:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_pcData != NULL )
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	9b 81       	ldd	r25, Y+3	; 0x03
     f4e:	00 97       	sbiw	r24, 0x00	; 0
     f50:	01 f1       	breq	.+64     	; 0xf92 <UART_enuSendString+0x5a>
     f52:	17 c0       	rjmp	.+46     	; 0xf82 <UART_enuSendString+0x4a>
	{

		while( *Copy_pcData != '\0')
		{

			while( !((UCSRA>>UDRE)&1) );
     f54:	eb e2       	ldi	r30, 0x2B	; 43
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	82 95       	swap	r24
     f5c:	86 95       	lsr	r24
     f5e:	87 70       	andi	r24, 0x07	; 7
     f60:	88 2f       	mov	r24, r24
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	81 70       	andi	r24, 0x01	; 1
     f66:	90 70       	andi	r25, 0x00	; 0
     f68:	00 97       	sbiw	r24, 0x00	; 0
     f6a:	a1 f3       	breq	.-24     	; 0xf54 <UART_enuSendString+0x1c>

			UDR = *Copy_pcData ;
     f6c:	ac e2       	ldi	r26, 0x2C	; 44
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	ea 81       	ldd	r30, Y+2	; 0x02
     f72:	fb 81       	ldd	r31, Y+3	; 0x03
     f74:	80 81       	ld	r24, Z
     f76:	8c 93       	st	X, r24

			Copy_pcData++ ;
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	9b 81       	ldd	r25, Y+3	; 0x03
     f7c:	01 96       	adiw	r24, 0x01	; 1
     f7e:	9b 83       	std	Y+3, r25	; 0x03
     f80:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState  = ES_NOK ;

	if( Copy_pcData != NULL )
	{

		while( *Copy_pcData != '\0')
     f82:	ea 81       	ldd	r30, Y+2	; 0x02
     f84:	fb 81       	ldd	r31, Y+3	; 0x03
     f86:	80 81       	ld	r24, Z
     f88:	88 23       	and	r24, r24
     f8a:	21 f7       	brne	.-56     	; 0xf54 <UART_enuSendString+0x1c>

			Copy_pcData++ ;

		}

		Local_enuErrorState  = ES_OK ;
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	89 83       	std	Y+1, r24	; 0x01
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <UART_enuSendString+0x5e>
	}
	else
	{
		Local_enuErrorState  = ES_NULL_POINTER ;
     f92:	82 e0       	ldi	r24, 0x02	; 2
     f94:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState  ;
     f96:	89 81       	ldd	r24, Y+1	; 0x01
}//End of UART_enuRecieveByte().
     f98:	0f 90       	pop	r0
     f9a:	0f 90       	pop	r0
     f9c:	0f 90       	pop	r0
     f9e:	cf 91       	pop	r28
     fa0:	df 91       	pop	r29
     fa2:	08 95       	ret

00000fa4 <UART_enuReceiveString>:



ES_t UART_enuReceiveString(u8*  Copy_pcData)
{
     fa4:	df 93       	push	r29
     fa6:	cf 93       	push	r28
     fa8:	00 d0       	rcall	.+0      	; 0xfaa <UART_enuReceiveString+0x6>
     faa:	00 d0       	rcall	.+0      	; 0xfac <UART_enuReceiveString+0x8>
     fac:	00 d0       	rcall	.+0      	; 0xfae <UART_enuReceiveString+0xa>
     fae:	cd b7       	in	r28, 0x3d	; 61
     fb0:	de b7       	in	r29, 0x3e	; 62
     fb2:	9e 83       	std	Y+6, r25	; 0x06
     fb4:	8d 83       	std	Y+5, r24	; 0x05
	ES_t Local_enuErrorState  = ES_NOK ;
     fb6:	1c 82       	std	Y+4, r1	; 0x04

	if( Copy_pcData != 	NULL )
     fb8:	8d 81       	ldd	r24, Y+5	; 0x05
     fba:	9e 81       	ldd	r25, Y+6	; 0x06
     fbc:	00 97       	sbiw	r24, 0x00	; 0
     fbe:	91 f1       	breq	.+100    	; 0x1024 <UART_enuReceiveString+0x80>
	{
		u8 Local_u8Data  = 0  ;
     fc0:	1b 82       	std	Y+3, r1	; 0x03

		u8 Local_u8Index = 0  ;
     fc2:	1a 82       	std	Y+2, r1	; 0x02

		while( !((UCSRA>>RXC)&1) );
     fc4:	eb e2       	ldi	r30, 0x2B	; 43
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	88 23       	and	r24, r24
     fcc:	dc f7       	brge	.-10     	; 0xfc4 <UART_enuReceiveString+0x20>

		u8 Local_u8Terminator = UDR ;
     fce:	ec e2       	ldi	r30, 0x2C	; 44
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	89 83       	std	Y+1, r24	; 0x01

		while(1)
		{
			while( !((UCSRA>>RXC)&1) );
     fd6:	eb e2       	ldi	r30, 0x2B	; 43
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	88 23       	and	r24, r24
     fde:	dc f7       	brge	.-10     	; 0xfd6 <UART_enuReceiveString+0x32>

			Local_u8Data = UDR ;
     fe0:	ec e2       	ldi	r30, 0x2C	; 44
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	8b 83       	std	Y+3, r24	; 0x03

			if(Local_u8Data == Local_u8Terminator )
     fe8:	9b 81       	ldd	r25, Y+3	; 0x03
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	98 17       	cp	r25, r24
     fee:	61 f4       	brne	.+24     	; 0x1008 <UART_enuReceiveString+0x64>
			{
				Copy_pcData[Local_u8Index] = '\0' ;
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	8d 81       	ldd	r24, Y+5	; 0x05
     ff8:	9e 81       	ldd	r25, Y+6	; 0x06
     ffa:	fc 01       	movw	r30, r24
     ffc:	e2 0f       	add	r30, r18
     ffe:	f3 1f       	adc	r31, r19
    1000:	10 82       	st	Z, r1
				Local_u8Index++ ;
			}

		}

		Local_enuErrorState = ES_OK ;
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	8c 83       	std	Y+4, r24	; 0x04
    1006:	10 c0       	rjmp	.+32     	; 0x1028 <UART_enuReceiveString+0x84>

				break;
			}
			else
			{
				Copy_pcData[Local_u8Index] = Local_u8Data ;
    1008:	8a 81       	ldd	r24, Y+2	; 0x02
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	8d 81       	ldd	r24, Y+5	; 0x05
    1010:	9e 81       	ldd	r25, Y+6	; 0x06
    1012:	fc 01       	movw	r30, r24
    1014:	e2 0f       	add	r30, r18
    1016:	f3 1f       	adc	r31, r19
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	80 83       	st	Z, r24

				Local_u8Index++ ;
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	8f 5f       	subi	r24, 0xFF	; 255
    1020:	8a 83       	std	Y+2, r24	; 0x02
    1022:	d9 cf       	rjmp	.-78     	; 0xfd6 <UART_enuReceiveString+0x32>

		Local_enuErrorState = ES_OK ;
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER ;
    1024:	82 e0       	ldi	r24, 0x02	; 2
    1026:	8c 83       	std	Y+4, r24	; 0x04
	}

	return Local_enuErrorState  ;
    1028:	8c 81       	ldd	r24, Y+4	; 0x04
}//End of UART_enuRecieveByte().
    102a:	26 96       	adiw	r28, 0x06	; 6
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	f8 94       	cli
    1030:	de bf       	out	0x3e, r29	; 62
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	cd bf       	out	0x3d, r28	; 61
    1036:	cf 91       	pop	r28
    1038:	df 91       	pop	r29
    103a:	08 95       	ret

0000103c <DIO_enuSetPortDirection>:
/*                 : Arg.2: Copy_u8Dir:                                     */
/*                                        DIO_INPTU_PIN  ,   DIO_OUTPUT_PIN */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Dir)
{
    103c:	df 93       	push	r29
    103e:	cf 93       	push	r28
    1040:	00 d0       	rcall	.+0      	; 0x1042 <DIO_enuSetPortDirection+0x6>
    1042:	00 d0       	rcall	.+0      	; 0x1044 <DIO_enuSetPortDirection+0x8>
    1044:	0f 92       	push	r0
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	8a 83       	std	Y+2, r24	; 0x02
    104c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuerrorState = ES_NOK ;
    104e:	19 82       	std	Y+1, r1	; 0x01

	if( (Copy_u8PortID <= DIO_PORTD )&& (Copy_u8Dir <= OUTPUT_PORT)  )
    1050:	8a 81       	ldd	r24, Y+2	; 0x02
    1052:	84 30       	cpi	r24, 0x04	; 4
    1054:	a8 f5       	brcc	.+106    	; 0x10c0 <DIO_enuSetPortDirection+0x84>
	{
		switch( Copy_u8PortID )
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	3d 83       	std	Y+5, r19	; 0x05
    105e:	2c 83       	std	Y+4, r18	; 0x04
    1060:	8c 81       	ldd	r24, Y+4	; 0x04
    1062:	9d 81       	ldd	r25, Y+5	; 0x05
    1064:	81 30       	cpi	r24, 0x01	; 1
    1066:	91 05       	cpc	r25, r1
    1068:	d1 f0       	breq	.+52     	; 0x109e <DIO_enuSetPortDirection+0x62>
    106a:	2c 81       	ldd	r18, Y+4	; 0x04
    106c:	3d 81       	ldd	r19, Y+5	; 0x05
    106e:	22 30       	cpi	r18, 0x02	; 2
    1070:	31 05       	cpc	r19, r1
    1072:	2c f4       	brge	.+10     	; 0x107e <DIO_enuSetPortDirection+0x42>
    1074:	8c 81       	ldd	r24, Y+4	; 0x04
    1076:	9d 81       	ldd	r25, Y+5	; 0x05
    1078:	00 97       	sbiw	r24, 0x00	; 0
    107a:	61 f0       	breq	.+24     	; 0x1094 <DIO_enuSetPortDirection+0x58>
    107c:	1e c0       	rjmp	.+60     	; 0x10ba <DIO_enuSetPortDirection+0x7e>
    107e:	2c 81       	ldd	r18, Y+4	; 0x04
    1080:	3d 81       	ldd	r19, Y+5	; 0x05
    1082:	22 30       	cpi	r18, 0x02	; 2
    1084:	31 05       	cpc	r19, r1
    1086:	81 f0       	breq	.+32     	; 0x10a8 <DIO_enuSetPortDirection+0x6c>
    1088:	8c 81       	ldd	r24, Y+4	; 0x04
    108a:	9d 81       	ldd	r25, Y+5	; 0x05
    108c:	83 30       	cpi	r24, 0x03	; 3
    108e:	91 05       	cpc	r25, r1
    1090:	81 f0       	breq	.+32     	; 0x10b2 <DIO_enuSetPortDirection+0x76>
    1092:	13 c0       	rjmp	.+38     	; 0x10ba <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA :
			DDRA = Copy_u8Dir;
    1094:	ea e3       	ldi	r30, 0x3A	; 58
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	80 83       	st	Z, r24
    109c:	0e c0       	rjmp	.+28     	; 0x10ba <DIO_enuSetPortDirection+0x7e>
			break;

		case DIO_PORTB :
			DDRB = Copy_u8Dir;
    109e:	e7 e3       	ldi	r30, 0x37	; 55
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
    10a4:	80 83       	st	Z, r24
    10a6:	09 c0       	rjmp	.+18     	; 0x10ba <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC :
			DDRC = Copy_u8Dir;
    10a8:	e4 e3       	ldi	r30, 0x34	; 52
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	8b 81       	ldd	r24, Y+3	; 0x03
    10ae:	80 83       	st	Z, r24
    10b0:	04 c0       	rjmp	.+8      	; 0x10ba <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD :
			DDRD = Copy_u8Dir;
    10b2:	e1 e3       	ldi	r30, 0x31	; 49
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	80 83       	st	Z, r24
			break;
		}
		Local_enuerrorState = ES_OK;
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <DIO_enuSetPortDirection+0x88>

	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
    10c0:	83 e0       	ldi	r24, 0x03	; 3
    10c2:	89 83       	std	Y+1, r24	; 0x01

	}


	return Local_enuerrorState  ;
    10c4:	89 81       	ldd	r24, Y+1	; 0x01

}//End of DIO_enuSetPortDirection().
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <DIO_enuSetPortValue>:
/*                 : Arg.2: Copy_u8Val:                                     */
/*                                        DIO_INPTU_PIN  ,  DIO_OUTPUT_PIN  */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuSetPortValue(u8 Copy_u8PortID, u8 Copy_u8Val)
{
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	00 d0       	rcall	.+0      	; 0x10dc <DIO_enuSetPortValue+0x6>
    10dc:	00 d0       	rcall	.+0      	; 0x10de <DIO_enuSetPortValue+0x8>
    10de:	0f 92       	push	r0
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
    10e4:	8a 83       	std	Y+2, r24	; 0x02
    10e6:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuerrorState = ES_NOK ;
    10e8:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8PortID <= DIO_PORTD )
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
    10ec:	84 30       	cpi	r24, 0x04	; 4
    10ee:	a8 f5       	brcc	.+106    	; 0x115a <DIO_enuSetPortValue+0x84>
	{
		switch( Copy_u8PortID )
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	3d 83       	std	Y+5, r19	; 0x05
    10f8:	2c 83       	std	Y+4, r18	; 0x04
    10fa:	8c 81       	ldd	r24, Y+4	; 0x04
    10fc:	9d 81       	ldd	r25, Y+5	; 0x05
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	91 05       	cpc	r25, r1
    1102:	d1 f0       	breq	.+52     	; 0x1138 <DIO_enuSetPortValue+0x62>
    1104:	2c 81       	ldd	r18, Y+4	; 0x04
    1106:	3d 81       	ldd	r19, Y+5	; 0x05
    1108:	22 30       	cpi	r18, 0x02	; 2
    110a:	31 05       	cpc	r19, r1
    110c:	2c f4       	brge	.+10     	; 0x1118 <DIO_enuSetPortValue+0x42>
    110e:	8c 81       	ldd	r24, Y+4	; 0x04
    1110:	9d 81       	ldd	r25, Y+5	; 0x05
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	61 f0       	breq	.+24     	; 0x112e <DIO_enuSetPortValue+0x58>
    1116:	1e c0       	rjmp	.+60     	; 0x1154 <DIO_enuSetPortValue+0x7e>
    1118:	2c 81       	ldd	r18, Y+4	; 0x04
    111a:	3d 81       	ldd	r19, Y+5	; 0x05
    111c:	22 30       	cpi	r18, 0x02	; 2
    111e:	31 05       	cpc	r19, r1
    1120:	81 f0       	breq	.+32     	; 0x1142 <DIO_enuSetPortValue+0x6c>
    1122:	8c 81       	ldd	r24, Y+4	; 0x04
    1124:	9d 81       	ldd	r25, Y+5	; 0x05
    1126:	83 30       	cpi	r24, 0x03	; 3
    1128:	91 05       	cpc	r25, r1
    112a:	81 f0       	breq	.+32     	; 0x114c <DIO_enuSetPortValue+0x76>
    112c:	13 c0       	rjmp	.+38     	; 0x1154 <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA :
			PORTA = Copy_u8Val;
    112e:	eb e3       	ldi	r30, 0x3B	; 59
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	80 83       	st	Z, r24
    1136:	0e c0       	rjmp	.+28     	; 0x1154 <DIO_enuSetPortValue+0x7e>
			break;

		case DIO_PORTB :
			PORTB = Copy_u8Val;
    1138:	e8 e3       	ldi	r30, 0x38	; 56
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	8b 81       	ldd	r24, Y+3	; 0x03
    113e:	80 83       	st	Z, r24
    1140:	09 c0       	rjmp	.+18     	; 0x1154 <DIO_enuSetPortValue+0x7e>
			break;

		case DIO_PORTC :
			PORTC = Copy_u8Val;
    1142:	e5 e3       	ldi	r30, 0x35	; 53
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	80 83       	st	Z, r24
    114a:	04 c0       	rjmp	.+8      	; 0x1154 <DIO_enuSetPortValue+0x7e>
			break;

		case DIO_PORTD :
			PORTD = Copy_u8Val;
    114c:	e2 e3       	ldi	r30, 0x32	; 50
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	80 83       	st	Z, r24
			break;
		}

		Local_enuerrorState = ES_OK;
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	89 83       	std	Y+1, r24	; 0x01
    1158:	02 c0       	rjmp	.+4      	; 0x115e <DIO_enuSetPortValue+0x88>

	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
    115a:	83 e0       	ldi	r24, 0x03	; 3
    115c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuerrorState  ;
    115e:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuSetPortValue().
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	08 95       	ret

00001170 <DIO_enuToggelPort>:
/*                                        DIO_PORTA      ,   DIO_PORTA      */
/*                                        DIO_PORTA      ,   DIO_PORTA      */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuToggelPort(u8  Copy_u8PortID )
{
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	00 d0       	rcall	.+0      	; 0x1176 <DIO_enuToggelPort+0x6>
    1176:	00 d0       	rcall	.+0      	; 0x1178 <DIO_enuToggelPort+0x8>
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
    117c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuerrorState = ES_NOK ;
    117e:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8PortID <= DIO_PORTD )
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	84 30       	cpi	r24, 0x04	; 4
    1184:	08 f0       	brcs	.+2      	; 0x1188 <DIO_enuToggelPort+0x18>
    1186:	41 c0       	rjmp	.+130    	; 0x120a <DIO_enuToggelPort+0x9a>
	{
		switch( Copy_u8PortID )
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	3c 83       	std	Y+4, r19	; 0x04
    1190:	2b 83       	std	Y+3, r18	; 0x03
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	9c 81       	ldd	r25, Y+4	; 0x04
    1196:	81 30       	cpi	r24, 0x01	; 1
    1198:	91 05       	cpc	r25, r1
    119a:	e9 f0       	breq	.+58     	; 0x11d6 <DIO_enuToggelPort+0x66>
    119c:	2b 81       	ldd	r18, Y+3	; 0x03
    119e:	3c 81       	ldd	r19, Y+4	; 0x04
    11a0:	22 30       	cpi	r18, 0x02	; 2
    11a2:	31 05       	cpc	r19, r1
    11a4:	2c f4       	brge	.+10     	; 0x11b0 <DIO_enuToggelPort+0x40>
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	9c 81       	ldd	r25, Y+4	; 0x04
    11aa:	00 97       	sbiw	r24, 0x00	; 0
    11ac:	61 f0       	breq	.+24     	; 0x11c6 <DIO_enuToggelPort+0x56>
    11ae:	2a c0       	rjmp	.+84     	; 0x1204 <DIO_enuToggelPort+0x94>
    11b0:	2b 81       	ldd	r18, Y+3	; 0x03
    11b2:	3c 81       	ldd	r19, Y+4	; 0x04
    11b4:	22 30       	cpi	r18, 0x02	; 2
    11b6:	31 05       	cpc	r19, r1
    11b8:	b1 f0       	breq	.+44     	; 0x11e6 <DIO_enuToggelPort+0x76>
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	9c 81       	ldd	r25, Y+4	; 0x04
    11be:	83 30       	cpi	r24, 0x03	; 3
    11c0:	91 05       	cpc	r25, r1
    11c2:	c9 f0       	breq	.+50     	; 0x11f6 <DIO_enuToggelPort+0x86>
    11c4:	1f c0       	rjmp	.+62     	; 0x1204 <DIO_enuToggelPort+0x94>
		{
		case DIO_PORTA :
			PORTA = ~PORTA;
    11c6:	ab e3       	ldi	r26, 0x3B	; 59
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	eb e3       	ldi	r30, 0x3B	; 59
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	80 95       	com	r24
    11d2:	8c 93       	st	X, r24
    11d4:	17 c0       	rjmp	.+46     	; 0x1204 <DIO_enuToggelPort+0x94>
			break;

		case DIO_PORTB :
			PORTB = ~PORTB;
    11d6:	a8 e3       	ldi	r26, 0x38	; 56
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e8 e3       	ldi	r30, 0x38	; 56
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	80 95       	com	r24
    11e2:	8c 93       	st	X, r24
    11e4:	0f c0       	rjmp	.+30     	; 0x1204 <DIO_enuToggelPort+0x94>
			break;

		case DIO_PORTC :
			PORTC = ~PORTC;
    11e6:	a5 e3       	ldi	r26, 0x35	; 53
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	e5 e3       	ldi	r30, 0x35	; 53
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	80 95       	com	r24
    11f2:	8c 93       	st	X, r24
    11f4:	07 c0       	rjmp	.+14     	; 0x1204 <DIO_enuToggelPort+0x94>
			break;

		case DIO_PORTD :
			PORTD = ~PORTD ;
    11f6:	a2 e3       	ldi	r26, 0x32	; 50
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	e2 e3       	ldi	r30, 0x32	; 50
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	80 95       	com	r24
    1202:	8c 93       	st	X, r24
			break;
		}

		Local_enuerrorState = ES_OK;
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	89 83       	std	Y+1, r24	; 0x01
    1208:	02 c0       	rjmp	.+4      	; 0x120e <DIO_enuToggelPort+0x9e>

	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
    120a:	83 e0       	ldi	r24, 0x03	; 3
    120c:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuerrorState  ;
    120e:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuToggelPort().
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	cf 91       	pop	r28
    121a:	df 91       	pop	r29
    121c:	08 95       	ret

0000121e <DIO_enuGetPortVlaue>:
/*                                                                          */
/*                 : Arg.2: Address of u8 variable.                         */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuGetPortVlaue(u8 Copy_u8PortID, u8* Copy_pu8PortVal)
{
    121e:	df 93       	push	r29
    1220:	cf 93       	push	r28
    1222:	00 d0       	rcall	.+0      	; 0x1224 <DIO_enuGetPortVlaue+0x6>
    1224:	00 d0       	rcall	.+0      	; 0x1226 <DIO_enuGetPortVlaue+0x8>
    1226:	00 d0       	rcall	.+0      	; 0x1228 <DIO_enuGetPortVlaue+0xa>
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	8a 83       	std	Y+2, r24	; 0x02
    122e:	7c 83       	std	Y+4, r23	; 0x04
    1230:	6b 83       	std	Y+3, r22	; 0x03
	//Local Variable to
	ES_t Local_enuerrorState = ES_NOK ;
    1232:	19 82       	std	Y+1, r1	; 0x01

	// Check to ensure that the passed address is not equal Null.
	if( Copy_pu8PortVal != NULL )
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	9c 81       	ldd	r25, Y+4	; 0x04
    1238:	00 97       	sbiw	r24, 0x00	; 0
    123a:	09 f4       	brne	.+2      	; 0x123e <DIO_enuGetPortVlaue+0x20>
    123c:	43 c0       	rjmp	.+134    	; 0x12c4 <DIO_enuGetPortVlaue+0xa6>
	{
		// Check to ensure that the passed PortID is in range.
		if( Copy_u8PortID <= DIO_PORTD )
    123e:	8a 81       	ldd	r24, Y+2	; 0x02
    1240:	84 30       	cpi	r24, 0x04	; 4
    1242:	e8 f5       	brcc	.+122    	; 0x12be <DIO_enuGetPortVlaue+0xa0>
		{

			/**********************************************************
			 * Switching for the suitable case .
			 **********************************************************/
			switch( Copy_u8PortID )
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	3e 83       	std	Y+6, r19	; 0x06
    124c:	2d 83       	std	Y+5, r18	; 0x05
    124e:	8d 81       	ldd	r24, Y+5	; 0x05
    1250:	9e 81       	ldd	r25, Y+6	; 0x06
    1252:	81 30       	cpi	r24, 0x01	; 1
    1254:	91 05       	cpc	r25, r1
    1256:	e1 f0       	breq	.+56     	; 0x1290 <DIO_enuGetPortVlaue+0x72>
    1258:	2d 81       	ldd	r18, Y+5	; 0x05
    125a:	3e 81       	ldd	r19, Y+6	; 0x06
    125c:	22 30       	cpi	r18, 0x02	; 2
    125e:	31 05       	cpc	r19, r1
    1260:	2c f4       	brge	.+10     	; 0x126c <DIO_enuGetPortVlaue+0x4e>
    1262:	8d 81       	ldd	r24, Y+5	; 0x05
    1264:	9e 81       	ldd	r25, Y+6	; 0x06
    1266:	00 97       	sbiw	r24, 0x00	; 0
    1268:	61 f0       	breq	.+24     	; 0x1282 <DIO_enuGetPortVlaue+0x64>
    126a:	26 c0       	rjmp	.+76     	; 0x12b8 <DIO_enuGetPortVlaue+0x9a>
    126c:	2d 81       	ldd	r18, Y+5	; 0x05
    126e:	3e 81       	ldd	r19, Y+6	; 0x06
    1270:	22 30       	cpi	r18, 0x02	; 2
    1272:	31 05       	cpc	r19, r1
    1274:	a1 f0       	breq	.+40     	; 0x129e <DIO_enuGetPortVlaue+0x80>
    1276:	8d 81       	ldd	r24, Y+5	; 0x05
    1278:	9e 81       	ldd	r25, Y+6	; 0x06
    127a:	83 30       	cpi	r24, 0x03	; 3
    127c:	91 05       	cpc	r25, r1
    127e:	b1 f0       	breq	.+44     	; 0x12ac <DIO_enuGetPortVlaue+0x8e>
    1280:	1b c0       	rjmp	.+54     	; 0x12b8 <DIO_enuGetPortVlaue+0x9a>
			{
			case DIO_PORTA :
				*Copy_pu8PortVal = PINA;
    1282:	e9 e3       	ldi	r30, 0x39	; 57
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	eb 81       	ldd	r30, Y+3	; 0x03
    128a:	fc 81       	ldd	r31, Y+4	; 0x04
    128c:	80 83       	st	Z, r24
    128e:	14 c0       	rjmp	.+40     	; 0x12b8 <DIO_enuGetPortVlaue+0x9a>
				break;

			case DIO_PORTB :
				*Copy_pu8PortVal = PINB;
    1290:	e6 e3       	ldi	r30, 0x36	; 54
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	eb 81       	ldd	r30, Y+3	; 0x03
    1298:	fc 81       	ldd	r31, Y+4	; 0x04
    129a:	80 83       	st	Z, r24
    129c:	0d c0       	rjmp	.+26     	; 0x12b8 <DIO_enuGetPortVlaue+0x9a>
				break;

			case DIO_PORTC :
				*Copy_pu8PortVal = PINC;
    129e:	e3 e3       	ldi	r30, 0x33	; 51
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	eb 81       	ldd	r30, Y+3	; 0x03
    12a6:	fc 81       	ldd	r31, Y+4	; 0x04
    12a8:	80 83       	st	Z, r24
    12aa:	06 c0       	rjmp	.+12     	; 0x12b8 <DIO_enuGetPortVlaue+0x9a>
				break;

			case DIO_PORTD :
				*Copy_pu8PortVal = PIND ;
    12ac:	e0 e3       	ldi	r30, 0x30	; 48
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	eb 81       	ldd	r30, Y+3	; 0x03
    12b4:	fc 81       	ldd	r31, Y+4	; 0x04
    12b6:	80 83       	st	Z, r24
				break;
			}

			Local_enuerrorState = ES_OK;
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	89 83       	std	Y+1, r24	; 0x01
    12bc:	05 c0       	rjmp	.+10     	; 0x12c8 <DIO_enuGetPortVlaue+0xaa>
		else
		{
			/**********************************************************
			 * Handle Out Of Range case.
			 **********************************************************/
			Local_enuerrorState = ES_OUT_OF_RANGE;
    12be:	83 e0       	ldi	r24, 0x03	; 3
    12c0:	89 83       	std	Y+1, r24	; 0x01
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <DIO_enuGetPortVlaue+0xaa>
	else
	{
		/**********************************************************
		 * Handle null pointer case.
		 **********************************************************/
		Local_enuerrorState = ES_NULL_POINTER;
    12c4:	82 e0       	ldi	r24, 0x02	; 2
    12c6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuerrorState  ;
    12c8:	89 81       	ldd	r24, Y+1	; 0x01

}//End of DIO_enuGetPortVlaue().
    12ca:	26 96       	adiw	r28, 0x06	; 6
    12cc:	0f b6       	in	r0, 0x3f	; 63
    12ce:	f8 94       	cli
    12d0:	de bf       	out	0x3e, r29	; 62
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	cd bf       	out	0x3d, r28	; 61
    12d6:	cf 91       	pop	r28
    12d8:	df 91       	pop	r29
    12da:	08 95       	ret

000012dc <DIO_enuSetPinDirection>:
/*                 : Arg.3: Copy_u8Dir.                                     */
/*                                       DIO_INPTU_PIN   ,   DIO_OUTPUT_PIN */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID, u8 Copy_u8PinID , u8 Copy_u8Dir)
{
    12dc:	df 93       	push	r29
    12de:	cf 93       	push	r28
    12e0:	00 d0       	rcall	.+0      	; 0x12e2 <DIO_enuSetPinDirection+0x6>
    12e2:	00 d0       	rcall	.+0      	; 0x12e4 <DIO_enuSetPinDirection+0x8>
    12e4:	00 d0       	rcall	.+0      	; 0x12e6 <DIO_enuSetPinDirection+0xa>
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	8a 83       	std	Y+2, r24	; 0x02
    12ec:	6b 83       	std	Y+3, r22	; 0x03
    12ee:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuerrorState = ES_NOK ;
    12f0:	19 82       	std	Y+1, r1	; 0x01

	if( (Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <= DIO_PIN7) &&( Copy_u8Dir<= OUTPUT_PIN))
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
    12f4:	84 30       	cpi	r24, 0x04	; 4
    12f6:	08 f0       	brcs	.+2      	; 0x12fa <DIO_enuSetPinDirection+0x1e>
    12f8:	dc c0       	rjmp	.+440    	; 0x14b2 <DIO_enuSetPinDirection+0x1d6>
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	88 30       	cpi	r24, 0x08	; 8
    12fe:	08 f0       	brcs	.+2      	; 0x1302 <DIO_enuSetPinDirection+0x26>
    1300:	d8 c0       	rjmp	.+432    	; 0x14b2 <DIO_enuSetPinDirection+0x1d6>
    1302:	8c 81       	ldd	r24, Y+4	; 0x04
    1304:	82 30       	cpi	r24, 0x02	; 2
    1306:	08 f0       	brcs	.+2      	; 0x130a <DIO_enuSetPinDirection+0x2e>
    1308:	d4 c0       	rjmp	.+424    	; 0x14b2 <DIO_enuSetPinDirection+0x1d6>
	{

		/**********************************************************
		 * Switching for the suitable case .
		 **********************************************************/
		switch( Copy_u8PortID )
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	3e 83       	std	Y+6, r19	; 0x06
    1312:	2d 83       	std	Y+5, r18	; 0x05
    1314:	8d 81       	ldd	r24, Y+5	; 0x05
    1316:	9e 81       	ldd	r25, Y+6	; 0x06
    1318:	81 30       	cpi	r24, 0x01	; 1
    131a:	91 05       	cpc	r25, r1
    131c:	09 f4       	brne	.+2      	; 0x1320 <DIO_enuSetPinDirection+0x44>
    131e:	43 c0       	rjmp	.+134    	; 0x13a6 <DIO_enuSetPinDirection+0xca>
    1320:	2d 81       	ldd	r18, Y+5	; 0x05
    1322:	3e 81       	ldd	r19, Y+6	; 0x06
    1324:	22 30       	cpi	r18, 0x02	; 2
    1326:	31 05       	cpc	r19, r1
    1328:	2c f4       	brge	.+10     	; 0x1334 <DIO_enuSetPinDirection+0x58>
    132a:	8d 81       	ldd	r24, Y+5	; 0x05
    132c:	9e 81       	ldd	r25, Y+6	; 0x06
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	71 f0       	breq	.+28     	; 0x134e <DIO_enuSetPinDirection+0x72>
    1332:	bc c0       	rjmp	.+376    	; 0x14ac <DIO_enuSetPinDirection+0x1d0>
    1334:	2d 81       	ldd	r18, Y+5	; 0x05
    1336:	3e 81       	ldd	r19, Y+6	; 0x06
    1338:	22 30       	cpi	r18, 0x02	; 2
    133a:	31 05       	cpc	r19, r1
    133c:	09 f4       	brne	.+2      	; 0x1340 <DIO_enuSetPinDirection+0x64>
    133e:	5f c0       	rjmp	.+190    	; 0x13fe <DIO_enuSetPinDirection+0x122>
    1340:	8d 81       	ldd	r24, Y+5	; 0x05
    1342:	9e 81       	ldd	r25, Y+6	; 0x06
    1344:	83 30       	cpi	r24, 0x03	; 3
    1346:	91 05       	cpc	r25, r1
    1348:	09 f4       	brne	.+2      	; 0x134c <DIO_enuSetPinDirection+0x70>
    134a:	85 c0       	rjmp	.+266    	; 0x1456 <DIO_enuSetPinDirection+0x17a>
    134c:	af c0       	rjmp	.+350    	; 0x14ac <DIO_enuSetPinDirection+0x1d0>
		{
		case DIO_PORTA :
			if( Copy_u8Dir == INPTU_PIN)
    134e:	8c 81       	ldd	r24, Y+4	; 0x04
    1350:	88 23       	and	r24, r24
    1352:	a9 f4       	brne	.+42     	; 0x137e <DIO_enuSetPinDirection+0xa2>
			{
				DDRA &=~(DIO_MASK_BIT<<Copy_u8PinID);
    1354:	aa e3       	ldi	r26, 0x3A	; 58
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	ea e3       	ldi	r30, 0x3A	; 58
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	48 2f       	mov	r20, r24
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	02 2e       	mov	r0, r18
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <DIO_enuSetPinDirection+0x96>
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	0a 94       	dec	r0
    1374:	e2 f7       	brpl	.-8      	; 0x136e <DIO_enuSetPinDirection+0x92>
    1376:	80 95       	com	r24
    1378:	84 23       	and	r24, r20
    137a:	8c 93       	st	X, r24
    137c:	97 c0       	rjmp	.+302    	; 0x14ac <DIO_enuSetPinDirection+0x1d0>
			}
			else
			{
				DDRA |=(DIO_MASK_BIT<<Copy_u8PinID);
    137e:	aa e3       	ldi	r26, 0x3A	; 58
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	ea e3       	ldi	r30, 0x3A	; 58
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	48 2f       	mov	r20, r24
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	02 2e       	mov	r0, r18
    1396:	02 c0       	rjmp	.+4      	; 0x139c <DIO_enuSetPinDirection+0xc0>
    1398:	88 0f       	add	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	0a 94       	dec	r0
    139e:	e2 f7       	brpl	.-8      	; 0x1398 <DIO_enuSetPinDirection+0xbc>
    13a0:	84 2b       	or	r24, r20
    13a2:	8c 93       	st	X, r24
    13a4:	83 c0       	rjmp	.+262    	; 0x14ac <DIO_enuSetPinDirection+0x1d0>
			}

			break;

		case DIO_PORTB :
			if( Copy_u8Dir == INPTU_PIN)
    13a6:	8c 81       	ldd	r24, Y+4	; 0x04
    13a8:	88 23       	and	r24, r24
    13aa:	a9 f4       	brne	.+42     	; 0x13d6 <DIO_enuSetPinDirection+0xfa>
			{
				DDRB &=~(DIO_MASK_BIT<<Copy_u8PinID);
    13ac:	a7 e3       	ldi	r26, 0x37	; 55
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e7 e3       	ldi	r30, 0x37	; 55
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	48 2f       	mov	r20, r24
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	02 2e       	mov	r0, r18
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <DIO_enuSetPinDirection+0xee>
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	0a 94       	dec	r0
    13cc:	e2 f7       	brpl	.-8      	; 0x13c6 <DIO_enuSetPinDirection+0xea>
    13ce:	80 95       	com	r24
    13d0:	84 23       	and	r24, r20
    13d2:	8c 93       	st	X, r24
    13d4:	6b c0       	rjmp	.+214    	; 0x14ac <DIO_enuSetPinDirection+0x1d0>
			}
			else
			{
				DDRB |=(DIO_MASK_BIT<<Copy_u8PinID);
    13d6:	a7 e3       	ldi	r26, 0x37	; 55
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	e7 e3       	ldi	r30, 0x37	; 55
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	48 2f       	mov	r20, r24
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	28 2f       	mov	r18, r24
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	02 2e       	mov	r0, r18
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <DIO_enuSetPinDirection+0x118>
    13f0:	88 0f       	add	r24, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	0a 94       	dec	r0
    13f6:	e2 f7       	brpl	.-8      	; 0x13f0 <DIO_enuSetPinDirection+0x114>
    13f8:	84 2b       	or	r24, r20
    13fa:	8c 93       	st	X, r24
    13fc:	57 c0       	rjmp	.+174    	; 0x14ac <DIO_enuSetPinDirection+0x1d0>
			}
			break;

		case DIO_PORTC :

			if( Copy_u8Dir == INPTU_PIN)
    13fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1400:	88 23       	and	r24, r24
    1402:	a9 f4       	brne	.+42     	; 0x142e <DIO_enuSetPinDirection+0x152>
			{
				DDRC &=~(DIO_MASK_BIT<<Copy_u8PinID);
    1404:	a4 e3       	ldi	r26, 0x34	; 52
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	e4 e3       	ldi	r30, 0x34	; 52
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	48 2f       	mov	r20, r24
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	28 2f       	mov	r18, r24
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	02 2e       	mov	r0, r18
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <DIO_enuSetPinDirection+0x146>
    141e:	88 0f       	add	r24, r24
    1420:	99 1f       	adc	r25, r25
    1422:	0a 94       	dec	r0
    1424:	e2 f7       	brpl	.-8      	; 0x141e <DIO_enuSetPinDirection+0x142>
    1426:	80 95       	com	r24
    1428:	84 23       	and	r24, r20
    142a:	8c 93       	st	X, r24
    142c:	3f c0       	rjmp	.+126    	; 0x14ac <DIO_enuSetPinDirection+0x1d0>
			}
			else
			{
				DDRC |=(DIO_MASK_BIT<<Copy_u8PinID);
    142e:	a4 e3       	ldi	r26, 0x34	; 52
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	e4 e3       	ldi	r30, 0x34	; 52
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	48 2f       	mov	r20, r24
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	28 2f       	mov	r18, r24
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	02 2e       	mov	r0, r18
    1446:	02 c0       	rjmp	.+4      	; 0x144c <DIO_enuSetPinDirection+0x170>
    1448:	88 0f       	add	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	0a 94       	dec	r0
    144e:	e2 f7       	brpl	.-8      	; 0x1448 <DIO_enuSetPinDirection+0x16c>
    1450:	84 2b       	or	r24, r20
    1452:	8c 93       	st	X, r24
    1454:	2b c0       	rjmp	.+86     	; 0x14ac <DIO_enuSetPinDirection+0x1d0>
			}
			break;

		case DIO_PORTD :
			if( Copy_u8Dir == INPTU_PIN)
    1456:	8c 81       	ldd	r24, Y+4	; 0x04
    1458:	88 23       	and	r24, r24
    145a:	a9 f4       	brne	.+42     	; 0x1486 <DIO_enuSetPinDirection+0x1aa>
			{
				DDRD &=~(DIO_MASK_BIT<<Copy_u8PinID);
    145c:	a1 e3       	ldi	r26, 0x31	; 49
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	e1 e3       	ldi	r30, 0x31	; 49
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	48 2f       	mov	r20, r24
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	02 2e       	mov	r0, r18
    1474:	02 c0       	rjmp	.+4      	; 0x147a <DIO_enuSetPinDirection+0x19e>
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	0a 94       	dec	r0
    147c:	e2 f7       	brpl	.-8      	; 0x1476 <DIO_enuSetPinDirection+0x19a>
    147e:	80 95       	com	r24
    1480:	84 23       	and	r24, r20
    1482:	8c 93       	st	X, r24
    1484:	13 c0       	rjmp	.+38     	; 0x14ac <DIO_enuSetPinDirection+0x1d0>
			}
			else
			{
				DDRD |=(DIO_MASK_BIT<<Copy_u8PinID);
    1486:	a1 e3       	ldi	r26, 0x31	; 49
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	e1 e3       	ldi	r30, 0x31	; 49
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	48 2f       	mov	r20, r24
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	28 2f       	mov	r18, r24
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	02 2e       	mov	r0, r18
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <DIO_enuSetPinDirection+0x1c8>
    14a0:	88 0f       	add	r24, r24
    14a2:	99 1f       	adc	r25, r25
    14a4:	0a 94       	dec	r0
    14a6:	e2 f7       	brpl	.-8      	; 0x14a0 <DIO_enuSetPinDirection+0x1c4>
    14a8:	84 2b       	or	r24, r20
    14aa:	8c 93       	st	X, r24
			}
			break;

		}
		Local_enuerrorState = ES_OK;
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	89 83       	std	Y+1, r24	; 0x01
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <DIO_enuSetPinDirection+0x1da>
	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
    14b2:	83 e0       	ldi	r24, 0x03	; 3
    14b4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuerrorState  ;
    14b6:	89 81       	ldd	r24, Y+1	; 0x01

}//End of DIO_enuSetPinDirection().
    14b8:	26 96       	adiw	r28, 0x06	; 6
    14ba:	0f b6       	in	r0, 0x3f	; 63
    14bc:	f8 94       	cli
    14be:	de bf       	out	0x3e, r29	; 62
    14c0:	0f be       	out	0x3f, r0	; 63
    14c2:	cd bf       	out	0x3d, r28	; 61
    14c4:	cf 91       	pop	r28
    14c6:	df 91       	pop	r29
    14c8:	08 95       	ret

000014ca <DIO_enuSetPinValue>:
/*                 : Arg.3: Copy_u8Val.                                     */
/*                                        DIO_LOW        ,   DIO_HIGH       */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuSetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID ,u8 Copy_u8Val)
{
    14ca:	df 93       	push	r29
    14cc:	cf 93       	push	r28
    14ce:	00 d0       	rcall	.+0      	; 0x14d0 <DIO_enuSetPinValue+0x6>
    14d0:	00 d0       	rcall	.+0      	; 0x14d2 <DIO_enuSetPinValue+0x8>
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <DIO_enuSetPinValue+0xa>
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
    14d8:	8a 83       	std	Y+2, r24	; 0x02
    14da:	6b 83       	std	Y+3, r22	; 0x03
    14dc:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuerrorState = ES_NOK ;
    14de:	19 82       	std	Y+1, r1	; 0x01

	if( (Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <= DIO_PIN7) &&( Copy_u8Val<=DIO_HIGH))
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	84 30       	cpi	r24, 0x04	; 4
    14e4:	08 f0       	brcs	.+2      	; 0x14e8 <DIO_enuSetPinValue+0x1e>
    14e6:	dc c0       	rjmp	.+440    	; 0x16a0 <DIO_enuSetPinValue+0x1d6>
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	88 30       	cpi	r24, 0x08	; 8
    14ec:	08 f0       	brcs	.+2      	; 0x14f0 <DIO_enuSetPinValue+0x26>
    14ee:	d8 c0       	rjmp	.+432    	; 0x16a0 <DIO_enuSetPinValue+0x1d6>
    14f0:	8c 81       	ldd	r24, Y+4	; 0x04
    14f2:	82 30       	cpi	r24, 0x02	; 2
    14f4:	08 f0       	brcs	.+2      	; 0x14f8 <DIO_enuSetPinValue+0x2e>
    14f6:	d4 c0       	rjmp	.+424    	; 0x16a0 <DIO_enuSetPinValue+0x1d6>
	{

		/**********************************************************
		 * Switching for the suitable case .
		 **********************************************************/
		switch( Copy_u8PortID )
    14f8:	8a 81       	ldd	r24, Y+2	; 0x02
    14fa:	28 2f       	mov	r18, r24
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	3e 83       	std	Y+6, r19	; 0x06
    1500:	2d 83       	std	Y+5, r18	; 0x05
    1502:	8d 81       	ldd	r24, Y+5	; 0x05
    1504:	9e 81       	ldd	r25, Y+6	; 0x06
    1506:	81 30       	cpi	r24, 0x01	; 1
    1508:	91 05       	cpc	r25, r1
    150a:	09 f4       	brne	.+2      	; 0x150e <DIO_enuSetPinValue+0x44>
    150c:	43 c0       	rjmp	.+134    	; 0x1594 <DIO_enuSetPinValue+0xca>
    150e:	2d 81       	ldd	r18, Y+5	; 0x05
    1510:	3e 81       	ldd	r19, Y+6	; 0x06
    1512:	22 30       	cpi	r18, 0x02	; 2
    1514:	31 05       	cpc	r19, r1
    1516:	2c f4       	brge	.+10     	; 0x1522 <DIO_enuSetPinValue+0x58>
    1518:	8d 81       	ldd	r24, Y+5	; 0x05
    151a:	9e 81       	ldd	r25, Y+6	; 0x06
    151c:	00 97       	sbiw	r24, 0x00	; 0
    151e:	71 f0       	breq	.+28     	; 0x153c <DIO_enuSetPinValue+0x72>
    1520:	bc c0       	rjmp	.+376    	; 0x169a <DIO_enuSetPinValue+0x1d0>
    1522:	2d 81       	ldd	r18, Y+5	; 0x05
    1524:	3e 81       	ldd	r19, Y+6	; 0x06
    1526:	22 30       	cpi	r18, 0x02	; 2
    1528:	31 05       	cpc	r19, r1
    152a:	09 f4       	brne	.+2      	; 0x152e <DIO_enuSetPinValue+0x64>
    152c:	5f c0       	rjmp	.+190    	; 0x15ec <DIO_enuSetPinValue+0x122>
    152e:	8d 81       	ldd	r24, Y+5	; 0x05
    1530:	9e 81       	ldd	r25, Y+6	; 0x06
    1532:	83 30       	cpi	r24, 0x03	; 3
    1534:	91 05       	cpc	r25, r1
    1536:	09 f4       	brne	.+2      	; 0x153a <DIO_enuSetPinValue+0x70>
    1538:	85 c0       	rjmp	.+266    	; 0x1644 <DIO_enuSetPinValue+0x17a>
    153a:	af c0       	rjmp	.+350    	; 0x169a <DIO_enuSetPinValue+0x1d0>
		{
		case DIO_PORTA :
			if( Copy_u8Val == DIO_LOW)
    153c:	8c 81       	ldd	r24, Y+4	; 0x04
    153e:	88 23       	and	r24, r24
    1540:	a9 f4       	brne	.+42     	; 0x156c <DIO_enuSetPinValue+0xa2>
			{
				PORTA &=~(DIO_MASK_BIT<<Copy_u8PinID);
    1542:	ab e3       	ldi	r26, 0x3B	; 59
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	eb e3       	ldi	r30, 0x3B	; 59
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	48 2f       	mov	r20, r24
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	02 2e       	mov	r0, r18
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <DIO_enuSetPinValue+0x96>
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	0a 94       	dec	r0
    1562:	e2 f7       	brpl	.-8      	; 0x155c <DIO_enuSetPinValue+0x92>
    1564:	80 95       	com	r24
    1566:	84 23       	and	r24, r20
    1568:	8c 93       	st	X, r24
    156a:	97 c0       	rjmp	.+302    	; 0x169a <DIO_enuSetPinValue+0x1d0>
			}
			else
			{
				PORTA |=(DIO_MASK_BIT<<Copy_u8PinID);
    156c:	ab e3       	ldi	r26, 0x3B	; 59
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	eb e3       	ldi	r30, 0x3B	; 59
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	48 2f       	mov	r20, r24
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	28 2f       	mov	r18, r24
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	02 2e       	mov	r0, r18
    1584:	02 c0       	rjmp	.+4      	; 0x158a <DIO_enuSetPinValue+0xc0>
    1586:	88 0f       	add	r24, r24
    1588:	99 1f       	adc	r25, r25
    158a:	0a 94       	dec	r0
    158c:	e2 f7       	brpl	.-8      	; 0x1586 <DIO_enuSetPinValue+0xbc>
    158e:	84 2b       	or	r24, r20
    1590:	8c 93       	st	X, r24
    1592:	83 c0       	rjmp	.+262    	; 0x169a <DIO_enuSetPinValue+0x1d0>
			}

			break;

		case DIO_PORTB :
			if( Copy_u8Val == DIO_LOW)
    1594:	8c 81       	ldd	r24, Y+4	; 0x04
    1596:	88 23       	and	r24, r24
    1598:	a9 f4       	brne	.+42     	; 0x15c4 <DIO_enuSetPinValue+0xfa>
			{
				PORTB &=~(DIO_MASK_BIT<<Copy_u8PinID);
    159a:	a8 e3       	ldi	r26, 0x38	; 56
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	e8 e3       	ldi	r30, 0x38	; 56
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	48 2f       	mov	r20, r24
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	02 2e       	mov	r0, r18
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <DIO_enuSetPinValue+0xee>
    15b4:	88 0f       	add	r24, r24
    15b6:	99 1f       	adc	r25, r25
    15b8:	0a 94       	dec	r0
    15ba:	e2 f7       	brpl	.-8      	; 0x15b4 <DIO_enuSetPinValue+0xea>
    15bc:	80 95       	com	r24
    15be:	84 23       	and	r24, r20
    15c0:	8c 93       	st	X, r24
    15c2:	6b c0       	rjmp	.+214    	; 0x169a <DIO_enuSetPinValue+0x1d0>
			}
			else
			{
				PORTB |=(DIO_MASK_BIT<<Copy_u8PinID);
    15c4:	a8 e3       	ldi	r26, 0x38	; 56
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e8 e3       	ldi	r30, 0x38	; 56
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	48 2f       	mov	r20, r24
    15d0:	8b 81       	ldd	r24, Y+3	; 0x03
    15d2:	28 2f       	mov	r18, r24
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	02 2e       	mov	r0, r18
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <DIO_enuSetPinValue+0x118>
    15de:	88 0f       	add	r24, r24
    15e0:	99 1f       	adc	r25, r25
    15e2:	0a 94       	dec	r0
    15e4:	e2 f7       	brpl	.-8      	; 0x15de <DIO_enuSetPinValue+0x114>
    15e6:	84 2b       	or	r24, r20
    15e8:	8c 93       	st	X, r24
    15ea:	57 c0       	rjmp	.+174    	; 0x169a <DIO_enuSetPinValue+0x1d0>

			break;

		case DIO_PORTC :

			if( Copy_u8Val == DIO_LOW)
    15ec:	8c 81       	ldd	r24, Y+4	; 0x04
    15ee:	88 23       	and	r24, r24
    15f0:	a9 f4       	brne	.+42     	; 0x161c <DIO_enuSetPinValue+0x152>
			{
				PORTC &=~(DIO_MASK_BIT<<Copy_u8PinID);
    15f2:	a5 e3       	ldi	r26, 0x35	; 53
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e5 e3       	ldi	r30, 0x35	; 53
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	48 2f       	mov	r20, r24
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	02 2e       	mov	r0, r18
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <DIO_enuSetPinValue+0x146>
    160c:	88 0f       	add	r24, r24
    160e:	99 1f       	adc	r25, r25
    1610:	0a 94       	dec	r0
    1612:	e2 f7       	brpl	.-8      	; 0x160c <DIO_enuSetPinValue+0x142>
    1614:	80 95       	com	r24
    1616:	84 23       	and	r24, r20
    1618:	8c 93       	st	X, r24
    161a:	3f c0       	rjmp	.+126    	; 0x169a <DIO_enuSetPinValue+0x1d0>
			}
			else
			{
				PORTC |=(DIO_MASK_BIT<<Copy_u8PinID);
    161c:	a5 e3       	ldi	r26, 0x35	; 53
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	e5 e3       	ldi	r30, 0x35	; 53
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	48 2f       	mov	r20, r24
    1628:	8b 81       	ldd	r24, Y+3	; 0x03
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	02 2e       	mov	r0, r18
    1634:	02 c0       	rjmp	.+4      	; 0x163a <DIO_enuSetPinValue+0x170>
    1636:	88 0f       	add	r24, r24
    1638:	99 1f       	adc	r25, r25
    163a:	0a 94       	dec	r0
    163c:	e2 f7       	brpl	.-8      	; 0x1636 <DIO_enuSetPinValue+0x16c>
    163e:	84 2b       	or	r24, r20
    1640:	8c 93       	st	X, r24
    1642:	2b c0       	rjmp	.+86     	; 0x169a <DIO_enuSetPinValue+0x1d0>
			}

			break;

		case DIO_PORTD :
			if( Copy_u8Val == DIO_LOW)
    1644:	8c 81       	ldd	r24, Y+4	; 0x04
    1646:	88 23       	and	r24, r24
    1648:	a9 f4       	brne	.+42     	; 0x1674 <DIO_enuSetPinValue+0x1aa>
			{
				PORTD &=~(DIO_MASK_BIT<<Copy_u8PinID);
    164a:	a2 e3       	ldi	r26, 0x32	; 50
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	e2 e3       	ldi	r30, 0x32	; 50
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	48 2f       	mov	r20, r24
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	28 2f       	mov	r18, r24
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	02 2e       	mov	r0, r18
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <DIO_enuSetPinValue+0x19e>
    1664:	88 0f       	add	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	0a 94       	dec	r0
    166a:	e2 f7       	brpl	.-8      	; 0x1664 <DIO_enuSetPinValue+0x19a>
    166c:	80 95       	com	r24
    166e:	84 23       	and	r24, r20
    1670:	8c 93       	st	X, r24
    1672:	13 c0       	rjmp	.+38     	; 0x169a <DIO_enuSetPinValue+0x1d0>
			}
			else
			{
				PORTD |=(DIO_MASK_BIT<<Copy_u8PinID);
    1674:	a2 e3       	ldi	r26, 0x32	; 50
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	e2 e3       	ldi	r30, 0x32	; 50
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	48 2f       	mov	r20, r24
    1680:	8b 81       	ldd	r24, Y+3	; 0x03
    1682:	28 2f       	mov	r18, r24
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	02 2e       	mov	r0, r18
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <DIO_enuSetPinValue+0x1c8>
    168e:	88 0f       	add	r24, r24
    1690:	99 1f       	adc	r25, r25
    1692:	0a 94       	dec	r0
    1694:	e2 f7       	brpl	.-8      	; 0x168e <DIO_enuSetPinValue+0x1c4>
    1696:	84 2b       	or	r24, r20
    1698:	8c 93       	st	X, r24
			}

			break;

		}
		Local_enuerrorState = ES_OK;
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	89 83       	std	Y+1, r24	; 0x01
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <DIO_enuSetPinValue+0x1da>
	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
    16a0:	83 e0       	ldi	r24, 0x03	; 3
    16a2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuerrorState  ;
    16a4:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuSetPinValue().
    16a6:	26 96       	adiw	r28, 0x06	; 6
    16a8:	0f b6       	in	r0, 0x3f	; 63
    16aa:	f8 94       	cli
    16ac:	de bf       	out	0x3e, r29	; 62
    16ae:	0f be       	out	0x3f, r0	; 63
    16b0:	cd bf       	out	0x3d, r28	; 61
    16b2:	cf 91       	pop	r28
    16b4:	df 91       	pop	r29
    16b6:	08 95       	ret

000016b8 <DIO_enuToggelPin>:
/*                                        DIO_PIN2       ,   DIO_PIN6       */
/*                                        DIO_PIN3       ,   DIO_PIN7       */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuToggelPin(u8  Copy_u8PortID, u8 Copy_u8PinID  )
{
    16b8:	df 93       	push	r29
    16ba:	cf 93       	push	r28
    16bc:	00 d0       	rcall	.+0      	; 0x16be <DIO_enuToggelPin+0x6>
    16be:	00 d0       	rcall	.+0      	; 0x16c0 <DIO_enuToggelPin+0x8>
    16c0:	0f 92       	push	r0
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    16c6:	8a 83       	std	Y+2, r24	; 0x02
    16c8:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuerrorState = ES_NOK ;
    16ca:	19 82       	std	Y+1, r1	; 0x01

	if( (Copy_u8PortID <= DIO_PORTD) &&  (Copy_u8PinID <= DIO_PIN7) )
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	84 30       	cpi	r24, 0x04	; 4
    16d0:	08 f0       	brcs	.+2      	; 0x16d4 <DIO_enuToggelPin+0x1c>
    16d2:	75 c0       	rjmp	.+234    	; 0x17be <DIO_enuToggelPin+0x106>
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	88 30       	cpi	r24, 0x08	; 8
    16d8:	08 f0       	brcs	.+2      	; 0x16dc <DIO_enuToggelPin+0x24>
    16da:	71 c0       	rjmp	.+226    	; 0x17be <DIO_enuToggelPin+0x106>
	{
		/**********************************************************
		 * Switching for the suitable case .
		 **********************************************************/
		switch( Copy_u8PortID )
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	28 2f       	mov	r18, r24
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	3d 83       	std	Y+5, r19	; 0x05
    16e4:	2c 83       	std	Y+4, r18	; 0x04
    16e6:	8c 81       	ldd	r24, Y+4	; 0x04
    16e8:	9d 81       	ldd	r25, Y+5	; 0x05
    16ea:	81 30       	cpi	r24, 0x01	; 1
    16ec:	91 05       	cpc	r25, r1
    16ee:	49 f1       	breq	.+82     	; 0x1742 <DIO_enuToggelPin+0x8a>
    16f0:	2c 81       	ldd	r18, Y+4	; 0x04
    16f2:	3d 81       	ldd	r19, Y+5	; 0x05
    16f4:	22 30       	cpi	r18, 0x02	; 2
    16f6:	31 05       	cpc	r19, r1
    16f8:	2c f4       	brge	.+10     	; 0x1704 <DIO_enuToggelPin+0x4c>
    16fa:	8c 81       	ldd	r24, Y+4	; 0x04
    16fc:	9d 81       	ldd	r25, Y+5	; 0x05
    16fe:	00 97       	sbiw	r24, 0x00	; 0
    1700:	61 f0       	breq	.+24     	; 0x171a <DIO_enuToggelPin+0x62>
    1702:	5a c0       	rjmp	.+180    	; 0x17b8 <DIO_enuToggelPin+0x100>
    1704:	2c 81       	ldd	r18, Y+4	; 0x04
    1706:	3d 81       	ldd	r19, Y+5	; 0x05
    1708:	22 30       	cpi	r18, 0x02	; 2
    170a:	31 05       	cpc	r19, r1
    170c:	71 f1       	breq	.+92     	; 0x176a <DIO_enuToggelPin+0xb2>
    170e:	8c 81       	ldd	r24, Y+4	; 0x04
    1710:	9d 81       	ldd	r25, Y+5	; 0x05
    1712:	83 30       	cpi	r24, 0x03	; 3
    1714:	91 05       	cpc	r25, r1
    1716:	e9 f1       	breq	.+122    	; 0x1792 <DIO_enuToggelPin+0xda>
    1718:	4f c0       	rjmp	.+158    	; 0x17b8 <DIO_enuToggelPin+0x100>
		{
		case DIO_PORTA :
			PORTA ^=(DIO_MASK_BIT<<Copy_u8PinID);
    171a:	ab e3       	ldi	r26, 0x3B	; 59
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	eb e3       	ldi	r30, 0x3B	; 59
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	48 2f       	mov	r20, r24
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	02 2e       	mov	r0, r18
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <DIO_enuToggelPin+0x80>
    1734:	88 0f       	add	r24, r24
    1736:	99 1f       	adc	r25, r25
    1738:	0a 94       	dec	r0
    173a:	e2 f7       	brpl	.-8      	; 0x1734 <DIO_enuToggelPin+0x7c>
    173c:	84 27       	eor	r24, r20
    173e:	8c 93       	st	X, r24
    1740:	3b c0       	rjmp	.+118    	; 0x17b8 <DIO_enuToggelPin+0x100>
			break;

		case DIO_PORTB :
			PORTB ^=(DIO_MASK_BIT<<Copy_u8PinID);
    1742:	a8 e3       	ldi	r26, 0x38	; 56
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	e8 e3       	ldi	r30, 0x38	; 56
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	48 2f       	mov	r20, r24
    174e:	8b 81       	ldd	r24, Y+3	; 0x03
    1750:	28 2f       	mov	r18, r24
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	02 2e       	mov	r0, r18
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <DIO_enuToggelPin+0xa8>
    175c:	88 0f       	add	r24, r24
    175e:	99 1f       	adc	r25, r25
    1760:	0a 94       	dec	r0
    1762:	e2 f7       	brpl	.-8      	; 0x175c <DIO_enuToggelPin+0xa4>
    1764:	84 27       	eor	r24, r20
    1766:	8c 93       	st	X, r24
    1768:	27 c0       	rjmp	.+78     	; 0x17b8 <DIO_enuToggelPin+0x100>
			break;

		case DIO_PORTC :
			PORTC ^=(DIO_MASK_BIT<<Copy_u8PinID);
    176a:	a5 e3       	ldi	r26, 0x35	; 53
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	e5 e3       	ldi	r30, 0x35	; 53
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	48 2f       	mov	r20, r24
    1776:	8b 81       	ldd	r24, Y+3	; 0x03
    1778:	28 2f       	mov	r18, r24
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	02 2e       	mov	r0, r18
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <DIO_enuToggelPin+0xd0>
    1784:	88 0f       	add	r24, r24
    1786:	99 1f       	adc	r25, r25
    1788:	0a 94       	dec	r0
    178a:	e2 f7       	brpl	.-8      	; 0x1784 <DIO_enuToggelPin+0xcc>
    178c:	84 27       	eor	r24, r20
    178e:	8c 93       	st	X, r24
    1790:	13 c0       	rjmp	.+38     	; 0x17b8 <DIO_enuToggelPin+0x100>
			break;

		case DIO_PORTD :
			PORTD ^=(DIO_MASK_BIT<<Copy_u8PinID);
    1792:	a2 e3       	ldi	r26, 0x32	; 50
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	e2 e3       	ldi	r30, 0x32	; 50
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	48 2f       	mov	r20, r24
    179e:	8b 81       	ldd	r24, Y+3	; 0x03
    17a0:	28 2f       	mov	r18, r24
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	02 2e       	mov	r0, r18
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <DIO_enuToggelPin+0xf8>
    17ac:	88 0f       	add	r24, r24
    17ae:	99 1f       	adc	r25, r25
    17b0:	0a 94       	dec	r0
    17b2:	e2 f7       	brpl	.-8      	; 0x17ac <DIO_enuToggelPin+0xf4>
    17b4:	84 27       	eor	r24, r20
    17b6:	8c 93       	st	X, r24
			break;
		}

		Local_enuerrorState = ES_OK;
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	89 83       	std	Y+1, r24	; 0x01
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <DIO_enuToggelPin+0x10a>

	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
    17be:	83 e0       	ldi	r24, 0x03	; 3
    17c0:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuerrorState  ;
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuToggelPin().
    17c4:	0f 90       	pop	r0
    17c6:	0f 90       	pop	r0
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	cf 91       	pop	r28
    17d0:	df 91       	pop	r29
    17d2:	08 95       	ret

000017d4 <DIO_enuGetPinVlaue>:
/*                 : Arg.3: Address of u8 variable.                              */
/*                                                                               */
/* Return          : ERROR_STATE eum.                                            */
/*********************************************************************************/
ES_t DIO_enuGetPinVlaue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8* Copy_pu8PinVal)
{
    17d4:	df 93       	push	r29
    17d6:	cf 93       	push	r28
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
    17dc:	27 97       	sbiw	r28, 0x07	; 7
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	f8 94       	cli
    17e2:	de bf       	out	0x3e, r29	; 62
    17e4:	0f be       	out	0x3f, r0	; 63
    17e6:	cd bf       	out	0x3d, r28	; 61
    17e8:	8a 83       	std	Y+2, r24	; 0x02
    17ea:	6b 83       	std	Y+3, r22	; 0x03
    17ec:	5d 83       	std	Y+5, r21	; 0x05
    17ee:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuerrorState = ES_NOK ;
    17f0:	19 82       	std	Y+1, r1	; 0x01

	// Check to ensure that the passed address is not equal Null.
	if( Copy_pu8PinVal != NULL )
    17f2:	8c 81       	ldd	r24, Y+4	; 0x04
    17f4:	9d 81       	ldd	r25, Y+5	; 0x05
    17f6:	00 97       	sbiw	r24, 0x00	; 0
    17f8:	09 f4       	brne	.+2      	; 0x17fc <DIO_enuGetPinVlaue+0x28>
    17fa:	7e c0       	rjmp	.+252    	; 0x18f8 <DIO_enuGetPinVlaue+0x124>
	{
		if( (Copy_u8PortID <= DIO_PORTD) &&  (Copy_u8PinID <= DIO_PIN7) )
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	84 30       	cpi	r24, 0x04	; 4
    1800:	08 f0       	brcs	.+2      	; 0x1804 <DIO_enuGetPinVlaue+0x30>
    1802:	77 c0       	rjmp	.+238    	; 0x18f2 <DIO_enuGetPinVlaue+0x11e>
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	88 30       	cpi	r24, 0x08	; 8
    1808:	08 f0       	brcs	.+2      	; 0x180c <DIO_enuGetPinVlaue+0x38>
    180a:	73 c0       	rjmp	.+230    	; 0x18f2 <DIO_enuGetPinVlaue+0x11e>
		{
			/**********************************************************
			 * Switching for the suitable case .
			 **********************************************************/
			switch( Copy_u8PortID )
    180c:	8a 81       	ldd	r24, Y+2	; 0x02
    180e:	28 2f       	mov	r18, r24
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	3f 83       	std	Y+7, r19	; 0x07
    1814:	2e 83       	std	Y+6, r18	; 0x06
    1816:	4e 81       	ldd	r20, Y+6	; 0x06
    1818:	5f 81       	ldd	r21, Y+7	; 0x07
    181a:	41 30       	cpi	r20, 0x01	; 1
    181c:	51 05       	cpc	r21, r1
    181e:	59 f1       	breq	.+86     	; 0x1876 <DIO_enuGetPinVlaue+0xa2>
    1820:	8e 81       	ldd	r24, Y+6	; 0x06
    1822:	9f 81       	ldd	r25, Y+7	; 0x07
    1824:	82 30       	cpi	r24, 0x02	; 2
    1826:	91 05       	cpc	r25, r1
    1828:	34 f4       	brge	.+12     	; 0x1836 <DIO_enuGetPinVlaue+0x62>
    182a:	2e 81       	ldd	r18, Y+6	; 0x06
    182c:	3f 81       	ldd	r19, Y+7	; 0x07
    182e:	21 15       	cp	r18, r1
    1830:	31 05       	cpc	r19, r1
    1832:	69 f0       	breq	.+26     	; 0x184e <DIO_enuGetPinVlaue+0x7a>
    1834:	5b c0       	rjmp	.+182    	; 0x18ec <DIO_enuGetPinVlaue+0x118>
    1836:	4e 81       	ldd	r20, Y+6	; 0x06
    1838:	5f 81       	ldd	r21, Y+7	; 0x07
    183a:	42 30       	cpi	r20, 0x02	; 2
    183c:	51 05       	cpc	r21, r1
    183e:	79 f1       	breq	.+94     	; 0x189e <DIO_enuGetPinVlaue+0xca>
    1840:	8e 81       	ldd	r24, Y+6	; 0x06
    1842:	9f 81       	ldd	r25, Y+7	; 0x07
    1844:	83 30       	cpi	r24, 0x03	; 3
    1846:	91 05       	cpc	r25, r1
    1848:	09 f4       	brne	.+2      	; 0x184c <DIO_enuGetPinVlaue+0x78>
    184a:	3d c0       	rjmp	.+122    	; 0x18c6 <DIO_enuGetPinVlaue+0xf2>
    184c:	4f c0       	rjmp	.+158    	; 0x18ec <DIO_enuGetPinVlaue+0x118>
			{
			case DIO_PORTA :
				*Copy_pu8PinVal = (PINA>>Copy_u8PinID)&DIO_MASK_BIT;
    184e:	e9 e3       	ldi	r30, 0x39	; 57
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	28 2f       	mov	r18, r24
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	8b 81       	ldd	r24, Y+3	; 0x03
    185a:	88 2f       	mov	r24, r24
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	a9 01       	movw	r20, r18
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <DIO_enuGetPinVlaue+0x92>
    1862:	55 95       	asr	r21
    1864:	47 95       	ror	r20
    1866:	8a 95       	dec	r24
    1868:	e2 f7       	brpl	.-8      	; 0x1862 <DIO_enuGetPinVlaue+0x8e>
    186a:	ca 01       	movw	r24, r20
    186c:	81 70       	andi	r24, 0x01	; 1
    186e:	ec 81       	ldd	r30, Y+4	; 0x04
    1870:	fd 81       	ldd	r31, Y+5	; 0x05
    1872:	80 83       	st	Z, r24
    1874:	3b c0       	rjmp	.+118    	; 0x18ec <DIO_enuGetPinVlaue+0x118>
				break;

			case DIO_PORTB :
				*Copy_pu8PinVal = (PINB>>Copy_u8PinID)&DIO_MASK_BIT;
    1876:	e6 e3       	ldi	r30, 0x36	; 54
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	28 2f       	mov	r18, r24
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	8b 81       	ldd	r24, Y+3	; 0x03
    1882:	88 2f       	mov	r24, r24
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	a9 01       	movw	r20, r18
    1888:	02 c0       	rjmp	.+4      	; 0x188e <DIO_enuGetPinVlaue+0xba>
    188a:	55 95       	asr	r21
    188c:	47 95       	ror	r20
    188e:	8a 95       	dec	r24
    1890:	e2 f7       	brpl	.-8      	; 0x188a <DIO_enuGetPinVlaue+0xb6>
    1892:	ca 01       	movw	r24, r20
    1894:	81 70       	andi	r24, 0x01	; 1
    1896:	ec 81       	ldd	r30, Y+4	; 0x04
    1898:	fd 81       	ldd	r31, Y+5	; 0x05
    189a:	80 83       	st	Z, r24
    189c:	27 c0       	rjmp	.+78     	; 0x18ec <DIO_enuGetPinVlaue+0x118>
				break;

			case DIO_PORTC :
				*Copy_pu8PinVal = (PINC>>Copy_u8PinID)&DIO_MASK_BIT;
    189e:	e3 e3       	ldi	r30, 0x33	; 51
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	28 2f       	mov	r18, r24
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	8b 81       	ldd	r24, Y+3	; 0x03
    18aa:	88 2f       	mov	r24, r24
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	a9 01       	movw	r20, r18
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <DIO_enuGetPinVlaue+0xe2>
    18b2:	55 95       	asr	r21
    18b4:	47 95       	ror	r20
    18b6:	8a 95       	dec	r24
    18b8:	e2 f7       	brpl	.-8      	; 0x18b2 <DIO_enuGetPinVlaue+0xde>
    18ba:	ca 01       	movw	r24, r20
    18bc:	81 70       	andi	r24, 0x01	; 1
    18be:	ec 81       	ldd	r30, Y+4	; 0x04
    18c0:	fd 81       	ldd	r31, Y+5	; 0x05
    18c2:	80 83       	st	Z, r24
    18c4:	13 c0       	rjmp	.+38     	; 0x18ec <DIO_enuGetPinVlaue+0x118>
				break;

			case DIO_PORTD :
				*Copy_pu8PinVal = (PIND>>Copy_u8PinID)&DIO_MASK_BIT;
    18c6:	e0 e3       	ldi	r30, 0x30	; 48
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	8b 81       	ldd	r24, Y+3	; 0x03
    18d2:	88 2f       	mov	r24, r24
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	a9 01       	movw	r20, r18
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <DIO_enuGetPinVlaue+0x10a>
    18da:	55 95       	asr	r21
    18dc:	47 95       	ror	r20
    18de:	8a 95       	dec	r24
    18e0:	e2 f7       	brpl	.-8      	; 0x18da <DIO_enuGetPinVlaue+0x106>
    18e2:	ca 01       	movw	r24, r20
    18e4:	81 70       	andi	r24, 0x01	; 1
    18e6:	ec 81       	ldd	r30, Y+4	; 0x04
    18e8:	fd 81       	ldd	r31, Y+5	; 0x05
    18ea:	80 83       	st	Z, r24
				break;
			}

			Local_enuerrorState = ES_OK;
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	89 83       	std	Y+1, r24	; 0x01
    18f0:	05 c0       	rjmp	.+10     	; 0x18fc <DIO_enuGetPinVlaue+0x128>

		}
		else
		{
			Local_enuerrorState = ES_OUT_OF_RANGE;
    18f2:	83 e0       	ldi	r24, 0x03	; 3
    18f4:	89 83       	std	Y+1, r24	; 0x01
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <DIO_enuGetPinVlaue+0x128>
	else
	{
		/**********************************************************
		 * Handle null pointer case.
		 **********************************************************/
		Local_enuerrorState = ES_NULL_POINTER;
    18f8:	82 e0       	ldi	r24, 0x02	; 2
    18fa:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_enuerrorState  ;
    18fc:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuGetPinVlaue().
    18fe:	27 96       	adiw	r28, 0x07	; 7
    1900:	0f b6       	in	r0, 0x3f	; 63
    1902:	f8 94       	cli
    1904:	de bf       	out	0x3e, r29	; 62
    1906:	0f be       	out	0x3f, r0	; 63
    1908:	cd bf       	out	0x3d, r28	; 61
    190a:	cf 91       	pop	r28
    190c:	df 91       	pop	r29
    190e:	08 95       	ret

00001910 <EF_S8_DIO_InitPort>:
*               or return 1 if OK.  
* Note        : To configure PIN as output you should set the bit mask "1" 
*               and to set PIN input you should set bit mask "0"
***********************************************************************/
s8  EF_S8_DIO_InitPort (u8 PortName, u8 Value)
{
    1910:	df 93       	push	r29
    1912:	cf 93       	push	r28
    1914:	00 d0       	rcall	.+0      	; 0x1916 <EF_S8_DIO_InitPort+0x6>
    1916:	00 d0       	rcall	.+0      	; 0x1918 <EF_S8_DIO_InitPort+0x8>
    1918:	0f 92       	push	r0
    191a:	cd b7       	in	r28, 0x3d	; 61
    191c:	de b7       	in	r29, 0x3e	; 62
    191e:	8a 83       	std	Y+2, r24	; 0x02
    1920:	6b 83       	std	Y+3, r22	; 0x03
    s8 Status;
    
    Status = 1;
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	89 83       	std	Y+1, r24	; 0x01
	switch(PortName)
    1926:	8a 81       	ldd	r24, Y+2	; 0x02
    1928:	28 2f       	mov	r18, r24
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	3d 83       	std	Y+5, r19	; 0x05
    192e:	2c 83       	std	Y+4, r18	; 0x04
    1930:	8c 81       	ldd	r24, Y+4	; 0x04
    1932:	9d 81       	ldd	r25, Y+5	; 0x05
    1934:	84 34       	cpi	r24, 0x44	; 68
    1936:	91 05       	cpc	r25, r1
    1938:	09 f4       	brne	.+2      	; 0x193c <EF_S8_DIO_InitPort+0x2c>
    193a:	3f c0       	rjmp	.+126    	; 0x19ba <EF_S8_DIO_InitPort+0xaa>
    193c:	2c 81       	ldd	r18, Y+4	; 0x04
    193e:	3d 81       	ldd	r19, Y+5	; 0x05
    1940:	25 34       	cpi	r18, 0x45	; 69
    1942:	31 05       	cpc	r19, r1
    1944:	84 f4       	brge	.+32     	; 0x1966 <EF_S8_DIO_InitPort+0x56>
    1946:	8c 81       	ldd	r24, Y+4	; 0x04
    1948:	9d 81       	ldd	r25, Y+5	; 0x05
    194a:	82 34       	cpi	r24, 0x42	; 66
    194c:	91 05       	cpc	r25, r1
    194e:	59 f1       	breq	.+86     	; 0x19a6 <EF_S8_DIO_InitPort+0x96>
    1950:	2c 81       	ldd	r18, Y+4	; 0x04
    1952:	3d 81       	ldd	r19, Y+5	; 0x05
    1954:	23 34       	cpi	r18, 0x43	; 67
    1956:	31 05       	cpc	r19, r1
    1958:	5c f5       	brge	.+86     	; 0x19b0 <EF_S8_DIO_InitPort+0xa0>
    195a:	8c 81       	ldd	r24, Y+4	; 0x04
    195c:	9d 81       	ldd	r25, Y+5	; 0x05
    195e:	81 34       	cpi	r24, 0x41	; 65
    1960:	91 05       	cpc	r25, r1
    1962:	e1 f0       	breq	.+56     	; 0x199c <EF_S8_DIO_InitPort+0x8c>
    1964:	2f c0       	rjmp	.+94     	; 0x19c4 <EF_S8_DIO_InitPort+0xb4>
    1966:	2c 81       	ldd	r18, Y+4	; 0x04
    1968:	3d 81       	ldd	r19, Y+5	; 0x05
    196a:	22 36       	cpi	r18, 0x62	; 98
    196c:	31 05       	cpc	r19, r1
    196e:	d9 f0       	breq	.+54     	; 0x19a6 <EF_S8_DIO_InitPort+0x96>
    1970:	8c 81       	ldd	r24, Y+4	; 0x04
    1972:	9d 81       	ldd	r25, Y+5	; 0x05
    1974:	83 36       	cpi	r24, 0x63	; 99
    1976:	91 05       	cpc	r25, r1
    1978:	34 f4       	brge	.+12     	; 0x1986 <EF_S8_DIO_InitPort+0x76>
    197a:	2c 81       	ldd	r18, Y+4	; 0x04
    197c:	3d 81       	ldd	r19, Y+5	; 0x05
    197e:	21 36       	cpi	r18, 0x61	; 97
    1980:	31 05       	cpc	r19, r1
    1982:	61 f0       	breq	.+24     	; 0x199c <EF_S8_DIO_InitPort+0x8c>
    1984:	1f c0       	rjmp	.+62     	; 0x19c4 <EF_S8_DIO_InitPort+0xb4>
    1986:	8c 81       	ldd	r24, Y+4	; 0x04
    1988:	9d 81       	ldd	r25, Y+5	; 0x05
    198a:	83 36       	cpi	r24, 0x63	; 99
    198c:	91 05       	cpc	r25, r1
    198e:	81 f0       	breq	.+32     	; 0x19b0 <EF_S8_DIO_InitPort+0xa0>
    1990:	2c 81       	ldd	r18, Y+4	; 0x04
    1992:	3d 81       	ldd	r19, Y+5	; 0x05
    1994:	24 36       	cpi	r18, 0x64	; 100
    1996:	31 05       	cpc	r19, r1
    1998:	81 f0       	breq	.+32     	; 0x19ba <EF_S8_DIO_InitPort+0xaa>
    199a:	14 c0       	rjmp	.+40     	; 0x19c4 <EF_S8_DIO_InitPort+0xb4>
	{
	     case 'a':
		 case 'A':
             DDRA = Value;
    199c:	ea e3       	ldi	r30, 0x3A	; 58
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	8b 81       	ldd	r24, Y+3	; 0x03
    19a2:	80 83       	st	Z, r24
    19a4:	11 c0       	rjmp	.+34     	; 0x19c8 <EF_S8_DIO_InitPort+0xb8>
		 break;
		 case 'b':
		 case 'B':
             DDRB = Value;
    19a6:	e7 e3       	ldi	r30, 0x37	; 55
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	80 83       	st	Z, r24
    19ae:	0c c0       	rjmp	.+24     	; 0x19c8 <EF_S8_DIO_InitPort+0xb8>
		 break;
		 case 'c':
		 case 'C':
             DDRC = Value;
    19b0:	e4 e3       	ldi	r30, 0x34	; 52
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	80 83       	st	Z, r24
    19b8:	07 c0       	rjmp	.+14     	; 0x19c8 <EF_S8_DIO_InitPort+0xb8>
		 break;
		 case 'd':
		 case 'D':
             DDRD = Value;
    19ba:	e1 e3       	ldi	r30, 0x31	; 49
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	8b 81       	ldd	r24, Y+3	; 0x03
    19c0:	80 83       	st	Z, r24
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <EF_S8_DIO_InitPort+0xb8>
		 break;
		 default:
             Status = -1;
    19c4:	8f ef       	ldi	r24, 0xFF	; 255
    19c6:	89 83       	std	Y+1, r24	; 0x01

    }

    return(Status);
    19c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	0f 90       	pop	r0
    19d0:	0f 90       	pop	r0
    19d2:	0f 90       	pop	r0
    19d4:	cf 91       	pop	r28
    19d6:	df 91       	pop	r29
    19d8:	08 95       	ret

000019da <EF_S8_DIO_WritePort>:
*
* Return Value: The function will return -1 if user enter wrong inputs.
*               or return 1 if OK.  
***********************************************************************/
s8  EF_S8_DIO_WritePort(u8 PortName, u8 Value)
{
    19da:	df 93       	push	r29
    19dc:	cf 93       	push	r28
    19de:	00 d0       	rcall	.+0      	; 0x19e0 <EF_S8_DIO_WritePort+0x6>
    19e0:	00 d0       	rcall	.+0      	; 0x19e2 <EF_S8_DIO_WritePort+0x8>
    19e2:	0f 92       	push	r0
    19e4:	cd b7       	in	r28, 0x3d	; 61
    19e6:	de b7       	in	r29, 0x3e	; 62
    19e8:	8a 83       	std	Y+2, r24	; 0x02
    19ea:	6b 83       	std	Y+3, r22	; 0x03
    s8 Status;
    
    Status = 1;
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	89 83       	std	Y+1, r24	; 0x01
	switch(PortName)
    19f0:	8a 81       	ldd	r24, Y+2	; 0x02
    19f2:	28 2f       	mov	r18, r24
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	3d 83       	std	Y+5, r19	; 0x05
    19f8:	2c 83       	std	Y+4, r18	; 0x04
    19fa:	8c 81       	ldd	r24, Y+4	; 0x04
    19fc:	9d 81       	ldd	r25, Y+5	; 0x05
    19fe:	84 34       	cpi	r24, 0x44	; 68
    1a00:	91 05       	cpc	r25, r1
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <EF_S8_DIO_WritePort+0x2c>
    1a04:	3f c0       	rjmp	.+126    	; 0x1a84 <EF_S8_DIO_WritePort+0xaa>
    1a06:	2c 81       	ldd	r18, Y+4	; 0x04
    1a08:	3d 81       	ldd	r19, Y+5	; 0x05
    1a0a:	25 34       	cpi	r18, 0x45	; 69
    1a0c:	31 05       	cpc	r19, r1
    1a0e:	84 f4       	brge	.+32     	; 0x1a30 <EF_S8_DIO_WritePort+0x56>
    1a10:	8c 81       	ldd	r24, Y+4	; 0x04
    1a12:	9d 81       	ldd	r25, Y+5	; 0x05
    1a14:	82 34       	cpi	r24, 0x42	; 66
    1a16:	91 05       	cpc	r25, r1
    1a18:	59 f1       	breq	.+86     	; 0x1a70 <EF_S8_DIO_WritePort+0x96>
    1a1a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a1c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a1e:	23 34       	cpi	r18, 0x43	; 67
    1a20:	31 05       	cpc	r19, r1
    1a22:	5c f5       	brge	.+86     	; 0x1a7a <EF_S8_DIO_WritePort+0xa0>
    1a24:	8c 81       	ldd	r24, Y+4	; 0x04
    1a26:	9d 81       	ldd	r25, Y+5	; 0x05
    1a28:	81 34       	cpi	r24, 0x41	; 65
    1a2a:	91 05       	cpc	r25, r1
    1a2c:	e1 f0       	breq	.+56     	; 0x1a66 <EF_S8_DIO_WritePort+0x8c>
    1a2e:	2f c0       	rjmp	.+94     	; 0x1a8e <EF_S8_DIO_WritePort+0xb4>
    1a30:	2c 81       	ldd	r18, Y+4	; 0x04
    1a32:	3d 81       	ldd	r19, Y+5	; 0x05
    1a34:	22 36       	cpi	r18, 0x62	; 98
    1a36:	31 05       	cpc	r19, r1
    1a38:	d9 f0       	breq	.+54     	; 0x1a70 <EF_S8_DIO_WritePort+0x96>
    1a3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a3e:	83 36       	cpi	r24, 0x63	; 99
    1a40:	91 05       	cpc	r25, r1
    1a42:	34 f4       	brge	.+12     	; 0x1a50 <EF_S8_DIO_WritePort+0x76>
    1a44:	2c 81       	ldd	r18, Y+4	; 0x04
    1a46:	3d 81       	ldd	r19, Y+5	; 0x05
    1a48:	21 36       	cpi	r18, 0x61	; 97
    1a4a:	31 05       	cpc	r19, r1
    1a4c:	61 f0       	breq	.+24     	; 0x1a66 <EF_S8_DIO_WritePort+0x8c>
    1a4e:	1f c0       	rjmp	.+62     	; 0x1a8e <EF_S8_DIO_WritePort+0xb4>
    1a50:	8c 81       	ldd	r24, Y+4	; 0x04
    1a52:	9d 81       	ldd	r25, Y+5	; 0x05
    1a54:	83 36       	cpi	r24, 0x63	; 99
    1a56:	91 05       	cpc	r25, r1
    1a58:	81 f0       	breq	.+32     	; 0x1a7a <EF_S8_DIO_WritePort+0xa0>
    1a5a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a5c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a5e:	24 36       	cpi	r18, 0x64	; 100
    1a60:	31 05       	cpc	r19, r1
    1a62:	81 f0       	breq	.+32     	; 0x1a84 <EF_S8_DIO_WritePort+0xaa>
    1a64:	14 c0       	rjmp	.+40     	; 0x1a8e <EF_S8_DIO_WritePort+0xb4>
	{
	     case 'a':
		 case 'A':
             PORTA = Value;
    1a66:	eb e3       	ldi	r30, 0x3B	; 59
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6c:	80 83       	st	Z, r24
    1a6e:	11 c0       	rjmp	.+34     	; 0x1a92 <EF_S8_DIO_WritePort+0xb8>
		 break;
		 case 'b':
		 case 'B':
             PORTB = Value;
    1a70:	e8 e3       	ldi	r30, 0x38	; 56
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	80 83       	st	Z, r24
    1a78:	0c c0       	rjmp	.+24     	; 0x1a92 <EF_S8_DIO_WritePort+0xb8>
		 break;
		 case 'c':
		 case 'C':
             PORTC = Value;
    1a7a:	e5 e3       	ldi	r30, 0x35	; 53
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a80:	80 83       	st	Z, r24
    1a82:	07 c0       	rjmp	.+14     	; 0x1a92 <EF_S8_DIO_WritePort+0xb8>
		 break;
		 case 'd':
		 case 'D':
             PORTD = Value;
    1a84:	e2 e3       	ldi	r30, 0x32	; 50
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8a:	80 83       	st	Z, r24
    1a8c:	02 c0       	rjmp	.+4      	; 0x1a92 <EF_S8_DIO_WritePort+0xb8>
		 break;
		 default:
             Status = -1;
    1a8e:	8f ef       	ldi	r24, 0xFF	; 255
    1a90:	89 83       	std	Y+1, r24	; 0x01
    }

    return(Status);
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a94:	0f 90       	pop	r0
    1a96:	0f 90       	pop	r0
    1a98:	0f 90       	pop	r0
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	cf 91       	pop	r28
    1aa0:	df 91       	pop	r29
    1aa2:	08 95       	ret

00001aa4 <EF_S16_DIO_ReadPort>:
*
* Return Value: The function will return -1 if user enter wrong inputs.
*               or the value.
***********************************************************************/
s32 EF_S16_DIO_ReadPort (u8 PortName)
{
    1aa4:	df 93       	push	r29
    1aa6:	cf 93       	push	r28
    1aa8:	00 d0       	rcall	.+0      	; 0x1aaa <EF_S16_DIO_ReadPort+0x6>
    1aaa:	00 d0       	rcall	.+0      	; 0x1aac <EF_S16_DIO_ReadPort+0x8>
    1aac:	cd b7       	in	r28, 0x3d	; 61
    1aae:	de b7       	in	r29, 0x3e	; 62
    1ab0:	8a 83       	std	Y+2, r24	; 0x02
    volatile s8  Status;

    switch(PortName)
    1ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab4:	28 2f       	mov	r18, r24
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	3c 83       	std	Y+4, r19	; 0x04
    1aba:	2b 83       	std	Y+3, r18	; 0x03
    1abc:	8b 81       	ldd	r24, Y+3	; 0x03
    1abe:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac0:	84 34       	cpi	r24, 0x44	; 68
    1ac2:	91 05       	cpc	r25, r1
    1ac4:	09 f4       	brne	.+2      	; 0x1ac8 <EF_S16_DIO_ReadPort+0x24>
    1ac6:	3f c0       	rjmp	.+126    	; 0x1b46 <EF_S16_DIO_ReadPort+0xa2>
    1ac8:	2b 81       	ldd	r18, Y+3	; 0x03
    1aca:	3c 81       	ldd	r19, Y+4	; 0x04
    1acc:	25 34       	cpi	r18, 0x45	; 69
    1ace:	31 05       	cpc	r19, r1
    1ad0:	84 f4       	brge	.+32     	; 0x1af2 <EF_S16_DIO_ReadPort+0x4e>
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad6:	82 34       	cpi	r24, 0x42	; 66
    1ad8:	91 05       	cpc	r25, r1
    1ada:	59 f1       	breq	.+86     	; 0x1b32 <EF_S16_DIO_ReadPort+0x8e>
    1adc:	2b 81       	ldd	r18, Y+3	; 0x03
    1ade:	3c 81       	ldd	r19, Y+4	; 0x04
    1ae0:	23 34       	cpi	r18, 0x43	; 67
    1ae2:	31 05       	cpc	r19, r1
    1ae4:	5c f5       	brge	.+86     	; 0x1b3c <EF_S16_DIO_ReadPort+0x98>
    1ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aea:	81 34       	cpi	r24, 0x41	; 65
    1aec:	91 05       	cpc	r25, r1
    1aee:	e1 f0       	breq	.+56     	; 0x1b28 <EF_S16_DIO_ReadPort+0x84>
    1af0:	2f c0       	rjmp	.+94     	; 0x1b50 <EF_S16_DIO_ReadPort+0xac>
    1af2:	2b 81       	ldd	r18, Y+3	; 0x03
    1af4:	3c 81       	ldd	r19, Y+4	; 0x04
    1af6:	22 36       	cpi	r18, 0x62	; 98
    1af8:	31 05       	cpc	r19, r1
    1afa:	d9 f0       	breq	.+54     	; 0x1b32 <EF_S16_DIO_ReadPort+0x8e>
    1afc:	8b 81       	ldd	r24, Y+3	; 0x03
    1afe:	9c 81       	ldd	r25, Y+4	; 0x04
    1b00:	83 36       	cpi	r24, 0x63	; 99
    1b02:	91 05       	cpc	r25, r1
    1b04:	34 f4       	brge	.+12     	; 0x1b12 <EF_S16_DIO_ReadPort+0x6e>
    1b06:	2b 81       	ldd	r18, Y+3	; 0x03
    1b08:	3c 81       	ldd	r19, Y+4	; 0x04
    1b0a:	21 36       	cpi	r18, 0x61	; 97
    1b0c:	31 05       	cpc	r19, r1
    1b0e:	61 f0       	breq	.+24     	; 0x1b28 <EF_S16_DIO_ReadPort+0x84>
    1b10:	1f c0       	rjmp	.+62     	; 0x1b50 <EF_S16_DIO_ReadPort+0xac>
    1b12:	8b 81       	ldd	r24, Y+3	; 0x03
    1b14:	9c 81       	ldd	r25, Y+4	; 0x04
    1b16:	83 36       	cpi	r24, 0x63	; 99
    1b18:	91 05       	cpc	r25, r1
    1b1a:	81 f0       	breq	.+32     	; 0x1b3c <EF_S16_DIO_ReadPort+0x98>
    1b1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b1e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b20:	24 36       	cpi	r18, 0x64	; 100
    1b22:	31 05       	cpc	r19, r1
    1b24:	81 f0       	breq	.+32     	; 0x1b46 <EF_S16_DIO_ReadPort+0xa2>
    1b26:	14 c0       	rjmp	.+40     	; 0x1b50 <EF_S16_DIO_ReadPort+0xac>
	{
	     case 'a':
		 case 'A':
             Status = PINA;
    1b28:	e9 e3       	ldi	r30, 0x39	; 57
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	89 83       	std	Y+1, r24	; 0x01
    1b30:	11 c0       	rjmp	.+34     	; 0x1b54 <EF_S16_DIO_ReadPort+0xb0>
		 break;
		 case 'b':
		 case 'B':
             Status = PINB;
    1b32:	e6 e3       	ldi	r30, 0x36	; 54
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	89 83       	std	Y+1, r24	; 0x01
    1b3a:	0c c0       	rjmp	.+24     	; 0x1b54 <EF_S16_DIO_ReadPort+0xb0>
		 break;
		 case 'c':
		 case 'C':
             Status = PINC;
    1b3c:	e3 e3       	ldi	r30, 0x33	; 51
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	80 81       	ld	r24, Z
    1b42:	89 83       	std	Y+1, r24	; 0x01
    1b44:	07 c0       	rjmp	.+14     	; 0x1b54 <EF_S16_DIO_ReadPort+0xb0>
		 break;
		 case 'd':
		 case 'D':
             Status = PIND;
    1b46:	e0 e3       	ldi	r30, 0x30	; 48
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	80 81       	ld	r24, Z
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    1b4e:	02 c0       	rjmp	.+4      	; 0x1b54 <EF_S16_DIO_ReadPort+0xb0>
		 break;
		 default:
             Status = -1;
    1b50:	8f ef       	ldi	r24, 0xFF	; 255
    1b52:	89 83       	std	Y+1, r24	; 0x01
    }
    return(Status);
    1b54:	89 81       	ldd	r24, Y+1	; 0x01
    1b56:	99 27       	eor	r25, r25
    1b58:	87 fd       	sbrc	r24, 7
    1b5a:	90 95       	com	r25
}
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	0f 90       	pop	r0
    1b64:	cf 91       	pop	r28
    1b66:	df 91       	pop	r29
    1b68:	08 95       	ret

00001b6a <EF_B_DIO_InitPin>:
* Return Value: The function will return -1 if user enter wrong inputs.
*               or return 1 if OK.
* Note        : Nothing
***********************************************************************/
u8  EF_B_DIO_InitPin (u8 PortName, u8 PinNumber,u8 Direction)
{
    1b6a:	df 93       	push	r29
    1b6c:	cf 93       	push	r28
    1b6e:	cd b7       	in	r28, 0x3d	; 61
    1b70:	de b7       	in	r29, 0x3e	; 62
    1b72:	2e 97       	sbiw	r28, 0x0e	; 14
    1b74:	0f b6       	in	r0, 0x3f	; 63
    1b76:	f8 94       	cli
    1b78:	de bf       	out	0x3e, r29	; 62
    1b7a:	0f be       	out	0x3f, r0	; 63
    1b7c:	cd bf       	out	0x3d, r28	; 61
    1b7e:	8a 83       	std	Y+2, r24	; 0x02
    1b80:	6b 83       	std	Y+3, r22	; 0x03
    1b82:	4c 83       	std	Y+4, r20	; 0x04
    u8 bStatus;


    bStatus = 1;
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	89 83       	std	Y+1, r24	; 0x01
	switch(PortName)
    1b88:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8a:	28 2f       	mov	r18, r24
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	3e 87       	std	Y+14, r19	; 0x0e
    1b90:	2d 87       	std	Y+13, r18	; 0x0d
    1b92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b96:	84 34       	cpi	r24, 0x44	; 68
    1b98:	91 05       	cpc	r25, r1
    1b9a:	09 f4       	brne	.+2      	; 0x1b9e <EF_B_DIO_InitPin+0x34>
    1b9c:	dd c0       	rjmp	.+442    	; 0x1d58 <EF_B_DIO_InitPin+0x1ee>
    1b9e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1ba0:	3e 85       	ldd	r19, Y+14	; 0x0e
    1ba2:	25 34       	cpi	r18, 0x45	; 69
    1ba4:	31 05       	cpc	r19, r1
    1ba6:	94 f4       	brge	.+36     	; 0x1bcc <EF_B_DIO_InitPin+0x62>
    1ba8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1baa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bac:	82 34       	cpi	r24, 0x42	; 66
    1bae:	91 05       	cpc	r25, r1
    1bb0:	09 f4       	brne	.+2      	; 0x1bb4 <EF_B_DIO_InitPin+0x4a>
    1bb2:	62 c0       	rjmp	.+196    	; 0x1c78 <EF_B_DIO_InitPin+0x10e>
    1bb4:	2d 85       	ldd	r18, Y+13	; 0x0d
    1bb6:	3e 85       	ldd	r19, Y+14	; 0x0e
    1bb8:	23 34       	cpi	r18, 0x43	; 67
    1bba:	31 05       	cpc	r19, r1
    1bbc:	0c f0       	brlt	.+2      	; 0x1bc0 <EF_B_DIO_InitPin+0x56>
    1bbe:	94 c0       	rjmp	.+296    	; 0x1ce8 <EF_B_DIO_InitPin+0x17e>
    1bc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bc4:	81 34       	cpi	r24, 0x41	; 65
    1bc6:	91 05       	cpc	r25, r1
    1bc8:	f9 f0       	breq	.+62     	; 0x1c08 <EF_B_DIO_InitPin+0x9e>
    1bca:	fe c0       	rjmp	.+508    	; 0x1dc8 <EF_B_DIO_InitPin+0x25e>
    1bcc:	2d 85       	ldd	r18, Y+13	; 0x0d
    1bce:	3e 85       	ldd	r19, Y+14	; 0x0e
    1bd0:	22 36       	cpi	r18, 0x62	; 98
    1bd2:	31 05       	cpc	r19, r1
    1bd4:	09 f4       	brne	.+2      	; 0x1bd8 <EF_B_DIO_InitPin+0x6e>
    1bd6:	50 c0       	rjmp	.+160    	; 0x1c78 <EF_B_DIO_InitPin+0x10e>
    1bd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bda:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bdc:	83 36       	cpi	r24, 0x63	; 99
    1bde:	91 05       	cpc	r25, r1
    1be0:	34 f4       	brge	.+12     	; 0x1bee <EF_B_DIO_InitPin+0x84>
    1be2:	2d 85       	ldd	r18, Y+13	; 0x0d
    1be4:	3e 85       	ldd	r19, Y+14	; 0x0e
    1be6:	21 36       	cpi	r18, 0x61	; 97
    1be8:	31 05       	cpc	r19, r1
    1bea:	71 f0       	breq	.+28     	; 0x1c08 <EF_B_DIO_InitPin+0x9e>
    1bec:	ed c0       	rjmp	.+474    	; 0x1dc8 <EF_B_DIO_InitPin+0x25e>
    1bee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf2:	83 36       	cpi	r24, 0x63	; 99
    1bf4:	91 05       	cpc	r25, r1
    1bf6:	09 f4       	brne	.+2      	; 0x1bfa <EF_B_DIO_InitPin+0x90>
    1bf8:	77 c0       	rjmp	.+238    	; 0x1ce8 <EF_B_DIO_InitPin+0x17e>
    1bfa:	2d 85       	ldd	r18, Y+13	; 0x0d
    1bfc:	3e 85       	ldd	r19, Y+14	; 0x0e
    1bfe:	24 36       	cpi	r18, 0x64	; 100
    1c00:	31 05       	cpc	r19, r1
    1c02:	09 f4       	brne	.+2      	; 0x1c06 <EF_B_DIO_InitPin+0x9c>
    1c04:	a9 c0       	rjmp	.+338    	; 0x1d58 <EF_B_DIO_InitPin+0x1ee>
    1c06:	e0 c0       	rjmp	.+448    	; 0x1dc8 <EF_B_DIO_InitPin+0x25e>
	{
	     case 'a':
		 case 'A':
			  switch(Direction)
    1c08:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0a:	28 2f       	mov	r18, r24
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	3c 87       	std	Y+12, r19	; 0x0c
    1c10:	2b 87       	std	Y+11, r18	; 0x0b
    1c12:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c14:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c16:	00 97       	sbiw	r24, 0x00	; 0
    1c18:	31 f0       	breq	.+12     	; 0x1c26 <EF_B_DIO_InitPin+0xbc>
    1c1a:	2b 85       	ldd	r18, Y+11	; 0x0b
    1c1c:	3c 85       	ldd	r19, Y+12	; 0x0c
    1c1e:	21 30       	cpi	r18, 0x01	; 1
    1c20:	31 05       	cpc	r19, r1
    1c22:	b1 f0       	breq	.+44     	; 0x1c50 <EF_B_DIO_InitPin+0xe6>
    1c24:	d3 c0       	rjmp	.+422    	; 0x1dcc <EF_B_DIO_InitPin+0x262>
			  {
			      case INPUT:
			     	   DDRA &= ~(1 << PinNumber);
    1c26:	aa e3       	ldi	r26, 0x3A	; 58
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	ea e3       	ldi	r30, 0x3A	; 58
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	48 2f       	mov	r20, r24
    1c32:	8b 81       	ldd	r24, Y+3	; 0x03
    1c34:	28 2f       	mov	r18, r24
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	02 2e       	mov	r0, r18
    1c3e:	02 c0       	rjmp	.+4      	; 0x1c44 <EF_B_DIO_InitPin+0xda>
    1c40:	88 0f       	add	r24, r24
    1c42:	99 1f       	adc	r25, r25
    1c44:	0a 94       	dec	r0
    1c46:	e2 f7       	brpl	.-8      	; 0x1c40 <EF_B_DIO_InitPin+0xd6>
    1c48:	80 95       	com	r24
    1c4a:	84 23       	and	r24, r20
    1c4c:	8c 93       	st	X, r24
    1c4e:	be c0       	rjmp	.+380    	; 0x1dcc <EF_B_DIO_InitPin+0x262>
			    	   break;
			      case OUTPUT:
			    	   DDRA |=  (1 << PinNumber);
    1c50:	aa e3       	ldi	r26, 0x3A	; 58
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	ea e3       	ldi	r30, 0x3A	; 58
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	48 2f       	mov	r20, r24
    1c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5e:	28 2f       	mov	r18, r24
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	02 2e       	mov	r0, r18
    1c68:	02 c0       	rjmp	.+4      	; 0x1c6e <EF_B_DIO_InitPin+0x104>
    1c6a:	88 0f       	add	r24, r24
    1c6c:	99 1f       	adc	r25, r25
    1c6e:	0a 94       	dec	r0
    1c70:	e2 f7       	brpl	.-8      	; 0x1c6a <EF_B_DIO_InitPin+0x100>
    1c72:	84 2b       	or	r24, r20
    1c74:	8c 93       	st	X, r24
    1c76:	aa c0       	rjmp	.+340    	; 0x1dcc <EF_B_DIO_InitPin+0x262>
			    	   break;
			  }
		 break;
		 case 'b':
		 case 'B':
			  switch(Direction)
    1c78:	8c 81       	ldd	r24, Y+4	; 0x04
    1c7a:	28 2f       	mov	r18, r24
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	3a 87       	std	Y+10, r19	; 0x0a
    1c80:	29 87       	std	Y+9, r18	; 0x09
    1c82:	89 85       	ldd	r24, Y+9	; 0x09
    1c84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c86:	00 97       	sbiw	r24, 0x00	; 0
    1c88:	31 f0       	breq	.+12     	; 0x1c96 <EF_B_DIO_InitPin+0x12c>
    1c8a:	29 85       	ldd	r18, Y+9	; 0x09
    1c8c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1c8e:	21 30       	cpi	r18, 0x01	; 1
    1c90:	31 05       	cpc	r19, r1
    1c92:	b1 f0       	breq	.+44     	; 0x1cc0 <EF_B_DIO_InitPin+0x156>
    1c94:	9b c0       	rjmp	.+310    	; 0x1dcc <EF_B_DIO_InitPin+0x262>
			  {
			      case INPUT:
			 		   DDRB &= ~(1 << PinNumber);
    1c96:	a7 e3       	ldi	r26, 0x37	; 55
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	e7 e3       	ldi	r30, 0x37	; 55
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	48 2f       	mov	r20, r24
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	28 2f       	mov	r18, r24
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	02 2e       	mov	r0, r18
    1cae:	02 c0       	rjmp	.+4      	; 0x1cb4 <EF_B_DIO_InitPin+0x14a>
    1cb0:	88 0f       	add	r24, r24
    1cb2:	99 1f       	adc	r25, r25
    1cb4:	0a 94       	dec	r0
    1cb6:	e2 f7       	brpl	.-8      	; 0x1cb0 <EF_B_DIO_InitPin+0x146>
    1cb8:	80 95       	com	r24
    1cba:	84 23       	and	r24, r20
    1cbc:	8c 93       	st	X, r24
    1cbe:	86 c0       	rjmp	.+268    	; 0x1dcc <EF_B_DIO_InitPin+0x262>
			 		   break;
			 	  case OUTPUT:
			 		   DDRB |=  (1 << PinNumber);
    1cc0:	a7 e3       	ldi	r26, 0x37	; 55
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	e7 e3       	ldi	r30, 0x37	; 55
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	48 2f       	mov	r20, r24
    1ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cce:	28 2f       	mov	r18, r24
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	02 2e       	mov	r0, r18
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <EF_B_DIO_InitPin+0x174>
    1cda:	88 0f       	add	r24, r24
    1cdc:	99 1f       	adc	r25, r25
    1cde:	0a 94       	dec	r0
    1ce0:	e2 f7       	brpl	.-8      	; 0x1cda <EF_B_DIO_InitPin+0x170>
    1ce2:	84 2b       	or	r24, r20
    1ce4:	8c 93       	st	X, r24
    1ce6:	72 c0       	rjmp	.+228    	; 0x1dcc <EF_B_DIO_InitPin+0x262>
			 		   break;
			  }
		 break;
		 case 'c':
		 case 'C':
			  switch(Direction)
    1ce8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cea:	28 2f       	mov	r18, r24
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	38 87       	std	Y+8, r19	; 0x08
    1cf0:	2f 83       	std	Y+7, r18	; 0x07
    1cf2:	8f 81       	ldd	r24, Y+7	; 0x07
    1cf4:	98 85       	ldd	r25, Y+8	; 0x08
    1cf6:	00 97       	sbiw	r24, 0x00	; 0
    1cf8:	31 f0       	breq	.+12     	; 0x1d06 <EF_B_DIO_InitPin+0x19c>
    1cfa:	2f 81       	ldd	r18, Y+7	; 0x07
    1cfc:	38 85       	ldd	r19, Y+8	; 0x08
    1cfe:	21 30       	cpi	r18, 0x01	; 1
    1d00:	31 05       	cpc	r19, r1
    1d02:	b1 f0       	breq	.+44     	; 0x1d30 <EF_B_DIO_InitPin+0x1c6>
    1d04:	63 c0       	rjmp	.+198    	; 0x1dcc <EF_B_DIO_InitPin+0x262>
			  {
			 	  case INPUT:
			 		   DDRC &= ~(1 << PinNumber);
    1d06:	a4 e3       	ldi	r26, 0x34	; 52
    1d08:	b0 e0       	ldi	r27, 0x00	; 0
    1d0a:	e4 e3       	ldi	r30, 0x34	; 52
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	80 81       	ld	r24, Z
    1d10:	48 2f       	mov	r20, r24
    1d12:	8b 81       	ldd	r24, Y+3	; 0x03
    1d14:	28 2f       	mov	r18, r24
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	02 2e       	mov	r0, r18
    1d1e:	02 c0       	rjmp	.+4      	; 0x1d24 <EF_B_DIO_InitPin+0x1ba>
    1d20:	88 0f       	add	r24, r24
    1d22:	99 1f       	adc	r25, r25
    1d24:	0a 94       	dec	r0
    1d26:	e2 f7       	brpl	.-8      	; 0x1d20 <EF_B_DIO_InitPin+0x1b6>
    1d28:	80 95       	com	r24
    1d2a:	84 23       	and	r24, r20
    1d2c:	8c 93       	st	X, r24
    1d2e:	4e c0       	rjmp	.+156    	; 0x1dcc <EF_B_DIO_InitPin+0x262>
			 		   break;
			 	  case OUTPUT:
			 		   DDRC |=  (1 << PinNumber);
    1d30:	a4 e3       	ldi	r26, 0x34	; 52
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	e4 e3       	ldi	r30, 0x34	; 52
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	48 2f       	mov	r20, r24
    1d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3e:	28 2f       	mov	r18, r24
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	02 2e       	mov	r0, r18
    1d48:	02 c0       	rjmp	.+4      	; 0x1d4e <EF_B_DIO_InitPin+0x1e4>
    1d4a:	88 0f       	add	r24, r24
    1d4c:	99 1f       	adc	r25, r25
    1d4e:	0a 94       	dec	r0
    1d50:	e2 f7       	brpl	.-8      	; 0x1d4a <EF_B_DIO_InitPin+0x1e0>
    1d52:	84 2b       	or	r24, r20
    1d54:	8c 93       	st	X, r24
    1d56:	3a c0       	rjmp	.+116    	; 0x1dcc <EF_B_DIO_InitPin+0x262>
			 		   break;
			  }
		 break;
		 case 'd':
		 case 'D':
			  switch(Direction)
    1d58:	8c 81       	ldd	r24, Y+4	; 0x04
    1d5a:	28 2f       	mov	r18, r24
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	3e 83       	std	Y+6, r19	; 0x06
    1d60:	2d 83       	std	Y+5, r18	; 0x05
    1d62:	8d 81       	ldd	r24, Y+5	; 0x05
    1d64:	9e 81       	ldd	r25, Y+6	; 0x06
    1d66:	00 97       	sbiw	r24, 0x00	; 0
    1d68:	31 f0       	breq	.+12     	; 0x1d76 <EF_B_DIO_InitPin+0x20c>
    1d6a:	2d 81       	ldd	r18, Y+5	; 0x05
    1d6c:	3e 81       	ldd	r19, Y+6	; 0x06
    1d6e:	21 30       	cpi	r18, 0x01	; 1
    1d70:	31 05       	cpc	r19, r1
    1d72:	b1 f0       	breq	.+44     	; 0x1da0 <EF_B_DIO_InitPin+0x236>
    1d74:	2b c0       	rjmp	.+86     	; 0x1dcc <EF_B_DIO_InitPin+0x262>
			  {
			 	  case INPUT:
			 		   DDRD &= ~(1 << PinNumber);
    1d76:	a1 e3       	ldi	r26, 0x31	; 49
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	e1 e3       	ldi	r30, 0x31	; 49
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	48 2f       	mov	r20, r24
    1d82:	8b 81       	ldd	r24, Y+3	; 0x03
    1d84:	28 2f       	mov	r18, r24
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	02 2e       	mov	r0, r18
    1d8e:	02 c0       	rjmp	.+4      	; 0x1d94 <EF_B_DIO_InitPin+0x22a>
    1d90:	88 0f       	add	r24, r24
    1d92:	99 1f       	adc	r25, r25
    1d94:	0a 94       	dec	r0
    1d96:	e2 f7       	brpl	.-8      	; 0x1d90 <EF_B_DIO_InitPin+0x226>
    1d98:	80 95       	com	r24
    1d9a:	84 23       	and	r24, r20
    1d9c:	8c 93       	st	X, r24
    1d9e:	16 c0       	rjmp	.+44     	; 0x1dcc <EF_B_DIO_InitPin+0x262>
			 		   break;
			 	  case OUTPUT:
			 		   DDRD |=  (1 << PinNumber);
    1da0:	a1 e3       	ldi	r26, 0x31	; 49
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	e1 e3       	ldi	r30, 0x31	; 49
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	48 2f       	mov	r20, r24
    1dac:	8b 81       	ldd	r24, Y+3	; 0x03
    1dae:	28 2f       	mov	r18, r24
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	02 2e       	mov	r0, r18
    1db8:	02 c0       	rjmp	.+4      	; 0x1dbe <EF_B_DIO_InitPin+0x254>
    1dba:	88 0f       	add	r24, r24
    1dbc:	99 1f       	adc	r25, r25
    1dbe:	0a 94       	dec	r0
    1dc0:	e2 f7       	brpl	.-8      	; 0x1dba <EF_B_DIO_InitPin+0x250>
    1dc2:	84 2b       	or	r24, r20
    1dc4:	8c 93       	st	X, r24
    1dc6:	02 c0       	rjmp	.+4      	; 0x1dcc <EF_B_DIO_InitPin+0x262>
			 	  default:
			 		   break;
			   }
		 break;
		 default:
             bStatus = -1;
    1dc8:	8f ef       	ldi	r24, 0xFF	; 255
    1dca:	89 83       	std	Y+1, r24	; 0x01

}

    return(bStatus);
    1dcc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dce:	2e 96       	adiw	r28, 0x0e	; 14
    1dd0:	0f b6       	in	r0, 0x3f	; 63
    1dd2:	f8 94       	cli
    1dd4:	de bf       	out	0x3e, r29	; 62
    1dd6:	0f be       	out	0x3f, r0	; 63
    1dd8:	cd bf       	out	0x3d, r28	; 61
    1dda:	cf 91       	pop	r28
    1ddc:	df 91       	pop	r29
    1dde:	08 95       	ret

00001de0 <EF_S8_DIO_SetPin>:
* Return Value: The function will return -1 if user enter wrong inputs.
*               or return 1 if OK.  
* Note        : This function set output PIN.
***********************************************************************/
s8  EF_S8_DIO_SetPin   (u8 PortName, u8 PinNumber)
{
    1de0:	df 93       	push	r29
    1de2:	cf 93       	push	r28
    1de4:	00 d0       	rcall	.+0      	; 0x1de6 <EF_S8_DIO_SetPin+0x6>
    1de6:	00 d0       	rcall	.+0      	; 0x1de8 <EF_S8_DIO_SetPin+0x8>
    1de8:	0f 92       	push	r0
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
    1dee:	8a 83       	std	Y+2, r24	; 0x02
    1df0:	6b 83       	std	Y+3, r22	; 0x03
    s8 Status;

    if(PinNumber > 7)
    1df2:	8b 81       	ldd	r24, Y+3	; 0x03
    1df4:	88 30       	cpi	r24, 0x08	; 8
    1df6:	18 f0       	brcs	.+6      	; 0x1dfe <EF_S8_DIO_SetPin+0x1e>
	{
	    Status = -1;
    1df8:	8f ef       	ldi	r24, 0xFF	; 255
    1dfa:	89 83       	std	Y+1, r24	; 0x01
    1dfc:	90 c0       	rjmp	.+288    	; 0x1f1e <EF_S8_DIO_SetPin+0x13e>
    }
	else
	{    
		Status = 1;
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	89 83       	std	Y+1, r24	; 0x01
	    switch(PortName)
    1e02:	8a 81       	ldd	r24, Y+2	; 0x02
    1e04:	28 2f       	mov	r18, r24
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	3d 83       	std	Y+5, r19	; 0x05
    1e0a:	2c 83       	std	Y+4, r18	; 0x04
    1e0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e0e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e10:	84 34       	cpi	r24, 0x44	; 68
    1e12:	91 05       	cpc	r25, r1
    1e14:	09 f4       	brne	.+2      	; 0x1e18 <EF_S8_DIO_SetPin+0x38>
    1e16:	6d c0       	rjmp	.+218    	; 0x1ef2 <EF_S8_DIO_SetPin+0x112>
    1e18:	2c 81       	ldd	r18, Y+4	; 0x04
    1e1a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e1c:	25 34       	cpi	r18, 0x45	; 69
    1e1e:	31 05       	cpc	r19, r1
    1e20:	8c f4       	brge	.+34     	; 0x1e44 <EF_S8_DIO_SetPin+0x64>
    1e22:	8c 81       	ldd	r24, Y+4	; 0x04
    1e24:	9d 81       	ldd	r25, Y+5	; 0x05
    1e26:	82 34       	cpi	r24, 0x42	; 66
    1e28:	91 05       	cpc	r25, r1
    1e2a:	d9 f1       	breq	.+118    	; 0x1ea2 <EF_S8_DIO_SetPin+0xc2>
    1e2c:	2c 81       	ldd	r18, Y+4	; 0x04
    1e2e:	3d 81       	ldd	r19, Y+5	; 0x05
    1e30:	23 34       	cpi	r18, 0x43	; 67
    1e32:	31 05       	cpc	r19, r1
    1e34:	0c f0       	brlt	.+2      	; 0x1e38 <EF_S8_DIO_SetPin+0x58>
    1e36:	49 c0       	rjmp	.+146    	; 0x1eca <EF_S8_DIO_SetPin+0xea>
    1e38:	8c 81       	ldd	r24, Y+4	; 0x04
    1e3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e3c:	81 34       	cpi	r24, 0x41	; 65
    1e3e:	91 05       	cpc	r25, r1
    1e40:	e1 f0       	breq	.+56     	; 0x1e7a <EF_S8_DIO_SetPin+0x9a>
    1e42:	6b c0       	rjmp	.+214    	; 0x1f1a <EF_S8_DIO_SetPin+0x13a>
    1e44:	2c 81       	ldd	r18, Y+4	; 0x04
    1e46:	3d 81       	ldd	r19, Y+5	; 0x05
    1e48:	22 36       	cpi	r18, 0x62	; 98
    1e4a:	31 05       	cpc	r19, r1
    1e4c:	51 f1       	breq	.+84     	; 0x1ea2 <EF_S8_DIO_SetPin+0xc2>
    1e4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e50:	9d 81       	ldd	r25, Y+5	; 0x05
    1e52:	83 36       	cpi	r24, 0x63	; 99
    1e54:	91 05       	cpc	r25, r1
    1e56:	34 f4       	brge	.+12     	; 0x1e64 <EF_S8_DIO_SetPin+0x84>
    1e58:	2c 81       	ldd	r18, Y+4	; 0x04
    1e5a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e5c:	21 36       	cpi	r18, 0x61	; 97
    1e5e:	31 05       	cpc	r19, r1
    1e60:	61 f0       	breq	.+24     	; 0x1e7a <EF_S8_DIO_SetPin+0x9a>
    1e62:	5b c0       	rjmp	.+182    	; 0x1f1a <EF_S8_DIO_SetPin+0x13a>
    1e64:	8c 81       	ldd	r24, Y+4	; 0x04
    1e66:	9d 81       	ldd	r25, Y+5	; 0x05
    1e68:	83 36       	cpi	r24, 0x63	; 99
    1e6a:	91 05       	cpc	r25, r1
    1e6c:	71 f1       	breq	.+92     	; 0x1eca <EF_S8_DIO_SetPin+0xea>
    1e6e:	2c 81       	ldd	r18, Y+4	; 0x04
    1e70:	3d 81       	ldd	r19, Y+5	; 0x05
    1e72:	24 36       	cpi	r18, 0x64	; 100
    1e74:	31 05       	cpc	r19, r1
    1e76:	e9 f1       	breq	.+122    	; 0x1ef2 <EF_S8_DIO_SetPin+0x112>
    1e78:	50 c0       	rjmp	.+160    	; 0x1f1a <EF_S8_DIO_SetPin+0x13a>
		{
		     case 'a':
			 case 'A':
	             PORTA |= (1 << PinNumber);
    1e7a:	ab e3       	ldi	r26, 0x3B	; 59
    1e7c:	b0 e0       	ldi	r27, 0x00	; 0
    1e7e:	eb e3       	ldi	r30, 0x3B	; 59
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	48 2f       	mov	r20, r24
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	28 2f       	mov	r18, r24
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	02 2e       	mov	r0, r18
    1e92:	02 c0       	rjmp	.+4      	; 0x1e98 <EF_S8_DIO_SetPin+0xb8>
    1e94:	88 0f       	add	r24, r24
    1e96:	99 1f       	adc	r25, r25
    1e98:	0a 94       	dec	r0
    1e9a:	e2 f7       	brpl	.-8      	; 0x1e94 <EF_S8_DIO_SetPin+0xb4>
    1e9c:	84 2b       	or	r24, r20
    1e9e:	8c 93       	st	X, r24
    1ea0:	3e c0       	rjmp	.+124    	; 0x1f1e <EF_S8_DIO_SetPin+0x13e>
			 break;
			 case 'b':
			 case 'B':
	             PORTB |= (1 << PinNumber);
    1ea2:	a8 e3       	ldi	r26, 0x38	; 56
    1ea4:	b0 e0       	ldi	r27, 0x00	; 0
    1ea6:	e8 e3       	ldi	r30, 0x38	; 56
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	80 81       	ld	r24, Z
    1eac:	48 2f       	mov	r20, r24
    1eae:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb0:	28 2f       	mov	r18, r24
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	02 2e       	mov	r0, r18
    1eba:	02 c0       	rjmp	.+4      	; 0x1ec0 <EF_S8_DIO_SetPin+0xe0>
    1ebc:	88 0f       	add	r24, r24
    1ebe:	99 1f       	adc	r25, r25
    1ec0:	0a 94       	dec	r0
    1ec2:	e2 f7       	brpl	.-8      	; 0x1ebc <EF_S8_DIO_SetPin+0xdc>
    1ec4:	84 2b       	or	r24, r20
    1ec6:	8c 93       	st	X, r24
    1ec8:	2a c0       	rjmp	.+84     	; 0x1f1e <EF_S8_DIO_SetPin+0x13e>
			 break;
			 case 'c':
			 case 'C':
	             PORTC |= (1 << PinNumber);
    1eca:	a5 e3       	ldi	r26, 0x35	; 53
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	e5 e3       	ldi	r30, 0x35	; 53
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
    1ed4:	48 2f       	mov	r20, r24
    1ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed8:	28 2f       	mov	r18, r24
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	02 2e       	mov	r0, r18
    1ee2:	02 c0       	rjmp	.+4      	; 0x1ee8 <EF_S8_DIO_SetPin+0x108>
    1ee4:	88 0f       	add	r24, r24
    1ee6:	99 1f       	adc	r25, r25
    1ee8:	0a 94       	dec	r0
    1eea:	e2 f7       	brpl	.-8      	; 0x1ee4 <EF_S8_DIO_SetPin+0x104>
    1eec:	84 2b       	or	r24, r20
    1eee:	8c 93       	st	X, r24
    1ef0:	16 c0       	rjmp	.+44     	; 0x1f1e <EF_S8_DIO_SetPin+0x13e>
			 break;
			 case 'd':
			 case 'D':
	             PORTD |= (1 << PinNumber);
    1ef2:	a2 e3       	ldi	r26, 0x32	; 50
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	e2 e3       	ldi	r30, 0x32	; 50
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	48 2f       	mov	r20, r24
    1efe:	8b 81       	ldd	r24, Y+3	; 0x03
    1f00:	28 2f       	mov	r18, r24
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	02 2e       	mov	r0, r18
    1f0a:	02 c0       	rjmp	.+4      	; 0x1f10 <EF_S8_DIO_SetPin+0x130>
    1f0c:	88 0f       	add	r24, r24
    1f0e:	99 1f       	adc	r25, r25
    1f10:	0a 94       	dec	r0
    1f12:	e2 f7       	brpl	.-8      	; 0x1f0c <EF_S8_DIO_SetPin+0x12c>
    1f14:	84 2b       	or	r24, r20
    1f16:	8c 93       	st	X, r24
    1f18:	02 c0       	rjmp	.+4      	; 0x1f1e <EF_S8_DIO_SetPin+0x13e>
			 break;
			 default:
	             Status = -1;
    1f1a:	8f ef       	ldi	r24, 0xFF	; 255
    1f1c:	89 83       	std	Y+1, r24	; 0x01
	    }
    }
    return(Status);
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1f20:	0f 90       	pop	r0
    1f22:	0f 90       	pop	r0
    1f24:	0f 90       	pop	r0
    1f26:	0f 90       	pop	r0
    1f28:	0f 90       	pop	r0
    1f2a:	cf 91       	pop	r28
    1f2c:	df 91       	pop	r29
    1f2e:	08 95       	ret

00001f30 <EF_S8_DIO_ClearPin>:
*
* Return Value: The function will return -1 if user enter wrong inputs.
*               or return 1 if OK.  
***********************************************************************/
s8  EF_S8_DIO_ClearPin (u8 PortName, u8 PinNumber)
{
    1f30:	df 93       	push	r29
    1f32:	cf 93       	push	r28
    1f34:	00 d0       	rcall	.+0      	; 0x1f36 <EF_S8_DIO_ClearPin+0x6>
    1f36:	00 d0       	rcall	.+0      	; 0x1f38 <EF_S8_DIO_ClearPin+0x8>
    1f38:	0f 92       	push	r0
    1f3a:	cd b7       	in	r28, 0x3d	; 61
    1f3c:	de b7       	in	r29, 0x3e	; 62
    1f3e:	8a 83       	std	Y+2, r24	; 0x02
    1f40:	6b 83       	std	Y+3, r22	; 0x03
    s8 Status;

    if(PinNumber > 7)
    1f42:	8b 81       	ldd	r24, Y+3	; 0x03
    1f44:	88 30       	cpi	r24, 0x08	; 8
    1f46:	18 f0       	brcs	.+6      	; 0x1f4e <EF_S8_DIO_ClearPin+0x1e>
	{
	    Status = -1;
    1f48:	8f ef       	ldi	r24, 0xFF	; 255
    1f4a:	89 83       	std	Y+1, r24	; 0x01
    1f4c:	95 c0       	rjmp	.+298    	; 0x2078 <EF_S8_DIO_ClearPin+0x148>
    }
	else
	{
	    Status = 1;
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	89 83       	std	Y+1, r24	; 0x01
	    switch(PortName)
    1f52:	8a 81       	ldd	r24, Y+2	; 0x02
    1f54:	28 2f       	mov	r18, r24
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	3d 83       	std	Y+5, r19	; 0x05
    1f5a:	2c 83       	std	Y+4, r18	; 0x04
    1f5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f60:	84 34       	cpi	r24, 0x44	; 68
    1f62:	91 05       	cpc	r25, r1
    1f64:	09 f4       	brne	.+2      	; 0x1f68 <EF_S8_DIO_ClearPin+0x38>
    1f66:	71 c0       	rjmp	.+226    	; 0x204a <EF_S8_DIO_ClearPin+0x11a>
    1f68:	2c 81       	ldd	r18, Y+4	; 0x04
    1f6a:	3d 81       	ldd	r19, Y+5	; 0x05
    1f6c:	25 34       	cpi	r18, 0x45	; 69
    1f6e:	31 05       	cpc	r19, r1
    1f70:	8c f4       	brge	.+34     	; 0x1f94 <EF_S8_DIO_ClearPin+0x64>
    1f72:	8c 81       	ldd	r24, Y+4	; 0x04
    1f74:	9d 81       	ldd	r25, Y+5	; 0x05
    1f76:	82 34       	cpi	r24, 0x42	; 66
    1f78:	91 05       	cpc	r25, r1
    1f7a:	e9 f1       	breq	.+122    	; 0x1ff6 <EF_S8_DIO_ClearPin+0xc6>
    1f7c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f7e:	3d 81       	ldd	r19, Y+5	; 0x05
    1f80:	23 34       	cpi	r18, 0x43	; 67
    1f82:	31 05       	cpc	r19, r1
    1f84:	0c f0       	brlt	.+2      	; 0x1f88 <EF_S8_DIO_ClearPin+0x58>
    1f86:	4c c0       	rjmp	.+152    	; 0x2020 <EF_S8_DIO_ClearPin+0xf0>
    1f88:	8c 81       	ldd	r24, Y+4	; 0x04
    1f8a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f8c:	81 34       	cpi	r24, 0x41	; 65
    1f8e:	91 05       	cpc	r25, r1
    1f90:	e9 f0       	breq	.+58     	; 0x1fcc <EF_S8_DIO_ClearPin+0x9c>
    1f92:	70 c0       	rjmp	.+224    	; 0x2074 <EF_S8_DIO_ClearPin+0x144>
    1f94:	2c 81       	ldd	r18, Y+4	; 0x04
    1f96:	3d 81       	ldd	r19, Y+5	; 0x05
    1f98:	22 36       	cpi	r18, 0x62	; 98
    1f9a:	31 05       	cpc	r19, r1
    1f9c:	61 f1       	breq	.+88     	; 0x1ff6 <EF_S8_DIO_ClearPin+0xc6>
    1f9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa0:	9d 81       	ldd	r25, Y+5	; 0x05
    1fa2:	83 36       	cpi	r24, 0x63	; 99
    1fa4:	91 05       	cpc	r25, r1
    1fa6:	34 f4       	brge	.+12     	; 0x1fb4 <EF_S8_DIO_ClearPin+0x84>
    1fa8:	2c 81       	ldd	r18, Y+4	; 0x04
    1faa:	3d 81       	ldd	r19, Y+5	; 0x05
    1fac:	21 36       	cpi	r18, 0x61	; 97
    1fae:	31 05       	cpc	r19, r1
    1fb0:	69 f0       	breq	.+26     	; 0x1fcc <EF_S8_DIO_ClearPin+0x9c>
    1fb2:	60 c0       	rjmp	.+192    	; 0x2074 <EF_S8_DIO_ClearPin+0x144>
    1fb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb6:	9d 81       	ldd	r25, Y+5	; 0x05
    1fb8:	83 36       	cpi	r24, 0x63	; 99
    1fba:	91 05       	cpc	r25, r1
    1fbc:	89 f1       	breq	.+98     	; 0x2020 <EF_S8_DIO_ClearPin+0xf0>
    1fbe:	2c 81       	ldd	r18, Y+4	; 0x04
    1fc0:	3d 81       	ldd	r19, Y+5	; 0x05
    1fc2:	24 36       	cpi	r18, 0x64	; 100
    1fc4:	31 05       	cpc	r19, r1
    1fc6:	09 f4       	brne	.+2      	; 0x1fca <EF_S8_DIO_ClearPin+0x9a>
    1fc8:	40 c0       	rjmp	.+128    	; 0x204a <EF_S8_DIO_ClearPin+0x11a>
    1fca:	54 c0       	rjmp	.+168    	; 0x2074 <EF_S8_DIO_ClearPin+0x144>
		{
		     case 'a':
			 case 'A':
	             PORTA &= ~(1 << PinNumber);
    1fcc:	ab e3       	ldi	r26, 0x3B	; 59
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	eb e3       	ldi	r30, 0x3B	; 59
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	48 2f       	mov	r20, r24
    1fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fda:	28 2f       	mov	r18, r24
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	02 2e       	mov	r0, r18
    1fe4:	02 c0       	rjmp	.+4      	; 0x1fea <EF_S8_DIO_ClearPin+0xba>
    1fe6:	88 0f       	add	r24, r24
    1fe8:	99 1f       	adc	r25, r25
    1fea:	0a 94       	dec	r0
    1fec:	e2 f7       	brpl	.-8      	; 0x1fe6 <EF_S8_DIO_ClearPin+0xb6>
    1fee:	80 95       	com	r24
    1ff0:	84 23       	and	r24, r20
    1ff2:	8c 93       	st	X, r24
    1ff4:	41 c0       	rjmp	.+130    	; 0x2078 <EF_S8_DIO_ClearPin+0x148>
			 break;
			 case 'b':
			 case 'B':
	             PORTB &= ~(1 << PinNumber);
    1ff6:	a8 e3       	ldi	r26, 0x38	; 56
    1ff8:	b0 e0       	ldi	r27, 0x00	; 0
    1ffa:	e8 e3       	ldi	r30, 0x38	; 56
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	80 81       	ld	r24, Z
    2000:	48 2f       	mov	r20, r24
    2002:	8b 81       	ldd	r24, Y+3	; 0x03
    2004:	28 2f       	mov	r18, r24
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	02 2e       	mov	r0, r18
    200e:	02 c0       	rjmp	.+4      	; 0x2014 <EF_S8_DIO_ClearPin+0xe4>
    2010:	88 0f       	add	r24, r24
    2012:	99 1f       	adc	r25, r25
    2014:	0a 94       	dec	r0
    2016:	e2 f7       	brpl	.-8      	; 0x2010 <EF_S8_DIO_ClearPin+0xe0>
    2018:	80 95       	com	r24
    201a:	84 23       	and	r24, r20
    201c:	8c 93       	st	X, r24
    201e:	2c c0       	rjmp	.+88     	; 0x2078 <EF_S8_DIO_ClearPin+0x148>
			 break;
			 case 'c':
			 case 'C':
	             PORTC &= ~(1 << PinNumber);
    2020:	a5 e3       	ldi	r26, 0x35	; 53
    2022:	b0 e0       	ldi	r27, 0x00	; 0
    2024:	e5 e3       	ldi	r30, 0x35	; 53
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	80 81       	ld	r24, Z
    202a:	48 2f       	mov	r20, r24
    202c:	8b 81       	ldd	r24, Y+3	; 0x03
    202e:	28 2f       	mov	r18, r24
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	02 2e       	mov	r0, r18
    2038:	02 c0       	rjmp	.+4      	; 0x203e <EF_S8_DIO_ClearPin+0x10e>
    203a:	88 0f       	add	r24, r24
    203c:	99 1f       	adc	r25, r25
    203e:	0a 94       	dec	r0
    2040:	e2 f7       	brpl	.-8      	; 0x203a <EF_S8_DIO_ClearPin+0x10a>
    2042:	80 95       	com	r24
    2044:	84 23       	and	r24, r20
    2046:	8c 93       	st	X, r24
    2048:	17 c0       	rjmp	.+46     	; 0x2078 <EF_S8_DIO_ClearPin+0x148>
			 break;
			 case 'd':
			 case 'D':
	             PORTD &= ~(1 << PinNumber);
    204a:	a2 e3       	ldi	r26, 0x32	; 50
    204c:	b0 e0       	ldi	r27, 0x00	; 0
    204e:	e2 e3       	ldi	r30, 0x32	; 50
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	80 81       	ld	r24, Z
    2054:	48 2f       	mov	r20, r24
    2056:	8b 81       	ldd	r24, Y+3	; 0x03
    2058:	28 2f       	mov	r18, r24
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	02 2e       	mov	r0, r18
    2062:	02 c0       	rjmp	.+4      	; 0x2068 <EF_S8_DIO_ClearPin+0x138>
    2064:	88 0f       	add	r24, r24
    2066:	99 1f       	adc	r25, r25
    2068:	0a 94       	dec	r0
    206a:	e2 f7       	brpl	.-8      	; 0x2064 <EF_S8_DIO_ClearPin+0x134>
    206c:	80 95       	com	r24
    206e:	84 23       	and	r24, r20
    2070:	8c 93       	st	X, r24
    2072:	02 c0       	rjmp	.+4      	; 0x2078 <EF_S8_DIO_ClearPin+0x148>
			 break;
			 default:
	             Status = -1;
    2074:	8f ef       	ldi	r24, 0xFF	; 255
    2076:	89 83       	std	Y+1, r24	; 0x01
	    }
	}
    return(Status);
    2078:	89 81       	ldd	r24, Y+1	; 0x01

}
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	0f 90       	pop	r0
    2084:	cf 91       	pop	r28
    2086:	df 91       	pop	r29
    2088:	08 95       	ret

0000208a <EF_S8_DIO_SetPort>:
*
* Return Value: The function will return -1 if user enter wrong inputs.
*               or return 1 if OK.  
***********************************************************************/
s8  EF_S8_DIO_SetPort  (u8 PortName)
{
    208a:	df 93       	push	r29
    208c:	cf 93       	push	r28
    208e:	00 d0       	rcall	.+0      	; 0x2090 <EF_S8_DIO_SetPort+0x6>
    2090:	00 d0       	rcall	.+0      	; 0x2092 <EF_S8_DIO_SetPort+0x8>
    2092:	cd b7       	in	r28, 0x3d	; 61
    2094:	de b7       	in	r29, 0x3e	; 62
    2096:	8a 83       	std	Y+2, r24	; 0x02
    s8 Status;
    
    Status = 1;
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	89 83       	std	Y+1, r24	; 0x01
	switch(PortName)
    209c:	8a 81       	ldd	r24, Y+2	; 0x02
    209e:	28 2f       	mov	r18, r24
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	3c 83       	std	Y+4, r19	; 0x04
    20a4:	2b 83       	std	Y+3, r18	; 0x03
    20a6:	8b 81       	ldd	r24, Y+3	; 0x03
    20a8:	9c 81       	ldd	r25, Y+4	; 0x04
    20aa:	84 34       	cpi	r24, 0x44	; 68
    20ac:	91 05       	cpc	r25, r1
    20ae:	09 f4       	brne	.+2      	; 0x20b2 <EF_S8_DIO_SetPort+0x28>
    20b0:	3f c0       	rjmp	.+126    	; 0x2130 <EF_S8_DIO_SetPort+0xa6>
    20b2:	2b 81       	ldd	r18, Y+3	; 0x03
    20b4:	3c 81       	ldd	r19, Y+4	; 0x04
    20b6:	25 34       	cpi	r18, 0x45	; 69
    20b8:	31 05       	cpc	r19, r1
    20ba:	84 f4       	brge	.+32     	; 0x20dc <EF_S8_DIO_SetPort+0x52>
    20bc:	8b 81       	ldd	r24, Y+3	; 0x03
    20be:	9c 81       	ldd	r25, Y+4	; 0x04
    20c0:	82 34       	cpi	r24, 0x42	; 66
    20c2:	91 05       	cpc	r25, r1
    20c4:	59 f1       	breq	.+86     	; 0x211c <EF_S8_DIO_SetPort+0x92>
    20c6:	2b 81       	ldd	r18, Y+3	; 0x03
    20c8:	3c 81       	ldd	r19, Y+4	; 0x04
    20ca:	23 34       	cpi	r18, 0x43	; 67
    20cc:	31 05       	cpc	r19, r1
    20ce:	5c f5       	brge	.+86     	; 0x2126 <EF_S8_DIO_SetPort+0x9c>
    20d0:	8b 81       	ldd	r24, Y+3	; 0x03
    20d2:	9c 81       	ldd	r25, Y+4	; 0x04
    20d4:	81 34       	cpi	r24, 0x41	; 65
    20d6:	91 05       	cpc	r25, r1
    20d8:	e1 f0       	breq	.+56     	; 0x2112 <EF_S8_DIO_SetPort+0x88>
    20da:	2f c0       	rjmp	.+94     	; 0x213a <EF_S8_DIO_SetPort+0xb0>
    20dc:	2b 81       	ldd	r18, Y+3	; 0x03
    20de:	3c 81       	ldd	r19, Y+4	; 0x04
    20e0:	22 36       	cpi	r18, 0x62	; 98
    20e2:	31 05       	cpc	r19, r1
    20e4:	d9 f0       	breq	.+54     	; 0x211c <EF_S8_DIO_SetPort+0x92>
    20e6:	8b 81       	ldd	r24, Y+3	; 0x03
    20e8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ea:	83 36       	cpi	r24, 0x63	; 99
    20ec:	91 05       	cpc	r25, r1
    20ee:	34 f4       	brge	.+12     	; 0x20fc <EF_S8_DIO_SetPort+0x72>
    20f0:	2b 81       	ldd	r18, Y+3	; 0x03
    20f2:	3c 81       	ldd	r19, Y+4	; 0x04
    20f4:	21 36       	cpi	r18, 0x61	; 97
    20f6:	31 05       	cpc	r19, r1
    20f8:	61 f0       	breq	.+24     	; 0x2112 <EF_S8_DIO_SetPort+0x88>
    20fa:	1f c0       	rjmp	.+62     	; 0x213a <EF_S8_DIO_SetPort+0xb0>
    20fc:	8b 81       	ldd	r24, Y+3	; 0x03
    20fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2100:	83 36       	cpi	r24, 0x63	; 99
    2102:	91 05       	cpc	r25, r1
    2104:	81 f0       	breq	.+32     	; 0x2126 <EF_S8_DIO_SetPort+0x9c>
    2106:	2b 81       	ldd	r18, Y+3	; 0x03
    2108:	3c 81       	ldd	r19, Y+4	; 0x04
    210a:	24 36       	cpi	r18, 0x64	; 100
    210c:	31 05       	cpc	r19, r1
    210e:	81 f0       	breq	.+32     	; 0x2130 <EF_S8_DIO_SetPort+0xa6>
    2110:	14 c0       	rjmp	.+40     	; 0x213a <EF_S8_DIO_SetPort+0xb0>
	{
	     case 'a':
		 case 'A':
             PORTA = 0xFF;
    2112:	eb e3       	ldi	r30, 0x3B	; 59
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	8f ef       	ldi	r24, 0xFF	; 255
    2118:	80 83       	st	Z, r24
    211a:	11 c0       	rjmp	.+34     	; 0x213e <EF_S8_DIO_SetPort+0xb4>
		 break;
		 case 'b':
		 case 'B':
             PORTB = 0xFF;
    211c:	e8 e3       	ldi	r30, 0x38	; 56
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	8f ef       	ldi	r24, 0xFF	; 255
    2122:	80 83       	st	Z, r24
    2124:	0c c0       	rjmp	.+24     	; 0x213e <EF_S8_DIO_SetPort+0xb4>
		 break;
		 case 'c':
		 case 'C':
             PORTC = 0xFF;
    2126:	e5 e3       	ldi	r30, 0x35	; 53
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	8f ef       	ldi	r24, 0xFF	; 255
    212c:	80 83       	st	Z, r24
    212e:	07 c0       	rjmp	.+14     	; 0x213e <EF_S8_DIO_SetPort+0xb4>
		 break;
		 case 'd':
		 case 'D':
             PORTD = 0xFF;
    2130:	e2 e3       	ldi	r30, 0x32	; 50
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	8f ef       	ldi	r24, 0xFF	; 255
    2136:	80 83       	st	Z, r24
    2138:	02 c0       	rjmp	.+4      	; 0x213e <EF_S8_DIO_SetPort+0xb4>
		 break;
		 default:
             Status = -1;
    213a:	8f ef       	ldi	r24, 0xFF	; 255
    213c:	89 83       	std	Y+1, r24	; 0x01
    }

    return(Status);
    213e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2140:	0f 90       	pop	r0
    2142:	0f 90       	pop	r0
    2144:	0f 90       	pop	r0
    2146:	0f 90       	pop	r0
    2148:	cf 91       	pop	r28
    214a:	df 91       	pop	r29
    214c:	08 95       	ret

0000214e <EF_S8_DIO_ClearPort>:
*
* Return Value: The function will return -1 if user enter wrong inputs.
*               or return 1 if OK.  
***********************************************************************/
s8  EF_S8_DIO_ClearPort(u8 PortName)
{
    214e:	df 93       	push	r29
    2150:	cf 93       	push	r28
    2152:	00 d0       	rcall	.+0      	; 0x2154 <EF_S8_DIO_ClearPort+0x6>
    2154:	00 d0       	rcall	.+0      	; 0x2156 <EF_S8_DIO_ClearPort+0x8>
    2156:	cd b7       	in	r28, 0x3d	; 61
    2158:	de b7       	in	r29, 0x3e	; 62
    215a:	8a 83       	std	Y+2, r24	; 0x02
    s8 Status;
    
    Status = 1;
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	89 83       	std	Y+1, r24	; 0x01
	switch(PortName)
    2160:	8a 81       	ldd	r24, Y+2	; 0x02
    2162:	28 2f       	mov	r18, r24
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	3c 83       	std	Y+4, r19	; 0x04
    2168:	2b 83       	std	Y+3, r18	; 0x03
    216a:	8b 81       	ldd	r24, Y+3	; 0x03
    216c:	9c 81       	ldd	r25, Y+4	; 0x04
    216e:	84 34       	cpi	r24, 0x44	; 68
    2170:	91 05       	cpc	r25, r1
    2172:	e1 f1       	breq	.+120    	; 0x21ec <EF_S8_DIO_ClearPort+0x9e>
    2174:	2b 81       	ldd	r18, Y+3	; 0x03
    2176:	3c 81       	ldd	r19, Y+4	; 0x04
    2178:	25 34       	cpi	r18, 0x45	; 69
    217a:	31 05       	cpc	r19, r1
    217c:	84 f4       	brge	.+32     	; 0x219e <EF_S8_DIO_ClearPort+0x50>
    217e:	8b 81       	ldd	r24, Y+3	; 0x03
    2180:	9c 81       	ldd	r25, Y+4	; 0x04
    2182:	82 34       	cpi	r24, 0x42	; 66
    2184:	91 05       	cpc	r25, r1
    2186:	51 f1       	breq	.+84     	; 0x21dc <EF_S8_DIO_ClearPort+0x8e>
    2188:	2b 81       	ldd	r18, Y+3	; 0x03
    218a:	3c 81       	ldd	r19, Y+4	; 0x04
    218c:	23 34       	cpi	r18, 0x43	; 67
    218e:	31 05       	cpc	r19, r1
    2190:	4c f5       	brge	.+82     	; 0x21e4 <EF_S8_DIO_ClearPort+0x96>
    2192:	8b 81       	ldd	r24, Y+3	; 0x03
    2194:	9c 81       	ldd	r25, Y+4	; 0x04
    2196:	81 34       	cpi	r24, 0x41	; 65
    2198:	91 05       	cpc	r25, r1
    219a:	e1 f0       	breq	.+56     	; 0x21d4 <EF_S8_DIO_ClearPort+0x86>
    219c:	2b c0       	rjmp	.+86     	; 0x21f4 <EF_S8_DIO_ClearPort+0xa6>
    219e:	2b 81       	ldd	r18, Y+3	; 0x03
    21a0:	3c 81       	ldd	r19, Y+4	; 0x04
    21a2:	22 36       	cpi	r18, 0x62	; 98
    21a4:	31 05       	cpc	r19, r1
    21a6:	d1 f0       	breq	.+52     	; 0x21dc <EF_S8_DIO_ClearPort+0x8e>
    21a8:	8b 81       	ldd	r24, Y+3	; 0x03
    21aa:	9c 81       	ldd	r25, Y+4	; 0x04
    21ac:	83 36       	cpi	r24, 0x63	; 99
    21ae:	91 05       	cpc	r25, r1
    21b0:	34 f4       	brge	.+12     	; 0x21be <EF_S8_DIO_ClearPort+0x70>
    21b2:	2b 81       	ldd	r18, Y+3	; 0x03
    21b4:	3c 81       	ldd	r19, Y+4	; 0x04
    21b6:	21 36       	cpi	r18, 0x61	; 97
    21b8:	31 05       	cpc	r19, r1
    21ba:	61 f0       	breq	.+24     	; 0x21d4 <EF_S8_DIO_ClearPort+0x86>
    21bc:	1b c0       	rjmp	.+54     	; 0x21f4 <EF_S8_DIO_ClearPort+0xa6>
    21be:	8b 81       	ldd	r24, Y+3	; 0x03
    21c0:	9c 81       	ldd	r25, Y+4	; 0x04
    21c2:	83 36       	cpi	r24, 0x63	; 99
    21c4:	91 05       	cpc	r25, r1
    21c6:	71 f0       	breq	.+28     	; 0x21e4 <EF_S8_DIO_ClearPort+0x96>
    21c8:	2b 81       	ldd	r18, Y+3	; 0x03
    21ca:	3c 81       	ldd	r19, Y+4	; 0x04
    21cc:	24 36       	cpi	r18, 0x64	; 100
    21ce:	31 05       	cpc	r19, r1
    21d0:	69 f0       	breq	.+26     	; 0x21ec <EF_S8_DIO_ClearPort+0x9e>
    21d2:	10 c0       	rjmp	.+32     	; 0x21f4 <EF_S8_DIO_ClearPort+0xa6>
	{
	     case 'a':
		 case 'A':
             PORTA = 0x00;
    21d4:	eb e3       	ldi	r30, 0x3B	; 59
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	10 82       	st	Z, r1
    21da:	0e c0       	rjmp	.+28     	; 0x21f8 <EF_S8_DIO_ClearPort+0xaa>
		 break;
		 case 'b':
		 case 'B':
             PORTB = 0x00;
    21dc:	e8 e3       	ldi	r30, 0x38	; 56
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	10 82       	st	Z, r1
    21e2:	0a c0       	rjmp	.+20     	; 0x21f8 <EF_S8_DIO_ClearPort+0xaa>
		 break;
		 case 'c':
		 case 'C':
             PORTC = 0x00;
    21e4:	e5 e3       	ldi	r30, 0x35	; 53
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	10 82       	st	Z, r1
    21ea:	06 c0       	rjmp	.+12     	; 0x21f8 <EF_S8_DIO_ClearPort+0xaa>
		 break;
		 case 'd':
		 case 'D':
             PORTD = 0x00;
    21ec:	e2 e3       	ldi	r30, 0x32	; 50
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	10 82       	st	Z, r1
    21f2:	02 c0       	rjmp	.+4      	; 0x21f8 <EF_S8_DIO_ClearPort+0xaa>
		 break;
		 default:
             Status = -1;
    21f4:	8f ef       	ldi	r24, 0xFF	; 255
    21f6:	89 83       	std	Y+1, r24	; 0x01
    }

    return(Status);
    21f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    21fa:	0f 90       	pop	r0
    21fc:	0f 90       	pop	r0
    21fe:	0f 90       	pop	r0
    2200:	0f 90       	pop	r0
    2202:	cf 91       	pop	r28
    2204:	df 91       	pop	r29
    2206:	08 95       	ret

00002208 <EF_S8_DIO_TogglePin>:
*
* Return Value: The function will return -1 if user enter wrong inputs.
*               or return 1 if OK.  
***********************************************************************/
s8  EF_S8_DIO_TogglePin(u8 PortName, u8 PinNumber)
{
    2208:	df 93       	push	r29
    220a:	cf 93       	push	r28
    220c:	00 d0       	rcall	.+0      	; 0x220e <EF_S8_DIO_TogglePin+0x6>
    220e:	00 d0       	rcall	.+0      	; 0x2210 <EF_S8_DIO_TogglePin+0x8>
    2210:	0f 92       	push	r0
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
    2216:	8a 83       	std	Y+2, r24	; 0x02
    2218:	6b 83       	std	Y+3, r22	; 0x03
    s8 Status;
    
    if(PinNumber > 7)
    221a:	8b 81       	ldd	r24, Y+3	; 0x03
    221c:	88 30       	cpi	r24, 0x08	; 8
    221e:	18 f0       	brcs	.+6      	; 0x2226 <EF_S8_DIO_TogglePin+0x1e>
	{
	    Status = -1;
    2220:	8f ef       	ldi	r24, 0xFF	; 255
    2222:	89 83       	std	Y+1, r24	; 0x01
    2224:	90 c0       	rjmp	.+288    	; 0x2346 <EF_S8_DIO_TogglePin+0x13e>
    }
	else
	{
	    Status = 1;
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	89 83       	std	Y+1, r24	; 0x01
		switch(PortName)
    222a:	8a 81       	ldd	r24, Y+2	; 0x02
    222c:	28 2f       	mov	r18, r24
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	3d 83       	std	Y+5, r19	; 0x05
    2232:	2c 83       	std	Y+4, r18	; 0x04
    2234:	8c 81       	ldd	r24, Y+4	; 0x04
    2236:	9d 81       	ldd	r25, Y+5	; 0x05
    2238:	84 34       	cpi	r24, 0x44	; 68
    223a:	91 05       	cpc	r25, r1
    223c:	09 f4       	brne	.+2      	; 0x2240 <EF_S8_DIO_TogglePin+0x38>
    223e:	6d c0       	rjmp	.+218    	; 0x231a <EF_S8_DIO_TogglePin+0x112>
    2240:	2c 81       	ldd	r18, Y+4	; 0x04
    2242:	3d 81       	ldd	r19, Y+5	; 0x05
    2244:	25 34       	cpi	r18, 0x45	; 69
    2246:	31 05       	cpc	r19, r1
    2248:	8c f4       	brge	.+34     	; 0x226c <EF_S8_DIO_TogglePin+0x64>
    224a:	8c 81       	ldd	r24, Y+4	; 0x04
    224c:	9d 81       	ldd	r25, Y+5	; 0x05
    224e:	82 34       	cpi	r24, 0x42	; 66
    2250:	91 05       	cpc	r25, r1
    2252:	d9 f1       	breq	.+118    	; 0x22ca <EF_S8_DIO_TogglePin+0xc2>
    2254:	2c 81       	ldd	r18, Y+4	; 0x04
    2256:	3d 81       	ldd	r19, Y+5	; 0x05
    2258:	23 34       	cpi	r18, 0x43	; 67
    225a:	31 05       	cpc	r19, r1
    225c:	0c f0       	brlt	.+2      	; 0x2260 <EF_S8_DIO_TogglePin+0x58>
    225e:	49 c0       	rjmp	.+146    	; 0x22f2 <EF_S8_DIO_TogglePin+0xea>
    2260:	8c 81       	ldd	r24, Y+4	; 0x04
    2262:	9d 81       	ldd	r25, Y+5	; 0x05
    2264:	81 34       	cpi	r24, 0x41	; 65
    2266:	91 05       	cpc	r25, r1
    2268:	e1 f0       	breq	.+56     	; 0x22a2 <EF_S8_DIO_TogglePin+0x9a>
    226a:	6b c0       	rjmp	.+214    	; 0x2342 <EF_S8_DIO_TogglePin+0x13a>
    226c:	2c 81       	ldd	r18, Y+4	; 0x04
    226e:	3d 81       	ldd	r19, Y+5	; 0x05
    2270:	22 36       	cpi	r18, 0x62	; 98
    2272:	31 05       	cpc	r19, r1
    2274:	51 f1       	breq	.+84     	; 0x22ca <EF_S8_DIO_TogglePin+0xc2>
    2276:	8c 81       	ldd	r24, Y+4	; 0x04
    2278:	9d 81       	ldd	r25, Y+5	; 0x05
    227a:	83 36       	cpi	r24, 0x63	; 99
    227c:	91 05       	cpc	r25, r1
    227e:	34 f4       	brge	.+12     	; 0x228c <EF_S8_DIO_TogglePin+0x84>
    2280:	2c 81       	ldd	r18, Y+4	; 0x04
    2282:	3d 81       	ldd	r19, Y+5	; 0x05
    2284:	21 36       	cpi	r18, 0x61	; 97
    2286:	31 05       	cpc	r19, r1
    2288:	61 f0       	breq	.+24     	; 0x22a2 <EF_S8_DIO_TogglePin+0x9a>
    228a:	5b c0       	rjmp	.+182    	; 0x2342 <EF_S8_DIO_TogglePin+0x13a>
    228c:	8c 81       	ldd	r24, Y+4	; 0x04
    228e:	9d 81       	ldd	r25, Y+5	; 0x05
    2290:	83 36       	cpi	r24, 0x63	; 99
    2292:	91 05       	cpc	r25, r1
    2294:	71 f1       	breq	.+92     	; 0x22f2 <EF_S8_DIO_TogglePin+0xea>
    2296:	2c 81       	ldd	r18, Y+4	; 0x04
    2298:	3d 81       	ldd	r19, Y+5	; 0x05
    229a:	24 36       	cpi	r18, 0x64	; 100
    229c:	31 05       	cpc	r19, r1
    229e:	e9 f1       	breq	.+122    	; 0x231a <EF_S8_DIO_TogglePin+0x112>
    22a0:	50 c0       	rjmp	.+160    	; 0x2342 <EF_S8_DIO_TogglePin+0x13a>
		{
		     case 'a':
			 case 'A':
	             PORTA ^= (1 << PinNumber);
    22a2:	ab e3       	ldi	r26, 0x3B	; 59
    22a4:	b0 e0       	ldi	r27, 0x00	; 0
    22a6:	eb e3       	ldi	r30, 0x3B	; 59
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	48 2f       	mov	r20, r24
    22ae:	8b 81       	ldd	r24, Y+3	; 0x03
    22b0:	28 2f       	mov	r18, r24
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	02 2e       	mov	r0, r18
    22ba:	02 c0       	rjmp	.+4      	; 0x22c0 <EF_S8_DIO_TogglePin+0xb8>
    22bc:	88 0f       	add	r24, r24
    22be:	99 1f       	adc	r25, r25
    22c0:	0a 94       	dec	r0
    22c2:	e2 f7       	brpl	.-8      	; 0x22bc <EF_S8_DIO_TogglePin+0xb4>
    22c4:	84 27       	eor	r24, r20
    22c6:	8c 93       	st	X, r24
    22c8:	3e c0       	rjmp	.+124    	; 0x2346 <EF_S8_DIO_TogglePin+0x13e>
			 break;
			 case 'b':
			 case 'B':
	             PORTB ^= (1 << PinNumber);
    22ca:	a8 e3       	ldi	r26, 0x38	; 56
    22cc:	b0 e0       	ldi	r27, 0x00	; 0
    22ce:	e8 e3       	ldi	r30, 0x38	; 56
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	80 81       	ld	r24, Z
    22d4:	48 2f       	mov	r20, r24
    22d6:	8b 81       	ldd	r24, Y+3	; 0x03
    22d8:	28 2f       	mov	r18, r24
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	02 2e       	mov	r0, r18
    22e2:	02 c0       	rjmp	.+4      	; 0x22e8 <EF_S8_DIO_TogglePin+0xe0>
    22e4:	88 0f       	add	r24, r24
    22e6:	99 1f       	adc	r25, r25
    22e8:	0a 94       	dec	r0
    22ea:	e2 f7       	brpl	.-8      	; 0x22e4 <EF_S8_DIO_TogglePin+0xdc>
    22ec:	84 27       	eor	r24, r20
    22ee:	8c 93       	st	X, r24
    22f0:	2a c0       	rjmp	.+84     	; 0x2346 <EF_S8_DIO_TogglePin+0x13e>
			 break;
			 case 'c':
			 case 'C':
	             PORTC ^= (1 << PinNumber);
    22f2:	a5 e3       	ldi	r26, 0x35	; 53
    22f4:	b0 e0       	ldi	r27, 0x00	; 0
    22f6:	e5 e3       	ldi	r30, 0x35	; 53
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	80 81       	ld	r24, Z
    22fc:	48 2f       	mov	r20, r24
    22fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2300:	28 2f       	mov	r18, r24
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	02 2e       	mov	r0, r18
    230a:	02 c0       	rjmp	.+4      	; 0x2310 <EF_S8_DIO_TogglePin+0x108>
    230c:	88 0f       	add	r24, r24
    230e:	99 1f       	adc	r25, r25
    2310:	0a 94       	dec	r0
    2312:	e2 f7       	brpl	.-8      	; 0x230c <EF_S8_DIO_TogglePin+0x104>
    2314:	84 27       	eor	r24, r20
    2316:	8c 93       	st	X, r24
    2318:	16 c0       	rjmp	.+44     	; 0x2346 <EF_S8_DIO_TogglePin+0x13e>
			 break;
			 case 'd':
			 case 'D':
	             PORTD ^= (1 << PinNumber);
    231a:	a2 e3       	ldi	r26, 0x32	; 50
    231c:	b0 e0       	ldi	r27, 0x00	; 0
    231e:	e2 e3       	ldi	r30, 0x32	; 50
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	80 81       	ld	r24, Z
    2324:	48 2f       	mov	r20, r24
    2326:	8b 81       	ldd	r24, Y+3	; 0x03
    2328:	28 2f       	mov	r18, r24
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	02 2e       	mov	r0, r18
    2332:	02 c0       	rjmp	.+4      	; 0x2338 <EF_S8_DIO_TogglePin+0x130>
    2334:	88 0f       	add	r24, r24
    2336:	99 1f       	adc	r25, r25
    2338:	0a 94       	dec	r0
    233a:	e2 f7       	brpl	.-8      	; 0x2334 <EF_S8_DIO_TogglePin+0x12c>
    233c:	84 27       	eor	r24, r20
    233e:	8c 93       	st	X, r24
    2340:	02 c0       	rjmp	.+4      	; 0x2346 <EF_S8_DIO_TogglePin+0x13e>
			 break;
			 default:
	             Status = -1;
    2342:	8f ef       	ldi	r24, 0xFF	; 255
    2344:	89 83       	std	Y+1, r24	; 0x01
	    }
    }
    return(Status);
    2346:	89 81       	ldd	r24, Y+1	; 0x01
}
    2348:	0f 90       	pop	r0
    234a:	0f 90       	pop	r0
    234c:	0f 90       	pop	r0
    234e:	0f 90       	pop	r0
    2350:	0f 90       	pop	r0
    2352:	cf 91       	pop	r28
    2354:	df 91       	pop	r29
    2356:	08 95       	ret

00002358 <EF_S8_DIO_CheckPin>:
*
* Return Value: The function will return -1 if user enter wrong inputs.
*               or return 1 if Pin ON and 0 If pin OFF.  
***********************************************************************/
s8  EF_S8_DIO_CheckPin (u8 PortName, u8 PinNumber)
{
    2358:	df 93       	push	r29
    235a:	cf 93       	push	r28
    235c:	00 d0       	rcall	.+0      	; 0x235e <EF_S8_DIO_CheckPin+0x6>
    235e:	00 d0       	rcall	.+0      	; 0x2360 <EF_S8_DIO_CheckPin+0x8>
    2360:	0f 92       	push	r0
    2362:	cd b7       	in	r28, 0x3d	; 61
    2364:	de b7       	in	r29, 0x3e	; 62
    2366:	8a 83       	std	Y+2, r24	; 0x02
    2368:	6b 83       	std	Y+3, r22	; 0x03
    s8 Status = 0;
    236a:	19 82       	std	Y+1, r1	; 0x01
    
    if(PinNumber > 7)
    236c:	8b 81       	ldd	r24, Y+3	; 0x03
    236e:	88 30       	cpi	r24, 0x08	; 8
    2370:	18 f0       	brcs	.+6      	; 0x2378 <EF_S8_DIO_CheckPin+0x20>
	{
	    Status = -1;
    2372:	8f ef       	ldi	r24, 0xFF	; 255
    2374:	89 83       	std	Y+1, r24	; 0x01
    2376:	86 c0       	rjmp	.+268    	; 0x2484 <EF_S8_DIO_CheckPin+0x12c>
    }
	else
	{
		switch(PortName)
    2378:	8a 81       	ldd	r24, Y+2	; 0x02
    237a:	28 2f       	mov	r18, r24
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	3d 83       	std	Y+5, r19	; 0x05
    2380:	2c 83       	std	Y+4, r18	; 0x04
    2382:	8c 81       	ldd	r24, Y+4	; 0x04
    2384:	9d 81       	ldd	r25, Y+5	; 0x05
    2386:	84 34       	cpi	r24, 0x44	; 68
    2388:	91 05       	cpc	r25, r1
    238a:	09 f4       	brne	.+2      	; 0x238e <EF_S8_DIO_CheckPin+0x36>
    238c:	67 c0       	rjmp	.+206    	; 0x245c <EF_S8_DIO_CheckPin+0x104>
    238e:	2c 81       	ldd	r18, Y+4	; 0x04
    2390:	3d 81       	ldd	r19, Y+5	; 0x05
    2392:	25 34       	cpi	r18, 0x45	; 69
    2394:	31 05       	cpc	r19, r1
    2396:	8c f4       	brge	.+34     	; 0x23ba <EF_S8_DIO_CheckPin+0x62>
    2398:	8c 81       	ldd	r24, Y+4	; 0x04
    239a:	9d 81       	ldd	r25, Y+5	; 0x05
    239c:	82 34       	cpi	r24, 0x42	; 66
    239e:	91 05       	cpc	r25, r1
    23a0:	c9 f1       	breq	.+114    	; 0x2414 <EF_S8_DIO_CheckPin+0xbc>
    23a2:	2c 81       	ldd	r18, Y+4	; 0x04
    23a4:	3d 81       	ldd	r19, Y+5	; 0x05
    23a6:	23 34       	cpi	r18, 0x43	; 67
    23a8:	31 05       	cpc	r19, r1
    23aa:	0c f0       	brlt	.+2      	; 0x23ae <EF_S8_DIO_CheckPin+0x56>
    23ac:	45 c0       	rjmp	.+138    	; 0x2438 <EF_S8_DIO_CheckPin+0xe0>
    23ae:	8c 81       	ldd	r24, Y+4	; 0x04
    23b0:	9d 81       	ldd	r25, Y+5	; 0x05
    23b2:	81 34       	cpi	r24, 0x41	; 65
    23b4:	91 05       	cpc	r25, r1
    23b6:	e1 f0       	breq	.+56     	; 0x23f0 <EF_S8_DIO_CheckPin+0x98>
    23b8:	63 c0       	rjmp	.+198    	; 0x2480 <EF_S8_DIO_CheckPin+0x128>
    23ba:	2c 81       	ldd	r18, Y+4	; 0x04
    23bc:	3d 81       	ldd	r19, Y+5	; 0x05
    23be:	22 36       	cpi	r18, 0x62	; 98
    23c0:	31 05       	cpc	r19, r1
    23c2:	41 f1       	breq	.+80     	; 0x2414 <EF_S8_DIO_CheckPin+0xbc>
    23c4:	8c 81       	ldd	r24, Y+4	; 0x04
    23c6:	9d 81       	ldd	r25, Y+5	; 0x05
    23c8:	83 36       	cpi	r24, 0x63	; 99
    23ca:	91 05       	cpc	r25, r1
    23cc:	34 f4       	brge	.+12     	; 0x23da <EF_S8_DIO_CheckPin+0x82>
    23ce:	2c 81       	ldd	r18, Y+4	; 0x04
    23d0:	3d 81       	ldd	r19, Y+5	; 0x05
    23d2:	21 36       	cpi	r18, 0x61	; 97
    23d4:	31 05       	cpc	r19, r1
    23d6:	61 f0       	breq	.+24     	; 0x23f0 <EF_S8_DIO_CheckPin+0x98>
    23d8:	53 c0       	rjmp	.+166    	; 0x2480 <EF_S8_DIO_CheckPin+0x128>
    23da:	8c 81       	ldd	r24, Y+4	; 0x04
    23dc:	9d 81       	ldd	r25, Y+5	; 0x05
    23de:	83 36       	cpi	r24, 0x63	; 99
    23e0:	91 05       	cpc	r25, r1
    23e2:	51 f1       	breq	.+84     	; 0x2438 <EF_S8_DIO_CheckPin+0xe0>
    23e4:	2c 81       	ldd	r18, Y+4	; 0x04
    23e6:	3d 81       	ldd	r19, Y+5	; 0x05
    23e8:	24 36       	cpi	r18, 0x64	; 100
    23ea:	31 05       	cpc	r19, r1
    23ec:	b9 f1       	breq	.+110    	; 0x245c <EF_S8_DIO_CheckPin+0x104>
    23ee:	48 c0       	rjmp	.+144    	; 0x2480 <EF_S8_DIO_CheckPin+0x128>
		{
		     case 'a':
			 case 'A':
	             Status = (PINA & (1 << PinNumber));
    23f0:	e9 e3       	ldi	r30, 0x39	; 57
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	80 81       	ld	r24, Z
    23f6:	48 2f       	mov	r20, r24
    23f8:	8b 81       	ldd	r24, Y+3	; 0x03
    23fa:	28 2f       	mov	r18, r24
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	02 2e       	mov	r0, r18
    2404:	02 c0       	rjmp	.+4      	; 0x240a <EF_S8_DIO_CheckPin+0xb2>
    2406:	88 0f       	add	r24, r24
    2408:	99 1f       	adc	r25, r25
    240a:	0a 94       	dec	r0
    240c:	e2 f7       	brpl	.-8      	; 0x2406 <EF_S8_DIO_CheckPin+0xae>
    240e:	84 23       	and	r24, r20
    2410:	89 83       	std	Y+1, r24	; 0x01
    2412:	38 c0       	rjmp	.+112    	; 0x2484 <EF_S8_DIO_CheckPin+0x12c>
			 break;
			 case 'b':
			 case 'B':
	             Status = (PINB & (1 << PinNumber));
    2414:	e6 e3       	ldi	r30, 0x36	; 54
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	80 81       	ld	r24, Z
    241a:	48 2f       	mov	r20, r24
    241c:	8b 81       	ldd	r24, Y+3	; 0x03
    241e:	28 2f       	mov	r18, r24
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	02 2e       	mov	r0, r18
    2428:	02 c0       	rjmp	.+4      	; 0x242e <EF_S8_DIO_CheckPin+0xd6>
    242a:	88 0f       	add	r24, r24
    242c:	99 1f       	adc	r25, r25
    242e:	0a 94       	dec	r0
    2430:	e2 f7       	brpl	.-8      	; 0x242a <EF_S8_DIO_CheckPin+0xd2>
    2432:	84 23       	and	r24, r20
    2434:	89 83       	std	Y+1, r24	; 0x01
    2436:	26 c0       	rjmp	.+76     	; 0x2484 <EF_S8_DIO_CheckPin+0x12c>
			 break;
			 case 'c':
			 case 'C':
	             Status = (PINC & (1 << PinNumber));
    2438:	e3 e3       	ldi	r30, 0x33	; 51
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	80 81       	ld	r24, Z
    243e:	48 2f       	mov	r20, r24
    2440:	8b 81       	ldd	r24, Y+3	; 0x03
    2442:	28 2f       	mov	r18, r24
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	02 2e       	mov	r0, r18
    244c:	02 c0       	rjmp	.+4      	; 0x2452 <EF_S8_DIO_CheckPin+0xfa>
    244e:	88 0f       	add	r24, r24
    2450:	99 1f       	adc	r25, r25
    2452:	0a 94       	dec	r0
    2454:	e2 f7       	brpl	.-8      	; 0x244e <EF_S8_DIO_CheckPin+0xf6>
    2456:	84 23       	and	r24, r20
    2458:	89 83       	std	Y+1, r24	; 0x01
    245a:	14 c0       	rjmp	.+40     	; 0x2484 <EF_S8_DIO_CheckPin+0x12c>
			 break;
			 case 'd':
			 case 'D':
	             Status = (PIND & (1 << PinNumber));
    245c:	e0 e3       	ldi	r30, 0x30	; 48
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	80 81       	ld	r24, Z
    2462:	48 2f       	mov	r20, r24
    2464:	8b 81       	ldd	r24, Y+3	; 0x03
    2466:	28 2f       	mov	r18, r24
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	02 2e       	mov	r0, r18
    2470:	02 c0       	rjmp	.+4      	; 0x2476 <EF_S8_DIO_CheckPin+0x11e>
    2472:	88 0f       	add	r24, r24
    2474:	99 1f       	adc	r25, r25
    2476:	0a 94       	dec	r0
    2478:	e2 f7       	brpl	.-8      	; 0x2472 <EF_S8_DIO_CheckPin+0x11a>
    247a:	84 23       	and	r24, r20
    247c:	89 83       	std	Y+1, r24	; 0x01
    247e:	02 c0       	rjmp	.+4      	; 0x2484 <EF_S8_DIO_CheckPin+0x12c>
			 break;
			 default:
	             Status = -1;
    2480:	8f ef       	ldi	r24, 0xFF	; 255
    2482:	89 83       	std	Y+1, r24	; 0x01
	    }
    }
    return(Status);
    2484:	89 81       	ldd	r24, Y+1	; 0x01
}
    2486:	0f 90       	pop	r0
    2488:	0f 90       	pop	r0
    248a:	0f 90       	pop	r0
    248c:	0f 90       	pop	r0
    248e:	0f 90       	pop	r0
    2490:	cf 91       	pop	r28
    2492:	df 91       	pop	r29
    2494:	08 95       	ret

00002496 <EF_void_LCD_init>:
 * PARAMETERS  : Void.
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_init()
{
    2496:	df 93       	push	r29
    2498:	cf 93       	push	r28
    249a:	cd b7       	in	r28, 0x3d	; 61
    249c:	de b7       	in	r29, 0x3e	; 62
    249e:	6c 97       	sbiw	r28, 0x1c	; 28
    24a0:	0f b6       	in	r0, 0x3f	; 63
    24a2:	f8 94       	cli
    24a4:	de bf       	out	0x3e, r29	; 62
    24a6:	0f be       	out	0x3f, r0	; 63
    24a8:	cd bf       	out	0x3d, r28	; 61
	/* Init Control PIN as Output */
	LCD_CNTRL_DDR |= (1 << LCD_RS_PIN | 1 << LCD_RW_PIN | 1 << LCD_ENABLE_PIN);
    24aa:	a4 e3       	ldi	r26, 0x34	; 52
    24ac:	b0 e0       	ldi	r27, 0x00	; 0
    24ae:	e4 e3       	ldi	r30, 0x34	; 52
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	80 81       	ld	r24, Z
    24b4:	80 6e       	ori	r24, 0xE0	; 224
    24b6:	8c 93       	st	X, r24
	LCD_CNTRL_PORT = 0x00;
    24b8:	e5 e3       	ldi	r30, 0x35	; 53
    24ba:	f0 e0       	ldi	r31, 0x00	; 0
    24bc:	10 82       	st	Z, r1

	/* Init Data PIN as Output 4,5,6,7 */
	LCD_DATA_DDR  |= 0xF0;
    24be:	a7 e3       	ldi	r26, 0x37	; 55
    24c0:	b0 e0       	ldi	r27, 0x00	; 0
    24c2:	e7 e3       	ldi	r30, 0x37	; 55
    24c4:	f0 e0       	ldi	r31, 0x00	; 0
    24c6:	80 81       	ld	r24, Z
    24c8:	80 6f       	ori	r24, 0xF0	; 240
    24ca:	8c 93       	st	X, r24
	LCD_DATA_PORT |= 0x00;
    24cc:	a8 e3       	ldi	r26, 0x38	; 56
    24ce:	b0 e0       	ldi	r27, 0x00	; 0
    24d0:	e8 e3       	ldi	r30, 0x38	; 56
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	80 81       	ld	r24, Z
    24d6:	8c 93       	st	X, r24
    24d8:	80 e0       	ldi	r24, 0x00	; 0
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	a0 e2       	ldi	r26, 0x20	; 32
    24de:	b1 e4       	ldi	r27, 0x41	; 65
    24e0:	89 8f       	std	Y+25, r24	; 0x19
    24e2:	9a 8f       	std	Y+26, r25	; 0x1a
    24e4:	ab 8f       	std	Y+27, r26	; 0x1b
    24e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e8:	69 8d       	ldd	r22, Y+25	; 0x19
    24ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	4a e7       	ldi	r20, 0x7A	; 122
    24f6:	55 e4       	ldi	r21, 0x45	; 69
    24f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fc:	dc 01       	movw	r26, r24
    24fe:	cb 01       	movw	r24, r22
    2500:	8d 8b       	std	Y+21, r24	; 0x15
    2502:	9e 8b       	std	Y+22, r25	; 0x16
    2504:	af 8b       	std	Y+23, r26	; 0x17
    2506:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2508:	6d 89       	ldd	r22, Y+21	; 0x15
    250a:	7e 89       	ldd	r23, Y+22	; 0x16
    250c:	8f 89       	ldd	r24, Y+23	; 0x17
    250e:	98 8d       	ldd	r25, Y+24	; 0x18
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	40 e8       	ldi	r20, 0x80	; 128
    2516:	5f e3       	ldi	r21, 0x3F	; 63
    2518:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    251c:	88 23       	and	r24, r24
    251e:	2c f4       	brge	.+10     	; 0x252a <EF_void_LCD_init+0x94>
		__ticks = 1;
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	9c 8b       	std	Y+20, r25	; 0x14
    2526:	8b 8b       	std	Y+19, r24	; 0x13
    2528:	3f c0       	rjmp	.+126    	; 0x25a8 <EF_void_LCD_init+0x112>
	else if (__tmp > 65535)
    252a:	6d 89       	ldd	r22, Y+21	; 0x15
    252c:	7e 89       	ldd	r23, Y+22	; 0x16
    252e:	8f 89       	ldd	r24, Y+23	; 0x17
    2530:	98 8d       	ldd	r25, Y+24	; 0x18
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	3f ef       	ldi	r19, 0xFF	; 255
    2536:	4f e7       	ldi	r20, 0x7F	; 127
    2538:	57 e4       	ldi	r21, 0x47	; 71
    253a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    253e:	18 16       	cp	r1, r24
    2540:	4c f5       	brge	.+82     	; 0x2594 <EF_void_LCD_init+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2542:	69 8d       	ldd	r22, Y+25	; 0x19
    2544:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2546:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2548:	9c 8d       	ldd	r25, Y+28	; 0x1c
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	40 e2       	ldi	r20, 0x20	; 32
    2550:	51 e4       	ldi	r21, 0x41	; 65
    2552:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2556:	dc 01       	movw	r26, r24
    2558:	cb 01       	movw	r24, r22
    255a:	bc 01       	movw	r22, r24
    255c:	cd 01       	movw	r24, r26
    255e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2562:	dc 01       	movw	r26, r24
    2564:	cb 01       	movw	r24, r22
    2566:	9c 8b       	std	Y+20, r25	; 0x14
    2568:	8b 8b       	std	Y+19, r24	; 0x13
    256a:	0f c0       	rjmp	.+30     	; 0x258a <EF_void_LCD_init+0xf4>
    256c:	80 e9       	ldi	r24, 0x90	; 144
    256e:	91 e0       	ldi	r25, 0x01	; 1
    2570:	9a 8b       	std	Y+18, r25	; 0x12
    2572:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2574:	89 89       	ldd	r24, Y+17	; 0x11
    2576:	9a 89       	ldd	r25, Y+18	; 0x12
    2578:	01 97       	sbiw	r24, 0x01	; 1
    257a:	f1 f7       	brne	.-4      	; 0x2578 <EF_void_LCD_init+0xe2>
    257c:	9a 8b       	std	Y+18, r25	; 0x12
    257e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2580:	8b 89       	ldd	r24, Y+19	; 0x13
    2582:	9c 89       	ldd	r25, Y+20	; 0x14
    2584:	01 97       	sbiw	r24, 0x01	; 1
    2586:	9c 8b       	std	Y+20, r25	; 0x14
    2588:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    258a:	8b 89       	ldd	r24, Y+19	; 0x13
    258c:	9c 89       	ldd	r25, Y+20	; 0x14
    258e:	00 97       	sbiw	r24, 0x00	; 0
    2590:	69 f7       	brne	.-38     	; 0x256c <EF_void_LCD_init+0xd6>
    2592:	14 c0       	rjmp	.+40     	; 0x25bc <EF_void_LCD_init+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2594:	6d 89       	ldd	r22, Y+21	; 0x15
    2596:	7e 89       	ldd	r23, Y+22	; 0x16
    2598:	8f 89       	ldd	r24, Y+23	; 0x17
    259a:	98 8d       	ldd	r25, Y+24	; 0x18
    259c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a0:	dc 01       	movw	r26, r24
    25a2:	cb 01       	movw	r24, r22
    25a4:	9c 8b       	std	Y+20, r25	; 0x14
    25a6:	8b 8b       	std	Y+19, r24	; 0x13
    25a8:	8b 89       	ldd	r24, Y+19	; 0x13
    25aa:	9c 89       	ldd	r25, Y+20	; 0x14
    25ac:	98 8b       	std	Y+16, r25	; 0x10
    25ae:	8f 87       	std	Y+15, r24	; 0x0f
    25b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    25b2:	98 89       	ldd	r25, Y+16	; 0x10
    25b4:	01 97       	sbiw	r24, 0x01	; 1
    25b6:	f1 f7       	brne	.-4      	; 0x25b4 <EF_void_LCD_init+0x11e>
    25b8:	98 8b       	std	Y+16, r25	; 0x10
    25ba:	8f 87       	std	Y+15, r24	; 0x0f
	/* after power up , delay 10ms should be existed */
	_delay_ms(10);
	EF_void_LCD_send_command(0x28);            /* Command ..0x28---> 4-bit mode - 2 line - 5x7 font */
    25bc:	88 e2       	ldi	r24, 0x28	; 40
    25be:	0e 94 65 13 	call	0x26ca	; 0x26ca <EF_void_LCD_send_command>
	EF_void_LCD_send_command(0x0C);            /* Command ..0x0C---> Display no cursor - no blink */
    25c2:	8c e0       	ldi	r24, 0x0C	; 12
    25c4:	0e 94 65 13 	call	0x26ca	; 0x26ca <EF_void_LCD_send_command>
	EF_void_LCD_send_command(0x06);            /* Command ..0x06---> Automatic Increment - No Display shift */
    25c8:	86 e0       	ldi	r24, 0x06	; 6
    25ca:	0e 94 65 13 	call	0x26ca	; 0x26ca <EF_void_LCD_send_command>
	EF_void_LCD_send_command(0x80);            /* Command ..0x80---> Address DDRAM with 0 offset 80h */
    25ce:	80 e8       	ldi	r24, 0x80	; 128
    25d0:	0e 94 65 13 	call	0x26ca	; 0x26ca <EF_void_LCD_send_command>
    25d4:	80 e0       	ldi	r24, 0x00	; 0
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	a0 ea       	ldi	r26, 0xA0	; 160
    25da:	b1 e4       	ldi	r27, 0x41	; 65
    25dc:	8b 87       	std	Y+11, r24	; 0x0b
    25de:	9c 87       	std	Y+12, r25	; 0x0c
    25e0:	ad 87       	std	Y+13, r26	; 0x0d
    25e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    25e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    25e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	4a e7       	ldi	r20, 0x7A	; 122
    25f2:	55 e4       	ldi	r21, 0x45	; 69
    25f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f8:	dc 01       	movw	r26, r24
    25fa:	cb 01       	movw	r24, r22
    25fc:	8f 83       	std	Y+7, r24	; 0x07
    25fe:	98 87       	std	Y+8, r25	; 0x08
    2600:	a9 87       	std	Y+9, r26	; 0x09
    2602:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2604:	6f 81       	ldd	r22, Y+7	; 0x07
    2606:	78 85       	ldd	r23, Y+8	; 0x08
    2608:	89 85       	ldd	r24, Y+9	; 0x09
    260a:	9a 85       	ldd	r25, Y+10	; 0x0a
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	40 e8       	ldi	r20, 0x80	; 128
    2612:	5f e3       	ldi	r21, 0x3F	; 63
    2614:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2618:	88 23       	and	r24, r24
    261a:	2c f4       	brge	.+10     	; 0x2626 <EF_void_LCD_init+0x190>
		__ticks = 1;
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	9e 83       	std	Y+6, r25	; 0x06
    2622:	8d 83       	std	Y+5, r24	; 0x05
    2624:	3f c0       	rjmp	.+126    	; 0x26a4 <EF_void_LCD_init+0x20e>
	else if (__tmp > 65535)
    2626:	6f 81       	ldd	r22, Y+7	; 0x07
    2628:	78 85       	ldd	r23, Y+8	; 0x08
    262a:	89 85       	ldd	r24, Y+9	; 0x09
    262c:	9a 85       	ldd	r25, Y+10	; 0x0a
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	3f ef       	ldi	r19, 0xFF	; 255
    2632:	4f e7       	ldi	r20, 0x7F	; 127
    2634:	57 e4       	ldi	r21, 0x47	; 71
    2636:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    263a:	18 16       	cp	r1, r24
    263c:	4c f5       	brge	.+82     	; 0x2690 <EF_void_LCD_init+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    263e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2640:	7c 85       	ldd	r23, Y+12	; 0x0c
    2642:	8d 85       	ldd	r24, Y+13	; 0x0d
    2644:	9e 85       	ldd	r25, Y+14	; 0x0e
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	40 e2       	ldi	r20, 0x20	; 32
    264c:	51 e4       	ldi	r21, 0x41	; 65
    264e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2652:	dc 01       	movw	r26, r24
    2654:	cb 01       	movw	r24, r22
    2656:	bc 01       	movw	r22, r24
    2658:	cd 01       	movw	r24, r26
    265a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265e:	dc 01       	movw	r26, r24
    2660:	cb 01       	movw	r24, r22
    2662:	9e 83       	std	Y+6, r25	; 0x06
    2664:	8d 83       	std	Y+5, r24	; 0x05
    2666:	0f c0       	rjmp	.+30     	; 0x2686 <EF_void_LCD_init+0x1f0>
    2668:	80 e9       	ldi	r24, 0x90	; 144
    266a:	91 e0       	ldi	r25, 0x01	; 1
    266c:	9c 83       	std	Y+4, r25	; 0x04
    266e:	8b 83       	std	Y+3, r24	; 0x03
    2670:	8b 81       	ldd	r24, Y+3	; 0x03
    2672:	9c 81       	ldd	r25, Y+4	; 0x04
    2674:	01 97       	sbiw	r24, 0x01	; 1
    2676:	f1 f7       	brne	.-4      	; 0x2674 <EF_void_LCD_init+0x1de>
    2678:	9c 83       	std	Y+4, r25	; 0x04
    267a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    267c:	8d 81       	ldd	r24, Y+5	; 0x05
    267e:	9e 81       	ldd	r25, Y+6	; 0x06
    2680:	01 97       	sbiw	r24, 0x01	; 1
    2682:	9e 83       	std	Y+6, r25	; 0x06
    2684:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2686:	8d 81       	ldd	r24, Y+5	; 0x05
    2688:	9e 81       	ldd	r25, Y+6	; 0x06
    268a:	00 97       	sbiw	r24, 0x00	; 0
    268c:	69 f7       	brne	.-38     	; 0x2668 <EF_void_LCD_init+0x1d2>
    268e:	14 c0       	rjmp	.+40     	; 0x26b8 <EF_void_LCD_init+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2690:	6f 81       	ldd	r22, Y+7	; 0x07
    2692:	78 85       	ldd	r23, Y+8	; 0x08
    2694:	89 85       	ldd	r24, Y+9	; 0x09
    2696:	9a 85       	ldd	r25, Y+10	; 0x0a
    2698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	9e 83       	std	Y+6, r25	; 0x06
    26a2:	8d 83       	std	Y+5, r24	; 0x05
    26a4:	8d 81       	ldd	r24, Y+5	; 0x05
    26a6:	9e 81       	ldd	r25, Y+6	; 0x06
    26a8:	9a 83       	std	Y+2, r25	; 0x02
    26aa:	89 83       	std	Y+1, r24	; 0x01
    26ac:	89 81       	ldd	r24, Y+1	; 0x01
    26ae:	9a 81       	ldd	r25, Y+2	; 0x02
    26b0:	01 97       	sbiw	r24, 0x01	; 1
    26b2:	f1 f7       	brne	.-4      	; 0x26b0 <EF_void_LCD_init+0x21a>
    26b4:	9a 83       	std	Y+2, r25	; 0x02
    26b6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    26b8:	6c 96       	adiw	r28, 0x1c	; 28
    26ba:	0f b6       	in	r0, 0x3f	; 63
    26bc:	f8 94       	cli
    26be:	de bf       	out	0x3e, r29	; 62
    26c0:	0f be       	out	0x3f, r0	; 63
    26c2:	cd bf       	out	0x3d, r28	; 61
    26c4:	cf 91       	pop	r28
    26c6:	df 91       	pop	r29
    26c8:	08 95       	ret

000026ca <EF_void_LCD_send_command>:
 * PARAMETERS  : u8 cmnd:  Command User want to send.
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_send_command(u8 cmnd)
{
    26ca:	0f 93       	push	r16
    26cc:	1f 93       	push	r17
    26ce:	df 93       	push	r29
    26d0:	cf 93       	push	r28
    26d2:	cd b7       	in	r28, 0x3d	; 61
    26d4:	de b7       	in	r29, 0x3e	; 62
    26d6:	c9 54       	subi	r28, 0x49	; 73
    26d8:	d0 40       	sbci	r29, 0x00	; 0
    26da:	0f b6       	in	r0, 0x3f	; 63
    26dc:	f8 94       	cli
    26de:	de bf       	out	0x3e, r29	; 62
    26e0:	0f be       	out	0x3f, r0	; 63
    26e2:	cd bf       	out	0x3d, r28	; 61
    26e4:	fe 01       	movw	r30, r28
    26e6:	e7 5b       	subi	r30, 0xB7	; 183
    26e8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ea:	80 83       	st	Z, r24
	/*RS and RW will be LOW */
	LCD_CNTRL_PORT &= ~(1<<LCD_RW_PIN);
    26ec:	a5 e3       	ldi	r26, 0x35	; 53
    26ee:	b0 e0       	ldi	r27, 0x00	; 0
    26f0:	e5 e3       	ldi	r30, 0x35	; 53
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	80 81       	ld	r24, Z
    26f6:	8f 7b       	andi	r24, 0xBF	; 191
    26f8:	8c 93       	st	X, r24
	LCD_CNTRL_PORT &= ~(1<<LCD_RS_PIN);
    26fa:	a5 e3       	ldi	r26, 0x35	; 53
    26fc:	b0 e0       	ldi	r27, 0x00	; 0
    26fe:	e5 e3       	ldi	r30, 0x35	; 53
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	80 81       	ld	r24, Z
    2704:	8f 7d       	andi	r24, 0xDF	; 223
    2706:	8c 93       	st	X, r24
	/*
	 * output high nibble first , "Generic method", attach data by bit
	 * first: put 0 in each pin then if the corresponding bit =1 , put 1
	 * -------- output high nibble first ---------*
	 * * */
	LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
    2708:	a8 e3       	ldi	r26, 0x38	; 56
    270a:	b0 e0       	ldi	r27, 0x00	; 0
    270c:	e8 e3       	ldi	r30, 0x38	; 56
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	80 81       	ld	r24, Z
    2712:	8f 77       	andi	r24, 0x7F	; 127
    2714:	8c 93       	st	X, r24
	LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
    2716:	a8 e3       	ldi	r26, 0x38	; 56
    2718:	b0 e0       	ldi	r27, 0x00	; 0
    271a:	e8 e3       	ldi	r30, 0x38	; 56
    271c:	f0 e0       	ldi	r31, 0x00	; 0
    271e:	80 81       	ld	r24, Z
    2720:	8f 7b       	andi	r24, 0xBF	; 191
    2722:	8c 93       	st	X, r24
	LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
    2724:	a8 e3       	ldi	r26, 0x38	; 56
    2726:	b0 e0       	ldi	r27, 0x00	; 0
    2728:	e8 e3       	ldi	r30, 0x38	; 56
    272a:	f0 e0       	ldi	r31, 0x00	; 0
    272c:	80 81       	ld	r24, Z
    272e:	8f 7d       	andi	r24, 0xDF	; 223
    2730:	8c 93       	st	X, r24
	LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
    2732:	a8 e3       	ldi	r26, 0x38	; 56
    2734:	b0 e0       	ldi	r27, 0x00	; 0
    2736:	e8 e3       	ldi	r30, 0x38	; 56
    2738:	f0 e0       	ldi	r31, 0x00	; 0
    273a:	80 81       	ld	r24, Z
    273c:	8f 7e       	andi	r24, 0xEF	; 239
    273e:	8c 93       	st	X, r24
	if(cmnd & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    2740:	fe 01       	movw	r30, r28
    2742:	e7 5b       	subi	r30, 0xB7	; 183
    2744:	ff 4f       	sbci	r31, 0xFF	; 255
    2746:	80 81       	ld	r24, Z
    2748:	88 23       	and	r24, r24
    274a:	3c f4       	brge	.+14     	; 0x275a <EF_void_LCD_send_command+0x90>
    274c:	a8 e3       	ldi	r26, 0x38	; 56
    274e:	b0 e0       	ldi	r27, 0x00	; 0
    2750:	e8 e3       	ldi	r30, 0x38	; 56
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	80 81       	ld	r24, Z
    2756:	80 68       	ori	r24, 0x80	; 128
    2758:	8c 93       	st	X, r24
	if(cmnd & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
    275a:	fe 01       	movw	r30, r28
    275c:	e7 5b       	subi	r30, 0xB7	; 183
    275e:	ff 4f       	sbci	r31, 0xFF	; 255
    2760:	80 81       	ld	r24, Z
    2762:	88 2f       	mov	r24, r24
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	80 74       	andi	r24, 0x40	; 64
    2768:	90 70       	andi	r25, 0x00	; 0
    276a:	00 97       	sbiw	r24, 0x00	; 0
    276c:	39 f0       	breq	.+14     	; 0x277c <EF_void_LCD_send_command+0xb2>
    276e:	a8 e3       	ldi	r26, 0x38	; 56
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	e8 e3       	ldi	r30, 0x38	; 56
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	80 81       	ld	r24, Z
    2778:	80 64       	ori	r24, 0x40	; 64
    277a:	8c 93       	st	X, r24
	if(cmnd & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    277c:	fe 01       	movw	r30, r28
    277e:	e7 5b       	subi	r30, 0xB7	; 183
    2780:	ff 4f       	sbci	r31, 0xFF	; 255
    2782:	80 81       	ld	r24, Z
    2784:	88 2f       	mov	r24, r24
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	80 72       	andi	r24, 0x20	; 32
    278a:	90 70       	andi	r25, 0x00	; 0
    278c:	00 97       	sbiw	r24, 0x00	; 0
    278e:	39 f0       	breq	.+14     	; 0x279e <EF_void_LCD_send_command+0xd4>
    2790:	a8 e3       	ldi	r26, 0x38	; 56
    2792:	b0 e0       	ldi	r27, 0x00	; 0
    2794:	e8 e3       	ldi	r30, 0x38	; 56
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	80 81       	ld	r24, Z
    279a:	80 62       	ori	r24, 0x20	; 32
    279c:	8c 93       	st	X, r24
	if(cmnd & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
    279e:	fe 01       	movw	r30, r28
    27a0:	e7 5b       	subi	r30, 0xB7	; 183
    27a2:	ff 4f       	sbci	r31, 0xFF	; 255
    27a4:	80 81       	ld	r24, Z
    27a6:	88 2f       	mov	r24, r24
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	80 71       	andi	r24, 0x10	; 16
    27ac:	90 70       	andi	r25, 0x00	; 0
    27ae:	00 97       	sbiw	r24, 0x00	; 0
    27b0:	39 f0       	breq	.+14     	; 0x27c0 <EF_void_LCD_send_command+0xf6>
    27b2:	a8 e3       	ldi	r26, 0x38	; 56
    27b4:	b0 e0       	ldi	r27, 0x00	; 0
    27b6:	e8 e3       	ldi	r30, 0x38	; 56
    27b8:	f0 e0       	ldi	r31, 0x00	; 0
    27ba:	80 81       	ld	r24, Z
    27bc:	80 61       	ori	r24, 0x10	; 16
    27be:	8c 93       	st	X, r24

	/* make Enable High to low with delay to enable the internal latch at the LCD*/
	LCD_CNTRL_PORT |= (1<<LCD_ENABLE_PIN);
    27c0:	a5 e3       	ldi	r26, 0x35	; 53
    27c2:	b0 e0       	ldi	r27, 0x00	; 0
    27c4:	e5 e3       	ldi	r30, 0x35	; 53
    27c6:	f0 e0       	ldi	r31, 0x00	; 0
    27c8:	80 81       	ld	r24, Z
    27ca:	80 68       	ori	r24, 0x80	; 128
    27cc:	8c 93       	st	X, r24
    27ce:	fe 01       	movw	r30, r28
    27d0:	eb 5b       	subi	r30, 0xBB	; 187
    27d2:	ff 4f       	sbci	r31, 0xFF	; 255
    27d4:	80 e0       	ldi	r24, 0x00	; 0
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	a0 e0       	ldi	r26, 0x00	; 0
    27da:	b0 e4       	ldi	r27, 0x40	; 64
    27dc:	80 83       	st	Z, r24
    27de:	91 83       	std	Z+1, r25	; 0x01
    27e0:	a2 83       	std	Z+2, r26	; 0x02
    27e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    27e4:	8e 01       	movw	r16, r28
    27e6:	0f 5b       	subi	r16, 0xBF	; 191
    27e8:	1f 4f       	sbci	r17, 0xFF	; 255
    27ea:	fe 01       	movw	r30, r28
    27ec:	eb 5b       	subi	r30, 0xBB	; 187
    27ee:	ff 4f       	sbci	r31, 0xFF	; 255
    27f0:	60 81       	ld	r22, Z
    27f2:	71 81       	ldd	r23, Z+1	; 0x01
    27f4:	82 81       	ldd	r24, Z+2	; 0x02
    27f6:	93 81       	ldd	r25, Z+3	; 0x03
    27f8:	2b ea       	ldi	r18, 0xAB	; 171
    27fa:	3a ea       	ldi	r19, 0xAA	; 170
    27fc:	4a ea       	ldi	r20, 0xAA	; 170
    27fe:	50 e4       	ldi	r21, 0x40	; 64
    2800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	f8 01       	movw	r30, r16
    280a:	80 83       	st	Z, r24
    280c:	91 83       	std	Z+1, r25	; 0x01
    280e:	a2 83       	std	Z+2, r26	; 0x02
    2810:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2812:	fe 01       	movw	r30, r28
    2814:	ef 5b       	subi	r30, 0xBF	; 191
    2816:	ff 4f       	sbci	r31, 0xFF	; 255
    2818:	60 81       	ld	r22, Z
    281a:	71 81       	ldd	r23, Z+1	; 0x01
    281c:	82 81       	ldd	r24, Z+2	; 0x02
    281e:	93 81       	ldd	r25, Z+3	; 0x03
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	40 e8       	ldi	r20, 0x80	; 128
    2826:	5f e3       	ldi	r21, 0x3F	; 63
    2828:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    282c:	88 23       	and	r24, r24
    282e:	34 f4       	brge	.+12     	; 0x283c <EF_void_LCD_send_command+0x172>
		__ticks = 1;
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	fe 01       	movw	r30, r28
    2834:	e0 5c       	subi	r30, 0xC0	; 192
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	80 83       	st	Z, r24
    283a:	9d c0       	rjmp	.+314    	; 0x2976 <EF_void_LCD_send_command+0x2ac>
	else if (__tmp > 255)
    283c:	fe 01       	movw	r30, r28
    283e:	ef 5b       	subi	r30, 0xBF	; 191
    2840:	ff 4f       	sbci	r31, 0xFF	; 255
    2842:	60 81       	ld	r22, Z
    2844:	71 81       	ldd	r23, Z+1	; 0x01
    2846:	82 81       	ldd	r24, Z+2	; 0x02
    2848:	93 81       	ldd	r25, Z+3	; 0x03
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	4f e7       	ldi	r20, 0x7F	; 127
    2850:	53 e4       	ldi	r21, 0x43	; 67
    2852:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2856:	18 16       	cp	r1, r24
    2858:	0c f0       	brlt	.+2      	; 0x285c <EF_void_LCD_send_command+0x192>
    285a:	7e c0       	rjmp	.+252    	; 0x2958 <EF_void_LCD_send_command+0x28e>
	{
		_delay_ms(__us / 1000.0);
    285c:	fe 01       	movw	r30, r28
    285e:	eb 5b       	subi	r30, 0xBB	; 187
    2860:	ff 4f       	sbci	r31, 0xFF	; 255
    2862:	60 81       	ld	r22, Z
    2864:	71 81       	ldd	r23, Z+1	; 0x01
    2866:	82 81       	ldd	r24, Z+2	; 0x02
    2868:	93 81       	ldd	r25, Z+3	; 0x03
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	4a e7       	ldi	r20, 0x7A	; 122
    2870:	54 e4       	ldi	r21, 0x44	; 68
    2872:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	8c af       	std	Y+60, r24	; 0x3c
    287c:	9d af       	std	Y+61, r25	; 0x3d
    287e:	ae af       	std	Y+62, r26	; 0x3e
    2880:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2882:	6c ad       	ldd	r22, Y+60	; 0x3c
    2884:	7d ad       	ldd	r23, Y+61	; 0x3d
    2886:	8e ad       	ldd	r24, Y+62	; 0x3e
    2888:	9f ad       	ldd	r25, Y+63	; 0x3f
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	4a e7       	ldi	r20, 0x7A	; 122
    2890:	55 e4       	ldi	r21, 0x45	; 69
    2892:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2896:	dc 01       	movw	r26, r24
    2898:	cb 01       	movw	r24, r22
    289a:	88 af       	std	Y+56, r24	; 0x38
    289c:	99 af       	std	Y+57, r25	; 0x39
    289e:	aa af       	std	Y+58, r26	; 0x3a
    28a0:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    28a2:	68 ad       	ldd	r22, Y+56	; 0x38
    28a4:	79 ad       	ldd	r23, Y+57	; 0x39
    28a6:	8a ad       	ldd	r24, Y+58	; 0x3a
    28a8:	9b ad       	ldd	r25, Y+59	; 0x3b
    28aa:	20 e0       	ldi	r18, 0x00	; 0
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	40 e8       	ldi	r20, 0x80	; 128
    28b0:	5f e3       	ldi	r21, 0x3F	; 63
    28b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28b6:	88 23       	and	r24, r24
    28b8:	2c f4       	brge	.+10     	; 0x28c4 <EF_void_LCD_send_command+0x1fa>
		__ticks = 1;
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	9f ab       	std	Y+55, r25	; 0x37
    28c0:	8e ab       	std	Y+54, r24	; 0x36
    28c2:	3f c0       	rjmp	.+126    	; 0x2942 <EF_void_LCD_send_command+0x278>
	else if (__tmp > 65535)
    28c4:	68 ad       	ldd	r22, Y+56	; 0x38
    28c6:	79 ad       	ldd	r23, Y+57	; 0x39
    28c8:	8a ad       	ldd	r24, Y+58	; 0x3a
    28ca:	9b ad       	ldd	r25, Y+59	; 0x3b
    28cc:	20 e0       	ldi	r18, 0x00	; 0
    28ce:	3f ef       	ldi	r19, 0xFF	; 255
    28d0:	4f e7       	ldi	r20, 0x7F	; 127
    28d2:	57 e4       	ldi	r21, 0x47	; 71
    28d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28d8:	18 16       	cp	r1, r24
    28da:	4c f5       	brge	.+82     	; 0x292e <EF_void_LCD_send_command+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28dc:	6c ad       	ldd	r22, Y+60	; 0x3c
    28de:	7d ad       	ldd	r23, Y+61	; 0x3d
    28e0:	8e ad       	ldd	r24, Y+62	; 0x3e
    28e2:	9f ad       	ldd	r25, Y+63	; 0x3f
    28e4:	20 e0       	ldi	r18, 0x00	; 0
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	40 e2       	ldi	r20, 0x20	; 32
    28ea:	51 e4       	ldi	r21, 0x41	; 65
    28ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f0:	dc 01       	movw	r26, r24
    28f2:	cb 01       	movw	r24, r22
    28f4:	bc 01       	movw	r22, r24
    28f6:	cd 01       	movw	r24, r26
    28f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	9f ab       	std	Y+55, r25	; 0x37
    2902:	8e ab       	std	Y+54, r24	; 0x36
    2904:	0f c0       	rjmp	.+30     	; 0x2924 <EF_void_LCD_send_command+0x25a>
    2906:	80 e9       	ldi	r24, 0x90	; 144
    2908:	91 e0       	ldi	r25, 0x01	; 1
    290a:	9d ab       	std	Y+53, r25	; 0x35
    290c:	8c ab       	std	Y+52, r24	; 0x34
    290e:	8c a9       	ldd	r24, Y+52	; 0x34
    2910:	9d a9       	ldd	r25, Y+53	; 0x35
    2912:	01 97       	sbiw	r24, 0x01	; 1
    2914:	f1 f7       	brne	.-4      	; 0x2912 <EF_void_LCD_send_command+0x248>
    2916:	9d ab       	std	Y+53, r25	; 0x35
    2918:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    291a:	8e a9       	ldd	r24, Y+54	; 0x36
    291c:	9f a9       	ldd	r25, Y+55	; 0x37
    291e:	01 97       	sbiw	r24, 0x01	; 1
    2920:	9f ab       	std	Y+55, r25	; 0x37
    2922:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2924:	8e a9       	ldd	r24, Y+54	; 0x36
    2926:	9f a9       	ldd	r25, Y+55	; 0x37
    2928:	00 97       	sbiw	r24, 0x00	; 0
    292a:	69 f7       	brne	.-38     	; 0x2906 <EF_void_LCD_send_command+0x23c>
    292c:	2d c0       	rjmp	.+90     	; 0x2988 <EF_void_LCD_send_command+0x2be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    292e:	68 ad       	ldd	r22, Y+56	; 0x38
    2930:	79 ad       	ldd	r23, Y+57	; 0x39
    2932:	8a ad       	ldd	r24, Y+58	; 0x3a
    2934:	9b ad       	ldd	r25, Y+59	; 0x3b
    2936:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    293a:	dc 01       	movw	r26, r24
    293c:	cb 01       	movw	r24, r22
    293e:	9f ab       	std	Y+55, r25	; 0x37
    2940:	8e ab       	std	Y+54, r24	; 0x36
    2942:	8e a9       	ldd	r24, Y+54	; 0x36
    2944:	9f a9       	ldd	r25, Y+55	; 0x37
    2946:	9b ab       	std	Y+51, r25	; 0x33
    2948:	8a ab       	std	Y+50, r24	; 0x32
    294a:	8a a9       	ldd	r24, Y+50	; 0x32
    294c:	9b a9       	ldd	r25, Y+51	; 0x33
    294e:	01 97       	sbiw	r24, 0x01	; 1
    2950:	f1 f7       	brne	.-4      	; 0x294e <EF_void_LCD_send_command+0x284>
    2952:	9b ab       	std	Y+51, r25	; 0x33
    2954:	8a ab       	std	Y+50, r24	; 0x32
    2956:	18 c0       	rjmp	.+48     	; 0x2988 <EF_void_LCD_send_command+0x2be>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2958:	fe 01       	movw	r30, r28
    295a:	ef 5b       	subi	r30, 0xBF	; 191
    295c:	ff 4f       	sbci	r31, 0xFF	; 255
    295e:	60 81       	ld	r22, Z
    2960:	71 81       	ldd	r23, Z+1	; 0x01
    2962:	82 81       	ldd	r24, Z+2	; 0x02
    2964:	93 81       	ldd	r25, Z+3	; 0x03
    2966:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    296a:	dc 01       	movw	r26, r24
    296c:	cb 01       	movw	r24, r22
    296e:	fe 01       	movw	r30, r28
    2970:	e0 5c       	subi	r30, 0xC0	; 192
    2972:	ff 4f       	sbci	r31, 0xFF	; 255
    2974:	80 83       	st	Z, r24
    2976:	fe 01       	movw	r30, r28
    2978:	e0 5c       	subi	r30, 0xC0	; 192
    297a:	ff 4f       	sbci	r31, 0xFF	; 255
    297c:	80 81       	ld	r24, Z
    297e:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2980:	89 a9       	ldd	r24, Y+49	; 0x31
    2982:	8a 95       	dec	r24
    2984:	f1 f7       	brne	.-4      	; 0x2982 <EF_void_LCD_send_command+0x2b8>
    2986:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(2);
	LCD_CNTRL_PORT &= ~(1<<LCD_ENABLE_PIN);
    2988:	a5 e3       	ldi	r26, 0x35	; 53
    298a:	b0 e0       	ldi	r27, 0x00	; 0
    298c:	e5 e3       	ldi	r30, 0x35	; 53
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	80 81       	ld	r24, Z
    2992:	8f 77       	andi	r24, 0x7F	; 127
    2994:	8c 93       	st	X, r24

	/* output low nibble */
	LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
    2996:	a8 e3       	ldi	r26, 0x38	; 56
    2998:	b0 e0       	ldi	r27, 0x00	; 0
    299a:	e8 e3       	ldi	r30, 0x38	; 56
    299c:	f0 e0       	ldi	r31, 0x00	; 0
    299e:	80 81       	ld	r24, Z
    29a0:	8f 77       	andi	r24, 0x7F	; 127
    29a2:	8c 93       	st	X, r24
	LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
    29a4:	a8 e3       	ldi	r26, 0x38	; 56
    29a6:	b0 e0       	ldi	r27, 0x00	; 0
    29a8:	e8 e3       	ldi	r30, 0x38	; 56
    29aa:	f0 e0       	ldi	r31, 0x00	; 0
    29ac:	80 81       	ld	r24, Z
    29ae:	8f 7b       	andi	r24, 0xBF	; 191
    29b0:	8c 93       	st	X, r24
	LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
    29b2:	a8 e3       	ldi	r26, 0x38	; 56
    29b4:	b0 e0       	ldi	r27, 0x00	; 0
    29b6:	e8 e3       	ldi	r30, 0x38	; 56
    29b8:	f0 e0       	ldi	r31, 0x00	; 0
    29ba:	80 81       	ld	r24, Z
    29bc:	8f 7d       	andi	r24, 0xDF	; 223
    29be:	8c 93       	st	X, r24
	LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
    29c0:	a8 e3       	ldi	r26, 0x38	; 56
    29c2:	b0 e0       	ldi	r27, 0x00	; 0
    29c4:	e8 e3       	ldi	r30, 0x38	; 56
    29c6:	f0 e0       	ldi	r31, 0x00	; 0
    29c8:	80 81       	ld	r24, Z
    29ca:	8f 7e       	andi	r24, 0xEF	; 239
    29cc:	8c 93       	st	X, r24
	if(cmnd & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    29ce:	fe 01       	movw	r30, r28
    29d0:	e7 5b       	subi	r30, 0xB7	; 183
    29d2:	ff 4f       	sbci	r31, 0xFF	; 255
    29d4:	80 81       	ld	r24, Z
    29d6:	88 2f       	mov	r24, r24
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	88 70       	andi	r24, 0x08	; 8
    29dc:	90 70       	andi	r25, 0x00	; 0
    29de:	00 97       	sbiw	r24, 0x00	; 0
    29e0:	39 f0       	breq	.+14     	; 0x29f0 <EF_void_LCD_send_command+0x326>
    29e2:	a8 e3       	ldi	r26, 0x38	; 56
    29e4:	b0 e0       	ldi	r27, 0x00	; 0
    29e6:	e8 e3       	ldi	r30, 0x38	; 56
    29e8:	f0 e0       	ldi	r31, 0x00	; 0
    29ea:	80 81       	ld	r24, Z
    29ec:	80 68       	ori	r24, 0x80	; 128
    29ee:	8c 93       	st	X, r24
	if(cmnd & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
    29f0:	fe 01       	movw	r30, r28
    29f2:	e7 5b       	subi	r30, 0xB7	; 183
    29f4:	ff 4f       	sbci	r31, 0xFF	; 255
    29f6:	80 81       	ld	r24, Z
    29f8:	88 2f       	mov	r24, r24
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	84 70       	andi	r24, 0x04	; 4
    29fe:	90 70       	andi	r25, 0x00	; 0
    2a00:	00 97       	sbiw	r24, 0x00	; 0
    2a02:	39 f0       	breq	.+14     	; 0x2a12 <EF_void_LCD_send_command+0x348>
    2a04:	a8 e3       	ldi	r26, 0x38	; 56
    2a06:	b0 e0       	ldi	r27, 0x00	; 0
    2a08:	e8 e3       	ldi	r30, 0x38	; 56
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	80 81       	ld	r24, Z
    2a0e:	80 64       	ori	r24, 0x40	; 64
    2a10:	8c 93       	st	X, r24
	if(cmnd & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    2a12:	fe 01       	movw	r30, r28
    2a14:	e7 5b       	subi	r30, 0xB7	; 183
    2a16:	ff 4f       	sbci	r31, 0xFF	; 255
    2a18:	80 81       	ld	r24, Z
    2a1a:	88 2f       	mov	r24, r24
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	82 70       	andi	r24, 0x02	; 2
    2a20:	90 70       	andi	r25, 0x00	; 0
    2a22:	00 97       	sbiw	r24, 0x00	; 0
    2a24:	39 f0       	breq	.+14     	; 0x2a34 <EF_void_LCD_send_command+0x36a>
    2a26:	a8 e3       	ldi	r26, 0x38	; 56
    2a28:	b0 e0       	ldi	r27, 0x00	; 0
    2a2a:	e8 e3       	ldi	r30, 0x38	; 56
    2a2c:	f0 e0       	ldi	r31, 0x00	; 0
    2a2e:	80 81       	ld	r24, Z
    2a30:	80 62       	ori	r24, 0x20	; 32
    2a32:	8c 93       	st	X, r24
	if(cmnd & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
    2a34:	fe 01       	movw	r30, r28
    2a36:	e7 5b       	subi	r30, 0xB7	; 183
    2a38:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3a:	80 81       	ld	r24, Z
    2a3c:	88 2f       	mov	r24, r24
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	81 70       	andi	r24, 0x01	; 1
    2a42:	90 70       	andi	r25, 0x00	; 0
    2a44:	88 23       	and	r24, r24
    2a46:	39 f0       	breq	.+14     	; 0x2a56 <EF_void_LCD_send_command+0x38c>
    2a48:	a8 e3       	ldi	r26, 0x38	; 56
    2a4a:	b0 e0       	ldi	r27, 0x00	; 0
    2a4c:	e8 e3       	ldi	r30, 0x38	; 56
    2a4e:	f0 e0       	ldi	r31, 0x00	; 0
    2a50:	80 81       	ld	r24, Z
    2a52:	80 61       	ori	r24, 0x10	; 16
    2a54:	8c 93       	st	X, r24

	/* make Enable High to low with delay to enable the internal latch at the LCD*/
	LCD_CNTRL_PORT |= (1<<LCD_ENABLE_PIN);
    2a56:	a5 e3       	ldi	r26, 0x35	; 53
    2a58:	b0 e0       	ldi	r27, 0x00	; 0
    2a5a:	e5 e3       	ldi	r30, 0x35	; 53
    2a5c:	f0 e0       	ldi	r31, 0x00	; 0
    2a5e:	80 81       	ld	r24, Z
    2a60:	80 68       	ori	r24, 0x80	; 128
    2a62:	8c 93       	st	X, r24
    2a64:	80 e0       	ldi	r24, 0x00	; 0
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	a0 e0       	ldi	r26, 0x00	; 0
    2a6a:	b0 e4       	ldi	r27, 0x40	; 64
    2a6c:	8d a7       	std	Y+45, r24	; 0x2d
    2a6e:	9e a7       	std	Y+46, r25	; 0x2e
    2a70:	af a7       	std	Y+47, r26	; 0x2f
    2a72:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a74:	6d a5       	ldd	r22, Y+45	; 0x2d
    2a76:	7e a5       	ldd	r23, Y+46	; 0x2e
    2a78:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a7a:	98 a9       	ldd	r25, Y+48	; 0x30
    2a7c:	2b ea       	ldi	r18, 0xAB	; 171
    2a7e:	3a ea       	ldi	r19, 0xAA	; 170
    2a80:	4a ea       	ldi	r20, 0xAA	; 170
    2a82:	50 e4       	ldi	r21, 0x40	; 64
    2a84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a88:	dc 01       	movw	r26, r24
    2a8a:	cb 01       	movw	r24, r22
    2a8c:	89 a7       	std	Y+41, r24	; 0x29
    2a8e:	9a a7       	std	Y+42, r25	; 0x2a
    2a90:	ab a7       	std	Y+43, r26	; 0x2b
    2a92:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2a94:	69 a5       	ldd	r22, Y+41	; 0x29
    2a96:	7a a5       	ldd	r23, Y+42	; 0x2a
    2a98:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a9a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a9c:	20 e0       	ldi	r18, 0x00	; 0
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	40 e8       	ldi	r20, 0x80	; 128
    2aa2:	5f e3       	ldi	r21, 0x3F	; 63
    2aa4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2aa8:	88 23       	and	r24, r24
    2aaa:	1c f4       	brge	.+6      	; 0x2ab2 <EF_void_LCD_send_command+0x3e8>
		__ticks = 1;
    2aac:	81 e0       	ldi	r24, 0x01	; 1
    2aae:	88 a7       	std	Y+40, r24	; 0x28
    2ab0:	91 c0       	rjmp	.+290    	; 0x2bd4 <EF_void_LCD_send_command+0x50a>
	else if (__tmp > 255)
    2ab2:	69 a5       	ldd	r22, Y+41	; 0x29
    2ab4:	7a a5       	ldd	r23, Y+42	; 0x2a
    2ab6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ab8:	9c a5       	ldd	r25, Y+44	; 0x2c
    2aba:	20 e0       	ldi	r18, 0x00	; 0
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	4f e7       	ldi	r20, 0x7F	; 127
    2ac0:	53 e4       	ldi	r21, 0x43	; 67
    2ac2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ac6:	18 16       	cp	r1, r24
    2ac8:	0c f0       	brlt	.+2      	; 0x2acc <EF_void_LCD_send_command+0x402>
    2aca:	7b c0       	rjmp	.+246    	; 0x2bc2 <EF_void_LCD_send_command+0x4f8>
	{
		_delay_ms(__us / 1000.0);
    2acc:	6d a5       	ldd	r22, Y+45	; 0x2d
    2ace:	7e a5       	ldd	r23, Y+46	; 0x2e
    2ad0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ad2:	98 a9       	ldd	r25, Y+48	; 0x30
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	4a e7       	ldi	r20, 0x7A	; 122
    2ada:	54 e4       	ldi	r21, 0x44	; 68
    2adc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	cb 01       	movw	r24, r22
    2ae4:	8c a3       	std	Y+36, r24	; 0x24
    2ae6:	9d a3       	std	Y+37, r25	; 0x25
    2ae8:	ae a3       	std	Y+38, r26	; 0x26
    2aea:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aec:	6c a1       	ldd	r22, Y+36	; 0x24
    2aee:	7d a1       	ldd	r23, Y+37	; 0x25
    2af0:	8e a1       	ldd	r24, Y+38	; 0x26
    2af2:	9f a1       	ldd	r25, Y+39	; 0x27
    2af4:	20 e0       	ldi	r18, 0x00	; 0
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	4a e7       	ldi	r20, 0x7A	; 122
    2afa:	55 e4       	ldi	r21, 0x45	; 69
    2afc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b00:	dc 01       	movw	r26, r24
    2b02:	cb 01       	movw	r24, r22
    2b04:	88 a3       	std	Y+32, r24	; 0x20
    2b06:	99 a3       	std	Y+33, r25	; 0x21
    2b08:	aa a3       	std	Y+34, r26	; 0x22
    2b0a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2b0c:	68 a1       	ldd	r22, Y+32	; 0x20
    2b0e:	79 a1       	ldd	r23, Y+33	; 0x21
    2b10:	8a a1       	ldd	r24, Y+34	; 0x22
    2b12:	9b a1       	ldd	r25, Y+35	; 0x23
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	40 e8       	ldi	r20, 0x80	; 128
    2b1a:	5f e3       	ldi	r21, 0x3F	; 63
    2b1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b20:	88 23       	and	r24, r24
    2b22:	2c f4       	brge	.+10     	; 0x2b2e <EF_void_LCD_send_command+0x464>
		__ticks = 1;
    2b24:	81 e0       	ldi	r24, 0x01	; 1
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	9f 8f       	std	Y+31, r25	; 0x1f
    2b2a:	8e 8f       	std	Y+30, r24	; 0x1e
    2b2c:	3f c0       	rjmp	.+126    	; 0x2bac <EF_void_LCD_send_command+0x4e2>
	else if (__tmp > 65535)
    2b2e:	68 a1       	ldd	r22, Y+32	; 0x20
    2b30:	79 a1       	ldd	r23, Y+33	; 0x21
    2b32:	8a a1       	ldd	r24, Y+34	; 0x22
    2b34:	9b a1       	ldd	r25, Y+35	; 0x23
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	3f ef       	ldi	r19, 0xFF	; 255
    2b3a:	4f e7       	ldi	r20, 0x7F	; 127
    2b3c:	57 e4       	ldi	r21, 0x47	; 71
    2b3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b42:	18 16       	cp	r1, r24
    2b44:	4c f5       	brge	.+82     	; 0x2b98 <EF_void_LCD_send_command+0x4ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b46:	6c a1       	ldd	r22, Y+36	; 0x24
    2b48:	7d a1       	ldd	r23, Y+37	; 0x25
    2b4a:	8e a1       	ldd	r24, Y+38	; 0x26
    2b4c:	9f a1       	ldd	r25, Y+39	; 0x27
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	40 e2       	ldi	r20, 0x20	; 32
    2b54:	51 e4       	ldi	r21, 0x41	; 65
    2b56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b5a:	dc 01       	movw	r26, r24
    2b5c:	cb 01       	movw	r24, r22
    2b5e:	bc 01       	movw	r22, r24
    2b60:	cd 01       	movw	r24, r26
    2b62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	9f 8f       	std	Y+31, r25	; 0x1f
    2b6c:	8e 8f       	std	Y+30, r24	; 0x1e
    2b6e:	0f c0       	rjmp	.+30     	; 0x2b8e <EF_void_LCD_send_command+0x4c4>
    2b70:	80 e9       	ldi	r24, 0x90	; 144
    2b72:	91 e0       	ldi	r25, 0x01	; 1
    2b74:	9d 8f       	std	Y+29, r25	; 0x1d
    2b76:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b78:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2b7a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2b7c:	01 97       	sbiw	r24, 0x01	; 1
    2b7e:	f1 f7       	brne	.-4      	; 0x2b7c <EF_void_LCD_send_command+0x4b2>
    2b80:	9d 8f       	std	Y+29, r25	; 0x1d
    2b82:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b84:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b86:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2b88:	01 97       	sbiw	r24, 0x01	; 1
    2b8a:	9f 8f       	std	Y+31, r25	; 0x1f
    2b8c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b8e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b90:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2b92:	00 97       	sbiw	r24, 0x00	; 0
    2b94:	69 f7       	brne	.-38     	; 0x2b70 <EF_void_LCD_send_command+0x4a6>
    2b96:	24 c0       	rjmp	.+72     	; 0x2be0 <EF_void_LCD_send_command+0x516>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b98:	68 a1       	ldd	r22, Y+32	; 0x20
    2b9a:	79 a1       	ldd	r23, Y+33	; 0x21
    2b9c:	8a a1       	ldd	r24, Y+34	; 0x22
    2b9e:	9b a1       	ldd	r25, Y+35	; 0x23
    2ba0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba4:	dc 01       	movw	r26, r24
    2ba6:	cb 01       	movw	r24, r22
    2ba8:	9f 8f       	std	Y+31, r25	; 0x1f
    2baa:	8e 8f       	std	Y+30, r24	; 0x1e
    2bac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2bae:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2bb0:	9b 8f       	std	Y+27, r25	; 0x1b
    2bb2:	8a 8f       	std	Y+26, r24	; 0x1a
    2bb4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2bb6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2bb8:	01 97       	sbiw	r24, 0x01	; 1
    2bba:	f1 f7       	brne	.-4      	; 0x2bb8 <EF_void_LCD_send_command+0x4ee>
    2bbc:	9b 8f       	std	Y+27, r25	; 0x1b
    2bbe:	8a 8f       	std	Y+26, r24	; 0x1a
    2bc0:	0f c0       	rjmp	.+30     	; 0x2be0 <EF_void_LCD_send_command+0x516>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2bc2:	69 a5       	ldd	r22, Y+41	; 0x29
    2bc4:	7a a5       	ldd	r23, Y+42	; 0x2a
    2bc6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bc8:	9c a5       	ldd	r25, Y+44	; 0x2c
    2bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	88 a7       	std	Y+40, r24	; 0x28
    2bd4:	88 a5       	ldd	r24, Y+40	; 0x28
    2bd6:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2bd8:	89 8d       	ldd	r24, Y+25	; 0x19
    2bda:	8a 95       	dec	r24
    2bdc:	f1 f7       	brne	.-4      	; 0x2bda <EF_void_LCD_send_command+0x510>
    2bde:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(2);
	LCD_CNTRL_PORT &= ~(1<<LCD_ENABLE_PIN);
    2be0:	a5 e3       	ldi	r26, 0x35	; 53
    2be2:	b0 e0       	ldi	r27, 0x00	; 0
    2be4:	e5 e3       	ldi	r30, 0x35	; 53
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	80 81       	ld	r24, Z
    2bea:	8f 77       	andi	r24, 0x7F	; 127
    2bec:	8c 93       	st	X, r24
    2bee:	80 e0       	ldi	r24, 0x00	; 0
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	a6 e9       	ldi	r26, 0x96	; 150
    2bf4:	b3 e4       	ldi	r27, 0x43	; 67
    2bf6:	8d 8b       	std	Y+21, r24	; 0x15
    2bf8:	9e 8b       	std	Y+22, r25	; 0x16
    2bfa:	af 8b       	std	Y+23, r26	; 0x17
    2bfc:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2bfe:	6d 89       	ldd	r22, Y+21	; 0x15
    2c00:	7e 89       	ldd	r23, Y+22	; 0x16
    2c02:	8f 89       	ldd	r24, Y+23	; 0x17
    2c04:	98 8d       	ldd	r25, Y+24	; 0x18
    2c06:	2b ea       	ldi	r18, 0xAB	; 171
    2c08:	3a ea       	ldi	r19, 0xAA	; 170
    2c0a:	4a ea       	ldi	r20, 0xAA	; 170
    2c0c:	50 e4       	ldi	r21, 0x40	; 64
    2c0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c12:	dc 01       	movw	r26, r24
    2c14:	cb 01       	movw	r24, r22
    2c16:	89 8b       	std	Y+17, r24	; 0x11
    2c18:	9a 8b       	std	Y+18, r25	; 0x12
    2c1a:	ab 8b       	std	Y+19, r26	; 0x13
    2c1c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2c1e:	69 89       	ldd	r22, Y+17	; 0x11
    2c20:	7a 89       	ldd	r23, Y+18	; 0x12
    2c22:	8b 89       	ldd	r24, Y+19	; 0x13
    2c24:	9c 89       	ldd	r25, Y+20	; 0x14
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	40 e8       	ldi	r20, 0x80	; 128
    2c2c:	5f e3       	ldi	r21, 0x3F	; 63
    2c2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c32:	88 23       	and	r24, r24
    2c34:	1c f4       	brge	.+6      	; 0x2c3c <EF_void_LCD_send_command+0x572>
		__ticks = 1;
    2c36:	81 e0       	ldi	r24, 0x01	; 1
    2c38:	88 8b       	std	Y+16, r24	; 0x10
    2c3a:	91 c0       	rjmp	.+290    	; 0x2d5e <EF_void_LCD_send_command+0x694>
	else if (__tmp > 255)
    2c3c:	69 89       	ldd	r22, Y+17	; 0x11
    2c3e:	7a 89       	ldd	r23, Y+18	; 0x12
    2c40:	8b 89       	ldd	r24, Y+19	; 0x13
    2c42:	9c 89       	ldd	r25, Y+20	; 0x14
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	4f e7       	ldi	r20, 0x7F	; 127
    2c4a:	53 e4       	ldi	r21, 0x43	; 67
    2c4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c50:	18 16       	cp	r1, r24
    2c52:	0c f0       	brlt	.+2      	; 0x2c56 <EF_void_LCD_send_command+0x58c>
    2c54:	7b c0       	rjmp	.+246    	; 0x2d4c <EF_void_LCD_send_command+0x682>
	{
		_delay_ms(__us / 1000.0);
    2c56:	6d 89       	ldd	r22, Y+21	; 0x15
    2c58:	7e 89       	ldd	r23, Y+22	; 0x16
    2c5a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c5c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c5e:	20 e0       	ldi	r18, 0x00	; 0
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	4a e7       	ldi	r20, 0x7A	; 122
    2c64:	54 e4       	ldi	r21, 0x44	; 68
    2c66:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c6a:	dc 01       	movw	r26, r24
    2c6c:	cb 01       	movw	r24, r22
    2c6e:	8c 87       	std	Y+12, r24	; 0x0c
    2c70:	9d 87       	std	Y+13, r25	; 0x0d
    2c72:	ae 87       	std	Y+14, r26	; 0x0e
    2c74:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c76:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c78:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c7a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c7c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c7e:	20 e0       	ldi	r18, 0x00	; 0
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	4a e7       	ldi	r20, 0x7A	; 122
    2c84:	55 e4       	ldi	r21, 0x45	; 69
    2c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c8a:	dc 01       	movw	r26, r24
    2c8c:	cb 01       	movw	r24, r22
    2c8e:	88 87       	std	Y+8, r24	; 0x08
    2c90:	99 87       	std	Y+9, r25	; 0x09
    2c92:	aa 87       	std	Y+10, r26	; 0x0a
    2c94:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2c96:	68 85       	ldd	r22, Y+8	; 0x08
    2c98:	79 85       	ldd	r23, Y+9	; 0x09
    2c9a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c9c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c9e:	20 e0       	ldi	r18, 0x00	; 0
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	40 e8       	ldi	r20, 0x80	; 128
    2ca4:	5f e3       	ldi	r21, 0x3F	; 63
    2ca6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2caa:	88 23       	and	r24, r24
    2cac:	2c f4       	brge	.+10     	; 0x2cb8 <EF_void_LCD_send_command+0x5ee>
		__ticks = 1;
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	9f 83       	std	Y+7, r25	; 0x07
    2cb4:	8e 83       	std	Y+6, r24	; 0x06
    2cb6:	3f c0       	rjmp	.+126    	; 0x2d36 <EF_void_LCD_send_command+0x66c>
	else if (__tmp > 65535)
    2cb8:	68 85       	ldd	r22, Y+8	; 0x08
    2cba:	79 85       	ldd	r23, Y+9	; 0x09
    2cbc:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cbe:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	3f ef       	ldi	r19, 0xFF	; 255
    2cc4:	4f e7       	ldi	r20, 0x7F	; 127
    2cc6:	57 e4       	ldi	r21, 0x47	; 71
    2cc8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ccc:	18 16       	cp	r1, r24
    2cce:	4c f5       	brge	.+82     	; 0x2d22 <EF_void_LCD_send_command+0x658>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cd0:	6c 85       	ldd	r22, Y+12	; 0x0c
    2cd2:	7d 85       	ldd	r23, Y+13	; 0x0d
    2cd4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2cd6:	9f 85       	ldd	r25, Y+15	; 0x0f
    2cd8:	20 e0       	ldi	r18, 0x00	; 0
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	40 e2       	ldi	r20, 0x20	; 32
    2cde:	51 e4       	ldi	r21, 0x41	; 65
    2ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce4:	dc 01       	movw	r26, r24
    2ce6:	cb 01       	movw	r24, r22
    2ce8:	bc 01       	movw	r22, r24
    2cea:	cd 01       	movw	r24, r26
    2cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf0:	dc 01       	movw	r26, r24
    2cf2:	cb 01       	movw	r24, r22
    2cf4:	9f 83       	std	Y+7, r25	; 0x07
    2cf6:	8e 83       	std	Y+6, r24	; 0x06
    2cf8:	0f c0       	rjmp	.+30     	; 0x2d18 <EF_void_LCD_send_command+0x64e>
    2cfa:	80 e9       	ldi	r24, 0x90	; 144
    2cfc:	91 e0       	ldi	r25, 0x01	; 1
    2cfe:	9d 83       	std	Y+5, r25	; 0x05
    2d00:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d02:	8c 81       	ldd	r24, Y+4	; 0x04
    2d04:	9d 81       	ldd	r25, Y+5	; 0x05
    2d06:	01 97       	sbiw	r24, 0x01	; 1
    2d08:	f1 f7       	brne	.-4      	; 0x2d06 <EF_void_LCD_send_command+0x63c>
    2d0a:	9d 83       	std	Y+5, r25	; 0x05
    2d0c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d0e:	8e 81       	ldd	r24, Y+6	; 0x06
    2d10:	9f 81       	ldd	r25, Y+7	; 0x07
    2d12:	01 97       	sbiw	r24, 0x01	; 1
    2d14:	9f 83       	std	Y+7, r25	; 0x07
    2d16:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d18:	8e 81       	ldd	r24, Y+6	; 0x06
    2d1a:	9f 81       	ldd	r25, Y+7	; 0x07
    2d1c:	00 97       	sbiw	r24, 0x00	; 0
    2d1e:	69 f7       	brne	.-38     	; 0x2cfa <EF_void_LCD_send_command+0x630>
    2d20:	24 c0       	rjmp	.+72     	; 0x2d6a <EF_void_LCD_send_command+0x6a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d22:	68 85       	ldd	r22, Y+8	; 0x08
    2d24:	79 85       	ldd	r23, Y+9	; 0x09
    2d26:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d28:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d2e:	dc 01       	movw	r26, r24
    2d30:	cb 01       	movw	r24, r22
    2d32:	9f 83       	std	Y+7, r25	; 0x07
    2d34:	8e 83       	std	Y+6, r24	; 0x06
    2d36:	8e 81       	ldd	r24, Y+6	; 0x06
    2d38:	9f 81       	ldd	r25, Y+7	; 0x07
    2d3a:	9b 83       	std	Y+3, r25	; 0x03
    2d3c:	8a 83       	std	Y+2, r24	; 0x02
    2d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d40:	9b 81       	ldd	r25, Y+3	; 0x03
    2d42:	01 97       	sbiw	r24, 0x01	; 1
    2d44:	f1 f7       	brne	.-4      	; 0x2d42 <EF_void_LCD_send_command+0x678>
    2d46:	9b 83       	std	Y+3, r25	; 0x03
    2d48:	8a 83       	std	Y+2, r24	; 0x02
    2d4a:	0f c0       	rjmp	.+30     	; 0x2d6a <EF_void_LCD_send_command+0x6a0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d4c:	69 89       	ldd	r22, Y+17	; 0x11
    2d4e:	7a 89       	ldd	r23, Y+18	; 0x12
    2d50:	8b 89       	ldd	r24, Y+19	; 0x13
    2d52:	9c 89       	ldd	r25, Y+20	; 0x14
    2d54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d58:	dc 01       	movw	r26, r24
    2d5a:	cb 01       	movw	r24, r22
    2d5c:	88 8b       	std	Y+16, r24	; 0x10
    2d5e:	88 89       	ldd	r24, Y+16	; 0x10
    2d60:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d62:	89 81       	ldd	r24, Y+1	; 0x01
    2d64:	8a 95       	dec	r24
    2d66:	f1 f7       	brne	.-4      	; 0x2d64 <EF_void_LCD_send_command+0x69a>
    2d68:	89 83       	std	Y+1, r24	; 0x01

	/* wait to let LCD running the command*/
	_delay_us(300);
}
    2d6a:	c7 5b       	subi	r28, 0xB7	; 183
    2d6c:	df 4f       	sbci	r29, 0xFF	; 255
    2d6e:	0f b6       	in	r0, 0x3f	; 63
    2d70:	f8 94       	cli
    2d72:	de bf       	out	0x3e, r29	; 62
    2d74:	0f be       	out	0x3f, r0	; 63
    2d76:	cd bf       	out	0x3d, r28	; 61
    2d78:	cf 91       	pop	r28
    2d7a:	df 91       	pop	r29
    2d7c:	1f 91       	pop	r17
    2d7e:	0f 91       	pop	r16
    2d80:	08 95       	ret

00002d82 <EF_void_LCD_send_data>:
 * PARAMETERS  : u8 Data:  Data User want to send.
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_send_data(u8 data)
{
    2d82:	0f 93       	push	r16
    2d84:	1f 93       	push	r17
    2d86:	df 93       	push	r29
    2d88:	cf 93       	push	r28
    2d8a:	cd b7       	in	r28, 0x3d	; 61
    2d8c:	de b7       	in	r29, 0x3e	; 62
    2d8e:	c9 54       	subi	r28, 0x49	; 73
    2d90:	d0 40       	sbci	r29, 0x00	; 0
    2d92:	0f b6       	in	r0, 0x3f	; 63
    2d94:	f8 94       	cli
    2d96:	de bf       	out	0x3e, r29	; 62
    2d98:	0f be       	out	0x3f, r0	; 63
    2d9a:	cd bf       	out	0x3d, r28	; 61
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	e7 5b       	subi	r30, 0xB7	; 183
    2da0:	ff 4f       	sbci	r31, 0xFF	; 255
    2da2:	80 83       	st	Z, r24
	/*RS will be high and RW will be LOW */
	LCD_CNTRL_PORT &= ~(1<<LCD_RW_PIN);
    2da4:	a5 e3       	ldi	r26, 0x35	; 53
    2da6:	b0 e0       	ldi	r27, 0x00	; 0
    2da8:	e5 e3       	ldi	r30, 0x35	; 53
    2daa:	f0 e0       	ldi	r31, 0x00	; 0
    2dac:	80 81       	ld	r24, Z
    2dae:	8f 7b       	andi	r24, 0xBF	; 191
    2db0:	8c 93       	st	X, r24
	LCD_CNTRL_PORT |= (1<<LCD_RS_PIN);
    2db2:	a5 e3       	ldi	r26, 0x35	; 53
    2db4:	b0 e0       	ldi	r27, 0x00	; 0
    2db6:	e5 e3       	ldi	r30, 0x35	; 53
    2db8:	f0 e0       	ldi	r31, 0x00	; 0
    2dba:	80 81       	ld	r24, Z
    2dbc:	80 62       	ori	r24, 0x20	; 32
    2dbe:	8c 93       	st	X, r24
	/*
	 * output high nibble first , "Generic method", attach data by bit
	 * first: put 0 in each pin then if the corresponding bit =1 , put 1
	 * -----------output high nibble first--------*
	 * * */
	LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
    2dc0:	a8 e3       	ldi	r26, 0x38	; 56
    2dc2:	b0 e0       	ldi	r27, 0x00	; 0
    2dc4:	e8 e3       	ldi	r30, 0x38	; 56
    2dc6:	f0 e0       	ldi	r31, 0x00	; 0
    2dc8:	80 81       	ld	r24, Z
    2dca:	8f 77       	andi	r24, 0x7F	; 127
    2dcc:	8c 93       	st	X, r24
	LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
    2dce:	a8 e3       	ldi	r26, 0x38	; 56
    2dd0:	b0 e0       	ldi	r27, 0x00	; 0
    2dd2:	e8 e3       	ldi	r30, 0x38	; 56
    2dd4:	f0 e0       	ldi	r31, 0x00	; 0
    2dd6:	80 81       	ld	r24, Z
    2dd8:	8f 7b       	andi	r24, 0xBF	; 191
    2dda:	8c 93       	st	X, r24
	LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
    2ddc:	a8 e3       	ldi	r26, 0x38	; 56
    2dde:	b0 e0       	ldi	r27, 0x00	; 0
    2de0:	e8 e3       	ldi	r30, 0x38	; 56
    2de2:	f0 e0       	ldi	r31, 0x00	; 0
    2de4:	80 81       	ld	r24, Z
    2de6:	8f 7d       	andi	r24, 0xDF	; 223
    2de8:	8c 93       	st	X, r24
	LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
    2dea:	a8 e3       	ldi	r26, 0x38	; 56
    2dec:	b0 e0       	ldi	r27, 0x00	; 0
    2dee:	e8 e3       	ldi	r30, 0x38	; 56
    2df0:	f0 e0       	ldi	r31, 0x00	; 0
    2df2:	80 81       	ld	r24, Z
    2df4:	8f 7e       	andi	r24, 0xEF	; 239
    2df6:	8c 93       	st	X, r24
	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    2df8:	fe 01       	movw	r30, r28
    2dfa:	e7 5b       	subi	r30, 0xB7	; 183
    2dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfe:	80 81       	ld	r24, Z
    2e00:	88 23       	and	r24, r24
    2e02:	3c f4       	brge	.+14     	; 0x2e12 <EF_void_LCD_send_data+0x90>
    2e04:	a8 e3       	ldi	r26, 0x38	; 56
    2e06:	b0 e0       	ldi	r27, 0x00	; 0
    2e08:	e8 e3       	ldi	r30, 0x38	; 56
    2e0a:	f0 e0       	ldi	r31, 0x00	; 0
    2e0c:	80 81       	ld	r24, Z
    2e0e:	80 68       	ori	r24, 0x80	; 128
    2e10:	8c 93       	st	X, r24
	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
    2e12:	fe 01       	movw	r30, r28
    2e14:	e7 5b       	subi	r30, 0xB7	; 183
    2e16:	ff 4f       	sbci	r31, 0xFF	; 255
    2e18:	80 81       	ld	r24, Z
    2e1a:	88 2f       	mov	r24, r24
    2e1c:	90 e0       	ldi	r25, 0x00	; 0
    2e1e:	80 74       	andi	r24, 0x40	; 64
    2e20:	90 70       	andi	r25, 0x00	; 0
    2e22:	00 97       	sbiw	r24, 0x00	; 0
    2e24:	39 f0       	breq	.+14     	; 0x2e34 <EF_void_LCD_send_data+0xb2>
    2e26:	a8 e3       	ldi	r26, 0x38	; 56
    2e28:	b0 e0       	ldi	r27, 0x00	; 0
    2e2a:	e8 e3       	ldi	r30, 0x38	; 56
    2e2c:	f0 e0       	ldi	r31, 0x00	; 0
    2e2e:	80 81       	ld	r24, Z
    2e30:	80 64       	ori	r24, 0x40	; 64
    2e32:	8c 93       	st	X, r24
	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    2e34:	fe 01       	movw	r30, r28
    2e36:	e7 5b       	subi	r30, 0xB7	; 183
    2e38:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3a:	80 81       	ld	r24, Z
    2e3c:	88 2f       	mov	r24, r24
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	80 72       	andi	r24, 0x20	; 32
    2e42:	90 70       	andi	r25, 0x00	; 0
    2e44:	00 97       	sbiw	r24, 0x00	; 0
    2e46:	39 f0       	breq	.+14     	; 0x2e56 <EF_void_LCD_send_data+0xd4>
    2e48:	a8 e3       	ldi	r26, 0x38	; 56
    2e4a:	b0 e0       	ldi	r27, 0x00	; 0
    2e4c:	e8 e3       	ldi	r30, 0x38	; 56
    2e4e:	f0 e0       	ldi	r31, 0x00	; 0
    2e50:	80 81       	ld	r24, Z
    2e52:	80 62       	ori	r24, 0x20	; 32
    2e54:	8c 93       	st	X, r24
	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
    2e56:	fe 01       	movw	r30, r28
    2e58:	e7 5b       	subi	r30, 0xB7	; 183
    2e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5c:	80 81       	ld	r24, Z
    2e5e:	88 2f       	mov	r24, r24
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	80 71       	andi	r24, 0x10	; 16
    2e64:	90 70       	andi	r25, 0x00	; 0
    2e66:	00 97       	sbiw	r24, 0x00	; 0
    2e68:	39 f0       	breq	.+14     	; 0x2e78 <EF_void_LCD_send_data+0xf6>
    2e6a:	a8 e3       	ldi	r26, 0x38	; 56
    2e6c:	b0 e0       	ldi	r27, 0x00	; 0
    2e6e:	e8 e3       	ldi	r30, 0x38	; 56
    2e70:	f0 e0       	ldi	r31, 0x00	; 0
    2e72:	80 81       	ld	r24, Z
    2e74:	80 61       	ori	r24, 0x10	; 16
    2e76:	8c 93       	st	X, r24

	/* make Enable High to low with delay to enable the internal latch at the LCD */
	LCD_CNTRL_PORT |= (1<<LCD_ENABLE_PIN);
    2e78:	a5 e3       	ldi	r26, 0x35	; 53
    2e7a:	b0 e0       	ldi	r27, 0x00	; 0
    2e7c:	e5 e3       	ldi	r30, 0x35	; 53
    2e7e:	f0 e0       	ldi	r31, 0x00	; 0
    2e80:	80 81       	ld	r24, Z
    2e82:	80 68       	ori	r24, 0x80	; 128
    2e84:	8c 93       	st	X, r24
    2e86:	fe 01       	movw	r30, r28
    2e88:	eb 5b       	subi	r30, 0xBB	; 187
    2e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8c:	80 e0       	ldi	r24, 0x00	; 0
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	a0 e0       	ldi	r26, 0x00	; 0
    2e92:	b0 e4       	ldi	r27, 0x40	; 64
    2e94:	80 83       	st	Z, r24
    2e96:	91 83       	std	Z+1, r25	; 0x01
    2e98:	a2 83       	std	Z+2, r26	; 0x02
    2e9a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2e9c:	8e 01       	movw	r16, r28
    2e9e:	0f 5b       	subi	r16, 0xBF	; 191
    2ea0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ea2:	fe 01       	movw	r30, r28
    2ea4:	eb 5b       	subi	r30, 0xBB	; 187
    2ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea8:	60 81       	ld	r22, Z
    2eaa:	71 81       	ldd	r23, Z+1	; 0x01
    2eac:	82 81       	ldd	r24, Z+2	; 0x02
    2eae:	93 81       	ldd	r25, Z+3	; 0x03
    2eb0:	2b ea       	ldi	r18, 0xAB	; 171
    2eb2:	3a ea       	ldi	r19, 0xAA	; 170
    2eb4:	4a ea       	ldi	r20, 0xAA	; 170
    2eb6:	50 e4       	ldi	r21, 0x40	; 64
    2eb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ebc:	dc 01       	movw	r26, r24
    2ebe:	cb 01       	movw	r24, r22
    2ec0:	f8 01       	movw	r30, r16
    2ec2:	80 83       	st	Z, r24
    2ec4:	91 83       	std	Z+1, r25	; 0x01
    2ec6:	a2 83       	std	Z+2, r26	; 0x02
    2ec8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2eca:	fe 01       	movw	r30, r28
    2ecc:	ef 5b       	subi	r30, 0xBF	; 191
    2ece:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed0:	60 81       	ld	r22, Z
    2ed2:	71 81       	ldd	r23, Z+1	; 0x01
    2ed4:	82 81       	ldd	r24, Z+2	; 0x02
    2ed6:	93 81       	ldd	r25, Z+3	; 0x03
    2ed8:	20 e0       	ldi	r18, 0x00	; 0
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	40 e8       	ldi	r20, 0x80	; 128
    2ede:	5f e3       	ldi	r21, 0x3F	; 63
    2ee0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ee4:	88 23       	and	r24, r24
    2ee6:	34 f4       	brge	.+12     	; 0x2ef4 <EF_void_LCD_send_data+0x172>
		__ticks = 1;
    2ee8:	81 e0       	ldi	r24, 0x01	; 1
    2eea:	fe 01       	movw	r30, r28
    2eec:	e0 5c       	subi	r30, 0xC0	; 192
    2eee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef0:	80 83       	st	Z, r24
    2ef2:	9d c0       	rjmp	.+314    	; 0x302e <EF_void_LCD_send_data+0x2ac>
	else if (__tmp > 255)
    2ef4:	fe 01       	movw	r30, r28
    2ef6:	ef 5b       	subi	r30, 0xBF	; 191
    2ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    2efa:	60 81       	ld	r22, Z
    2efc:	71 81       	ldd	r23, Z+1	; 0x01
    2efe:	82 81       	ldd	r24, Z+2	; 0x02
    2f00:	93 81       	ldd	r25, Z+3	; 0x03
    2f02:	20 e0       	ldi	r18, 0x00	; 0
    2f04:	30 e0       	ldi	r19, 0x00	; 0
    2f06:	4f e7       	ldi	r20, 0x7F	; 127
    2f08:	53 e4       	ldi	r21, 0x43	; 67
    2f0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f0e:	18 16       	cp	r1, r24
    2f10:	0c f0       	brlt	.+2      	; 0x2f14 <EF_void_LCD_send_data+0x192>
    2f12:	7e c0       	rjmp	.+252    	; 0x3010 <EF_void_LCD_send_data+0x28e>
	{
		_delay_ms(__us / 1000.0);
    2f14:	fe 01       	movw	r30, r28
    2f16:	eb 5b       	subi	r30, 0xBB	; 187
    2f18:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1a:	60 81       	ld	r22, Z
    2f1c:	71 81       	ldd	r23, Z+1	; 0x01
    2f1e:	82 81       	ldd	r24, Z+2	; 0x02
    2f20:	93 81       	ldd	r25, Z+3	; 0x03
    2f22:	20 e0       	ldi	r18, 0x00	; 0
    2f24:	30 e0       	ldi	r19, 0x00	; 0
    2f26:	4a e7       	ldi	r20, 0x7A	; 122
    2f28:	54 e4       	ldi	r21, 0x44	; 68
    2f2a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f2e:	dc 01       	movw	r26, r24
    2f30:	cb 01       	movw	r24, r22
    2f32:	8c af       	std	Y+60, r24	; 0x3c
    2f34:	9d af       	std	Y+61, r25	; 0x3d
    2f36:	ae af       	std	Y+62, r26	; 0x3e
    2f38:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f3a:	6c ad       	ldd	r22, Y+60	; 0x3c
    2f3c:	7d ad       	ldd	r23, Y+61	; 0x3d
    2f3e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f40:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f42:	20 e0       	ldi	r18, 0x00	; 0
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	4a e7       	ldi	r20, 0x7A	; 122
    2f48:	55 e4       	ldi	r21, 0x45	; 69
    2f4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f4e:	dc 01       	movw	r26, r24
    2f50:	cb 01       	movw	r24, r22
    2f52:	88 af       	std	Y+56, r24	; 0x38
    2f54:	99 af       	std	Y+57, r25	; 0x39
    2f56:	aa af       	std	Y+58, r26	; 0x3a
    2f58:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2f5a:	68 ad       	ldd	r22, Y+56	; 0x38
    2f5c:	79 ad       	ldd	r23, Y+57	; 0x39
    2f5e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2f60:	9b ad       	ldd	r25, Y+59	; 0x3b
    2f62:	20 e0       	ldi	r18, 0x00	; 0
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	40 e8       	ldi	r20, 0x80	; 128
    2f68:	5f e3       	ldi	r21, 0x3F	; 63
    2f6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f6e:	88 23       	and	r24, r24
    2f70:	2c f4       	brge	.+10     	; 0x2f7c <EF_void_LCD_send_data+0x1fa>
		__ticks = 1;
    2f72:	81 e0       	ldi	r24, 0x01	; 1
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	9f ab       	std	Y+55, r25	; 0x37
    2f78:	8e ab       	std	Y+54, r24	; 0x36
    2f7a:	3f c0       	rjmp	.+126    	; 0x2ffa <EF_void_LCD_send_data+0x278>
	else if (__tmp > 65535)
    2f7c:	68 ad       	ldd	r22, Y+56	; 0x38
    2f7e:	79 ad       	ldd	r23, Y+57	; 0x39
    2f80:	8a ad       	ldd	r24, Y+58	; 0x3a
    2f82:	9b ad       	ldd	r25, Y+59	; 0x3b
    2f84:	20 e0       	ldi	r18, 0x00	; 0
    2f86:	3f ef       	ldi	r19, 0xFF	; 255
    2f88:	4f e7       	ldi	r20, 0x7F	; 127
    2f8a:	57 e4       	ldi	r21, 0x47	; 71
    2f8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f90:	18 16       	cp	r1, r24
    2f92:	4c f5       	brge	.+82     	; 0x2fe6 <EF_void_LCD_send_data+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f94:	6c ad       	ldd	r22, Y+60	; 0x3c
    2f96:	7d ad       	ldd	r23, Y+61	; 0x3d
    2f98:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f9a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f9c:	20 e0       	ldi	r18, 0x00	; 0
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	40 e2       	ldi	r20, 0x20	; 32
    2fa2:	51 e4       	ldi	r21, 0x41	; 65
    2fa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa8:	dc 01       	movw	r26, r24
    2faa:	cb 01       	movw	r24, r22
    2fac:	bc 01       	movw	r22, r24
    2fae:	cd 01       	movw	r24, r26
    2fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb4:	dc 01       	movw	r26, r24
    2fb6:	cb 01       	movw	r24, r22
    2fb8:	9f ab       	std	Y+55, r25	; 0x37
    2fba:	8e ab       	std	Y+54, r24	; 0x36
    2fbc:	0f c0       	rjmp	.+30     	; 0x2fdc <EF_void_LCD_send_data+0x25a>
    2fbe:	80 e9       	ldi	r24, 0x90	; 144
    2fc0:	91 e0       	ldi	r25, 0x01	; 1
    2fc2:	9d ab       	std	Y+53, r25	; 0x35
    2fc4:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fc6:	8c a9       	ldd	r24, Y+52	; 0x34
    2fc8:	9d a9       	ldd	r25, Y+53	; 0x35
    2fca:	01 97       	sbiw	r24, 0x01	; 1
    2fcc:	f1 f7       	brne	.-4      	; 0x2fca <EF_void_LCD_send_data+0x248>
    2fce:	9d ab       	std	Y+53, r25	; 0x35
    2fd0:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fd2:	8e a9       	ldd	r24, Y+54	; 0x36
    2fd4:	9f a9       	ldd	r25, Y+55	; 0x37
    2fd6:	01 97       	sbiw	r24, 0x01	; 1
    2fd8:	9f ab       	std	Y+55, r25	; 0x37
    2fda:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fdc:	8e a9       	ldd	r24, Y+54	; 0x36
    2fde:	9f a9       	ldd	r25, Y+55	; 0x37
    2fe0:	00 97       	sbiw	r24, 0x00	; 0
    2fe2:	69 f7       	brne	.-38     	; 0x2fbe <EF_void_LCD_send_data+0x23c>
    2fe4:	2d c0       	rjmp	.+90     	; 0x3040 <EF_void_LCD_send_data+0x2be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fe6:	68 ad       	ldd	r22, Y+56	; 0x38
    2fe8:	79 ad       	ldd	r23, Y+57	; 0x39
    2fea:	8a ad       	ldd	r24, Y+58	; 0x3a
    2fec:	9b ad       	ldd	r25, Y+59	; 0x3b
    2fee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ff2:	dc 01       	movw	r26, r24
    2ff4:	cb 01       	movw	r24, r22
    2ff6:	9f ab       	std	Y+55, r25	; 0x37
    2ff8:	8e ab       	std	Y+54, r24	; 0x36
    2ffa:	8e a9       	ldd	r24, Y+54	; 0x36
    2ffc:	9f a9       	ldd	r25, Y+55	; 0x37
    2ffe:	9b ab       	std	Y+51, r25	; 0x33
    3000:	8a ab       	std	Y+50, r24	; 0x32
    3002:	8a a9       	ldd	r24, Y+50	; 0x32
    3004:	9b a9       	ldd	r25, Y+51	; 0x33
    3006:	01 97       	sbiw	r24, 0x01	; 1
    3008:	f1 f7       	brne	.-4      	; 0x3006 <EF_void_LCD_send_data+0x284>
    300a:	9b ab       	std	Y+51, r25	; 0x33
    300c:	8a ab       	std	Y+50, r24	; 0x32
    300e:	18 c0       	rjmp	.+48     	; 0x3040 <EF_void_LCD_send_data+0x2be>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3010:	fe 01       	movw	r30, r28
    3012:	ef 5b       	subi	r30, 0xBF	; 191
    3014:	ff 4f       	sbci	r31, 0xFF	; 255
    3016:	60 81       	ld	r22, Z
    3018:	71 81       	ldd	r23, Z+1	; 0x01
    301a:	82 81       	ldd	r24, Z+2	; 0x02
    301c:	93 81       	ldd	r25, Z+3	; 0x03
    301e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3022:	dc 01       	movw	r26, r24
    3024:	cb 01       	movw	r24, r22
    3026:	fe 01       	movw	r30, r28
    3028:	e0 5c       	subi	r30, 0xC0	; 192
    302a:	ff 4f       	sbci	r31, 0xFF	; 255
    302c:	80 83       	st	Z, r24
    302e:	fe 01       	movw	r30, r28
    3030:	e0 5c       	subi	r30, 0xC0	; 192
    3032:	ff 4f       	sbci	r31, 0xFF	; 255
    3034:	80 81       	ld	r24, Z
    3036:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3038:	89 a9       	ldd	r24, Y+49	; 0x31
    303a:	8a 95       	dec	r24
    303c:	f1 f7       	brne	.-4      	; 0x303a <EF_void_LCD_send_data+0x2b8>
    303e:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(2);
	LCD_CNTRL_PORT &= ~(1<<LCD_ENABLE_PIN);
    3040:	a5 e3       	ldi	r26, 0x35	; 53
    3042:	b0 e0       	ldi	r27, 0x00	; 0
    3044:	e5 e3       	ldi	r30, 0x35	; 53
    3046:	f0 e0       	ldi	r31, 0x00	; 0
    3048:	80 81       	ld	r24, Z
    304a:	8f 77       	andi	r24, 0x7F	; 127
    304c:	8c 93       	st	X, r24

	/* output low nibble */
	LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
    304e:	a8 e3       	ldi	r26, 0x38	; 56
    3050:	b0 e0       	ldi	r27, 0x00	; 0
    3052:	e8 e3       	ldi	r30, 0x38	; 56
    3054:	f0 e0       	ldi	r31, 0x00	; 0
    3056:	80 81       	ld	r24, Z
    3058:	8f 77       	andi	r24, 0x7F	; 127
    305a:	8c 93       	st	X, r24
	LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
    305c:	a8 e3       	ldi	r26, 0x38	; 56
    305e:	b0 e0       	ldi	r27, 0x00	; 0
    3060:	e8 e3       	ldi	r30, 0x38	; 56
    3062:	f0 e0       	ldi	r31, 0x00	; 0
    3064:	80 81       	ld	r24, Z
    3066:	8f 7b       	andi	r24, 0xBF	; 191
    3068:	8c 93       	st	X, r24
	LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
    306a:	a8 e3       	ldi	r26, 0x38	; 56
    306c:	b0 e0       	ldi	r27, 0x00	; 0
    306e:	e8 e3       	ldi	r30, 0x38	; 56
    3070:	f0 e0       	ldi	r31, 0x00	; 0
    3072:	80 81       	ld	r24, Z
    3074:	8f 7d       	andi	r24, 0xDF	; 223
    3076:	8c 93       	st	X, r24
	LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
    3078:	a8 e3       	ldi	r26, 0x38	; 56
    307a:	b0 e0       	ldi	r27, 0x00	; 0
    307c:	e8 e3       	ldi	r30, 0x38	; 56
    307e:	f0 e0       	ldi	r31, 0x00	; 0
    3080:	80 81       	ld	r24, Z
    3082:	8f 7e       	andi	r24, 0xEF	; 239
    3084:	8c 93       	st	X, r24
	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    3086:	fe 01       	movw	r30, r28
    3088:	e7 5b       	subi	r30, 0xB7	; 183
    308a:	ff 4f       	sbci	r31, 0xFF	; 255
    308c:	80 81       	ld	r24, Z
    308e:	88 2f       	mov	r24, r24
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	88 70       	andi	r24, 0x08	; 8
    3094:	90 70       	andi	r25, 0x00	; 0
    3096:	00 97       	sbiw	r24, 0x00	; 0
    3098:	39 f0       	breq	.+14     	; 0x30a8 <EF_void_LCD_send_data+0x326>
    309a:	a8 e3       	ldi	r26, 0x38	; 56
    309c:	b0 e0       	ldi	r27, 0x00	; 0
    309e:	e8 e3       	ldi	r30, 0x38	; 56
    30a0:	f0 e0       	ldi	r31, 0x00	; 0
    30a2:	80 81       	ld	r24, Z
    30a4:	80 68       	ori	r24, 0x80	; 128
    30a6:	8c 93       	st	X, r24
	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
    30a8:	fe 01       	movw	r30, r28
    30aa:	e7 5b       	subi	r30, 0xB7	; 183
    30ac:	ff 4f       	sbci	r31, 0xFF	; 255
    30ae:	80 81       	ld	r24, Z
    30b0:	88 2f       	mov	r24, r24
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	84 70       	andi	r24, 0x04	; 4
    30b6:	90 70       	andi	r25, 0x00	; 0
    30b8:	00 97       	sbiw	r24, 0x00	; 0
    30ba:	39 f0       	breq	.+14     	; 0x30ca <EF_void_LCD_send_data+0x348>
    30bc:	a8 e3       	ldi	r26, 0x38	; 56
    30be:	b0 e0       	ldi	r27, 0x00	; 0
    30c0:	e8 e3       	ldi	r30, 0x38	; 56
    30c2:	f0 e0       	ldi	r31, 0x00	; 0
    30c4:	80 81       	ld	r24, Z
    30c6:	80 64       	ori	r24, 0x40	; 64
    30c8:	8c 93       	st	X, r24
	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    30ca:	fe 01       	movw	r30, r28
    30cc:	e7 5b       	subi	r30, 0xB7	; 183
    30ce:	ff 4f       	sbci	r31, 0xFF	; 255
    30d0:	80 81       	ld	r24, Z
    30d2:	88 2f       	mov	r24, r24
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	82 70       	andi	r24, 0x02	; 2
    30d8:	90 70       	andi	r25, 0x00	; 0
    30da:	00 97       	sbiw	r24, 0x00	; 0
    30dc:	39 f0       	breq	.+14     	; 0x30ec <EF_void_LCD_send_data+0x36a>
    30de:	a8 e3       	ldi	r26, 0x38	; 56
    30e0:	b0 e0       	ldi	r27, 0x00	; 0
    30e2:	e8 e3       	ldi	r30, 0x38	; 56
    30e4:	f0 e0       	ldi	r31, 0x00	; 0
    30e6:	80 81       	ld	r24, Z
    30e8:	80 62       	ori	r24, 0x20	; 32
    30ea:	8c 93       	st	X, r24
	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
    30ec:	fe 01       	movw	r30, r28
    30ee:	e7 5b       	subi	r30, 0xB7	; 183
    30f0:	ff 4f       	sbci	r31, 0xFF	; 255
    30f2:	80 81       	ld	r24, Z
    30f4:	88 2f       	mov	r24, r24
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	81 70       	andi	r24, 0x01	; 1
    30fa:	90 70       	andi	r25, 0x00	; 0
    30fc:	88 23       	and	r24, r24
    30fe:	39 f0       	breq	.+14     	; 0x310e <EF_void_LCD_send_data+0x38c>
    3100:	a8 e3       	ldi	r26, 0x38	; 56
    3102:	b0 e0       	ldi	r27, 0x00	; 0
    3104:	e8 e3       	ldi	r30, 0x38	; 56
    3106:	f0 e0       	ldi	r31, 0x00	; 0
    3108:	80 81       	ld	r24, Z
    310a:	80 61       	ori	r24, 0x10	; 16
    310c:	8c 93       	st	X, r24

	/* make Enable High to low with delay to enable the internal latch at the LCD */
	LCD_CNTRL_PORT |= (1<<LCD_ENABLE_PIN);
    310e:	a5 e3       	ldi	r26, 0x35	; 53
    3110:	b0 e0       	ldi	r27, 0x00	; 0
    3112:	e5 e3       	ldi	r30, 0x35	; 53
    3114:	f0 e0       	ldi	r31, 0x00	; 0
    3116:	80 81       	ld	r24, Z
    3118:	80 68       	ori	r24, 0x80	; 128
    311a:	8c 93       	st	X, r24
    311c:	80 e0       	ldi	r24, 0x00	; 0
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	a0 e0       	ldi	r26, 0x00	; 0
    3122:	b0 e4       	ldi	r27, 0x40	; 64
    3124:	8d a7       	std	Y+45, r24	; 0x2d
    3126:	9e a7       	std	Y+46, r25	; 0x2e
    3128:	af a7       	std	Y+47, r26	; 0x2f
    312a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    312c:	6d a5       	ldd	r22, Y+45	; 0x2d
    312e:	7e a5       	ldd	r23, Y+46	; 0x2e
    3130:	8f a5       	ldd	r24, Y+47	; 0x2f
    3132:	98 a9       	ldd	r25, Y+48	; 0x30
    3134:	2b ea       	ldi	r18, 0xAB	; 171
    3136:	3a ea       	ldi	r19, 0xAA	; 170
    3138:	4a ea       	ldi	r20, 0xAA	; 170
    313a:	50 e4       	ldi	r21, 0x40	; 64
    313c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3140:	dc 01       	movw	r26, r24
    3142:	cb 01       	movw	r24, r22
    3144:	89 a7       	std	Y+41, r24	; 0x29
    3146:	9a a7       	std	Y+42, r25	; 0x2a
    3148:	ab a7       	std	Y+43, r26	; 0x2b
    314a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    314c:	69 a5       	ldd	r22, Y+41	; 0x29
    314e:	7a a5       	ldd	r23, Y+42	; 0x2a
    3150:	8b a5       	ldd	r24, Y+43	; 0x2b
    3152:	9c a5       	ldd	r25, Y+44	; 0x2c
    3154:	20 e0       	ldi	r18, 0x00	; 0
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	40 e8       	ldi	r20, 0x80	; 128
    315a:	5f e3       	ldi	r21, 0x3F	; 63
    315c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3160:	88 23       	and	r24, r24
    3162:	1c f4       	brge	.+6      	; 0x316a <EF_void_LCD_send_data+0x3e8>
		__ticks = 1;
    3164:	81 e0       	ldi	r24, 0x01	; 1
    3166:	88 a7       	std	Y+40, r24	; 0x28
    3168:	91 c0       	rjmp	.+290    	; 0x328c <EF_void_LCD_send_data+0x50a>
	else if (__tmp > 255)
    316a:	69 a5       	ldd	r22, Y+41	; 0x29
    316c:	7a a5       	ldd	r23, Y+42	; 0x2a
    316e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3170:	9c a5       	ldd	r25, Y+44	; 0x2c
    3172:	20 e0       	ldi	r18, 0x00	; 0
    3174:	30 e0       	ldi	r19, 0x00	; 0
    3176:	4f e7       	ldi	r20, 0x7F	; 127
    3178:	53 e4       	ldi	r21, 0x43	; 67
    317a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    317e:	18 16       	cp	r1, r24
    3180:	0c f0       	brlt	.+2      	; 0x3184 <EF_void_LCD_send_data+0x402>
    3182:	7b c0       	rjmp	.+246    	; 0x327a <EF_void_LCD_send_data+0x4f8>
	{
		_delay_ms(__us / 1000.0);
    3184:	6d a5       	ldd	r22, Y+45	; 0x2d
    3186:	7e a5       	ldd	r23, Y+46	; 0x2e
    3188:	8f a5       	ldd	r24, Y+47	; 0x2f
    318a:	98 a9       	ldd	r25, Y+48	; 0x30
    318c:	20 e0       	ldi	r18, 0x00	; 0
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	4a e7       	ldi	r20, 0x7A	; 122
    3192:	54 e4       	ldi	r21, 0x44	; 68
    3194:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3198:	dc 01       	movw	r26, r24
    319a:	cb 01       	movw	r24, r22
    319c:	8c a3       	std	Y+36, r24	; 0x24
    319e:	9d a3       	std	Y+37, r25	; 0x25
    31a0:	ae a3       	std	Y+38, r26	; 0x26
    31a2:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31a4:	6c a1       	ldd	r22, Y+36	; 0x24
    31a6:	7d a1       	ldd	r23, Y+37	; 0x25
    31a8:	8e a1       	ldd	r24, Y+38	; 0x26
    31aa:	9f a1       	ldd	r25, Y+39	; 0x27
    31ac:	20 e0       	ldi	r18, 0x00	; 0
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	4a e7       	ldi	r20, 0x7A	; 122
    31b2:	55 e4       	ldi	r21, 0x45	; 69
    31b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b8:	dc 01       	movw	r26, r24
    31ba:	cb 01       	movw	r24, r22
    31bc:	88 a3       	std	Y+32, r24	; 0x20
    31be:	99 a3       	std	Y+33, r25	; 0x21
    31c0:	aa a3       	std	Y+34, r26	; 0x22
    31c2:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    31c4:	68 a1       	ldd	r22, Y+32	; 0x20
    31c6:	79 a1       	ldd	r23, Y+33	; 0x21
    31c8:	8a a1       	ldd	r24, Y+34	; 0x22
    31ca:	9b a1       	ldd	r25, Y+35	; 0x23
    31cc:	20 e0       	ldi	r18, 0x00	; 0
    31ce:	30 e0       	ldi	r19, 0x00	; 0
    31d0:	40 e8       	ldi	r20, 0x80	; 128
    31d2:	5f e3       	ldi	r21, 0x3F	; 63
    31d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31d8:	88 23       	and	r24, r24
    31da:	2c f4       	brge	.+10     	; 0x31e6 <EF_void_LCD_send_data+0x464>
		__ticks = 1;
    31dc:	81 e0       	ldi	r24, 0x01	; 1
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	9f 8f       	std	Y+31, r25	; 0x1f
    31e2:	8e 8f       	std	Y+30, r24	; 0x1e
    31e4:	3f c0       	rjmp	.+126    	; 0x3264 <EF_void_LCD_send_data+0x4e2>
	else if (__tmp > 65535)
    31e6:	68 a1       	ldd	r22, Y+32	; 0x20
    31e8:	79 a1       	ldd	r23, Y+33	; 0x21
    31ea:	8a a1       	ldd	r24, Y+34	; 0x22
    31ec:	9b a1       	ldd	r25, Y+35	; 0x23
    31ee:	20 e0       	ldi	r18, 0x00	; 0
    31f0:	3f ef       	ldi	r19, 0xFF	; 255
    31f2:	4f e7       	ldi	r20, 0x7F	; 127
    31f4:	57 e4       	ldi	r21, 0x47	; 71
    31f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31fa:	18 16       	cp	r1, r24
    31fc:	4c f5       	brge	.+82     	; 0x3250 <EF_void_LCD_send_data+0x4ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31fe:	6c a1       	ldd	r22, Y+36	; 0x24
    3200:	7d a1       	ldd	r23, Y+37	; 0x25
    3202:	8e a1       	ldd	r24, Y+38	; 0x26
    3204:	9f a1       	ldd	r25, Y+39	; 0x27
    3206:	20 e0       	ldi	r18, 0x00	; 0
    3208:	30 e0       	ldi	r19, 0x00	; 0
    320a:	40 e2       	ldi	r20, 0x20	; 32
    320c:	51 e4       	ldi	r21, 0x41	; 65
    320e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3212:	dc 01       	movw	r26, r24
    3214:	cb 01       	movw	r24, r22
    3216:	bc 01       	movw	r22, r24
    3218:	cd 01       	movw	r24, r26
    321a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    321e:	dc 01       	movw	r26, r24
    3220:	cb 01       	movw	r24, r22
    3222:	9f 8f       	std	Y+31, r25	; 0x1f
    3224:	8e 8f       	std	Y+30, r24	; 0x1e
    3226:	0f c0       	rjmp	.+30     	; 0x3246 <EF_void_LCD_send_data+0x4c4>
    3228:	80 e9       	ldi	r24, 0x90	; 144
    322a:	91 e0       	ldi	r25, 0x01	; 1
    322c:	9d 8f       	std	Y+29, r25	; 0x1d
    322e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3230:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3232:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3234:	01 97       	sbiw	r24, 0x01	; 1
    3236:	f1 f7       	brne	.-4      	; 0x3234 <EF_void_LCD_send_data+0x4b2>
    3238:	9d 8f       	std	Y+29, r25	; 0x1d
    323a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    323c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    323e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3240:	01 97       	sbiw	r24, 0x01	; 1
    3242:	9f 8f       	std	Y+31, r25	; 0x1f
    3244:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3246:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3248:	9f 8d       	ldd	r25, Y+31	; 0x1f
    324a:	00 97       	sbiw	r24, 0x00	; 0
    324c:	69 f7       	brne	.-38     	; 0x3228 <EF_void_LCD_send_data+0x4a6>
    324e:	24 c0       	rjmp	.+72     	; 0x3298 <EF_void_LCD_send_data+0x516>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3250:	68 a1       	ldd	r22, Y+32	; 0x20
    3252:	79 a1       	ldd	r23, Y+33	; 0x21
    3254:	8a a1       	ldd	r24, Y+34	; 0x22
    3256:	9b a1       	ldd	r25, Y+35	; 0x23
    3258:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    325c:	dc 01       	movw	r26, r24
    325e:	cb 01       	movw	r24, r22
    3260:	9f 8f       	std	Y+31, r25	; 0x1f
    3262:	8e 8f       	std	Y+30, r24	; 0x1e
    3264:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3266:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3268:	9b 8f       	std	Y+27, r25	; 0x1b
    326a:	8a 8f       	std	Y+26, r24	; 0x1a
    326c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    326e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3270:	01 97       	sbiw	r24, 0x01	; 1
    3272:	f1 f7       	brne	.-4      	; 0x3270 <EF_void_LCD_send_data+0x4ee>
    3274:	9b 8f       	std	Y+27, r25	; 0x1b
    3276:	8a 8f       	std	Y+26, r24	; 0x1a
    3278:	0f c0       	rjmp	.+30     	; 0x3298 <EF_void_LCD_send_data+0x516>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    327a:	69 a5       	ldd	r22, Y+41	; 0x29
    327c:	7a a5       	ldd	r23, Y+42	; 0x2a
    327e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3280:	9c a5       	ldd	r25, Y+44	; 0x2c
    3282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3286:	dc 01       	movw	r26, r24
    3288:	cb 01       	movw	r24, r22
    328a:	88 a7       	std	Y+40, r24	; 0x28
    328c:	88 a5       	ldd	r24, Y+40	; 0x28
    328e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3290:	89 8d       	ldd	r24, Y+25	; 0x19
    3292:	8a 95       	dec	r24
    3294:	f1 f7       	brne	.-4      	; 0x3292 <EF_void_LCD_send_data+0x510>
    3296:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(2);
	LCD_CNTRL_PORT &= ~(1<<LCD_ENABLE_PIN);
    3298:	a5 e3       	ldi	r26, 0x35	; 53
    329a:	b0 e0       	ldi	r27, 0x00	; 0
    329c:	e5 e3       	ldi	r30, 0x35	; 53
    329e:	f0 e0       	ldi	r31, 0x00	; 0
    32a0:	80 81       	ld	r24, Z
    32a2:	8f 77       	andi	r24, 0x7F	; 127
    32a4:	8c 93       	st	X, r24
    32a6:	80 e0       	ldi	r24, 0x00	; 0
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	a6 e9       	ldi	r26, 0x96	; 150
    32ac:	b3 e4       	ldi	r27, 0x43	; 67
    32ae:	8d 8b       	std	Y+21, r24	; 0x15
    32b0:	9e 8b       	std	Y+22, r25	; 0x16
    32b2:	af 8b       	std	Y+23, r26	; 0x17
    32b4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    32b6:	6d 89       	ldd	r22, Y+21	; 0x15
    32b8:	7e 89       	ldd	r23, Y+22	; 0x16
    32ba:	8f 89       	ldd	r24, Y+23	; 0x17
    32bc:	98 8d       	ldd	r25, Y+24	; 0x18
    32be:	2b ea       	ldi	r18, 0xAB	; 171
    32c0:	3a ea       	ldi	r19, 0xAA	; 170
    32c2:	4a ea       	ldi	r20, 0xAA	; 170
    32c4:	50 e4       	ldi	r21, 0x40	; 64
    32c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ca:	dc 01       	movw	r26, r24
    32cc:	cb 01       	movw	r24, r22
    32ce:	89 8b       	std	Y+17, r24	; 0x11
    32d0:	9a 8b       	std	Y+18, r25	; 0x12
    32d2:	ab 8b       	std	Y+19, r26	; 0x13
    32d4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    32d6:	69 89       	ldd	r22, Y+17	; 0x11
    32d8:	7a 89       	ldd	r23, Y+18	; 0x12
    32da:	8b 89       	ldd	r24, Y+19	; 0x13
    32dc:	9c 89       	ldd	r25, Y+20	; 0x14
    32de:	20 e0       	ldi	r18, 0x00	; 0
    32e0:	30 e0       	ldi	r19, 0x00	; 0
    32e2:	40 e8       	ldi	r20, 0x80	; 128
    32e4:	5f e3       	ldi	r21, 0x3F	; 63
    32e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32ea:	88 23       	and	r24, r24
    32ec:	1c f4       	brge	.+6      	; 0x32f4 <EF_void_LCD_send_data+0x572>
		__ticks = 1;
    32ee:	81 e0       	ldi	r24, 0x01	; 1
    32f0:	88 8b       	std	Y+16, r24	; 0x10
    32f2:	91 c0       	rjmp	.+290    	; 0x3416 <EF_void_LCD_send_data+0x694>
	else if (__tmp > 255)
    32f4:	69 89       	ldd	r22, Y+17	; 0x11
    32f6:	7a 89       	ldd	r23, Y+18	; 0x12
    32f8:	8b 89       	ldd	r24, Y+19	; 0x13
    32fa:	9c 89       	ldd	r25, Y+20	; 0x14
    32fc:	20 e0       	ldi	r18, 0x00	; 0
    32fe:	30 e0       	ldi	r19, 0x00	; 0
    3300:	4f e7       	ldi	r20, 0x7F	; 127
    3302:	53 e4       	ldi	r21, 0x43	; 67
    3304:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3308:	18 16       	cp	r1, r24
    330a:	0c f0       	brlt	.+2      	; 0x330e <EF_void_LCD_send_data+0x58c>
    330c:	7b c0       	rjmp	.+246    	; 0x3404 <EF_void_LCD_send_data+0x682>
	{
		_delay_ms(__us / 1000.0);
    330e:	6d 89       	ldd	r22, Y+21	; 0x15
    3310:	7e 89       	ldd	r23, Y+22	; 0x16
    3312:	8f 89       	ldd	r24, Y+23	; 0x17
    3314:	98 8d       	ldd	r25, Y+24	; 0x18
    3316:	20 e0       	ldi	r18, 0x00	; 0
    3318:	30 e0       	ldi	r19, 0x00	; 0
    331a:	4a e7       	ldi	r20, 0x7A	; 122
    331c:	54 e4       	ldi	r21, 0x44	; 68
    331e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3322:	dc 01       	movw	r26, r24
    3324:	cb 01       	movw	r24, r22
    3326:	8c 87       	std	Y+12, r24	; 0x0c
    3328:	9d 87       	std	Y+13, r25	; 0x0d
    332a:	ae 87       	std	Y+14, r26	; 0x0e
    332c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    332e:	6c 85       	ldd	r22, Y+12	; 0x0c
    3330:	7d 85       	ldd	r23, Y+13	; 0x0d
    3332:	8e 85       	ldd	r24, Y+14	; 0x0e
    3334:	9f 85       	ldd	r25, Y+15	; 0x0f
    3336:	20 e0       	ldi	r18, 0x00	; 0
    3338:	30 e0       	ldi	r19, 0x00	; 0
    333a:	4a e7       	ldi	r20, 0x7A	; 122
    333c:	55 e4       	ldi	r21, 0x45	; 69
    333e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3342:	dc 01       	movw	r26, r24
    3344:	cb 01       	movw	r24, r22
    3346:	88 87       	std	Y+8, r24	; 0x08
    3348:	99 87       	std	Y+9, r25	; 0x09
    334a:	aa 87       	std	Y+10, r26	; 0x0a
    334c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    334e:	68 85       	ldd	r22, Y+8	; 0x08
    3350:	79 85       	ldd	r23, Y+9	; 0x09
    3352:	8a 85       	ldd	r24, Y+10	; 0x0a
    3354:	9b 85       	ldd	r25, Y+11	; 0x0b
    3356:	20 e0       	ldi	r18, 0x00	; 0
    3358:	30 e0       	ldi	r19, 0x00	; 0
    335a:	40 e8       	ldi	r20, 0x80	; 128
    335c:	5f e3       	ldi	r21, 0x3F	; 63
    335e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3362:	88 23       	and	r24, r24
    3364:	2c f4       	brge	.+10     	; 0x3370 <EF_void_LCD_send_data+0x5ee>
		__ticks = 1;
    3366:	81 e0       	ldi	r24, 0x01	; 1
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	9f 83       	std	Y+7, r25	; 0x07
    336c:	8e 83       	std	Y+6, r24	; 0x06
    336e:	3f c0       	rjmp	.+126    	; 0x33ee <EF_void_LCD_send_data+0x66c>
	else if (__tmp > 65535)
    3370:	68 85       	ldd	r22, Y+8	; 0x08
    3372:	79 85       	ldd	r23, Y+9	; 0x09
    3374:	8a 85       	ldd	r24, Y+10	; 0x0a
    3376:	9b 85       	ldd	r25, Y+11	; 0x0b
    3378:	20 e0       	ldi	r18, 0x00	; 0
    337a:	3f ef       	ldi	r19, 0xFF	; 255
    337c:	4f e7       	ldi	r20, 0x7F	; 127
    337e:	57 e4       	ldi	r21, 0x47	; 71
    3380:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3384:	18 16       	cp	r1, r24
    3386:	4c f5       	brge	.+82     	; 0x33da <EF_void_LCD_send_data+0x658>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3388:	6c 85       	ldd	r22, Y+12	; 0x0c
    338a:	7d 85       	ldd	r23, Y+13	; 0x0d
    338c:	8e 85       	ldd	r24, Y+14	; 0x0e
    338e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3390:	20 e0       	ldi	r18, 0x00	; 0
    3392:	30 e0       	ldi	r19, 0x00	; 0
    3394:	40 e2       	ldi	r20, 0x20	; 32
    3396:	51 e4       	ldi	r21, 0x41	; 65
    3398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    339c:	dc 01       	movw	r26, r24
    339e:	cb 01       	movw	r24, r22
    33a0:	bc 01       	movw	r22, r24
    33a2:	cd 01       	movw	r24, r26
    33a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33a8:	dc 01       	movw	r26, r24
    33aa:	cb 01       	movw	r24, r22
    33ac:	9f 83       	std	Y+7, r25	; 0x07
    33ae:	8e 83       	std	Y+6, r24	; 0x06
    33b0:	0f c0       	rjmp	.+30     	; 0x33d0 <EF_void_LCD_send_data+0x64e>
    33b2:	80 e9       	ldi	r24, 0x90	; 144
    33b4:	91 e0       	ldi	r25, 0x01	; 1
    33b6:	9d 83       	std	Y+5, r25	; 0x05
    33b8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    33ba:	8c 81       	ldd	r24, Y+4	; 0x04
    33bc:	9d 81       	ldd	r25, Y+5	; 0x05
    33be:	01 97       	sbiw	r24, 0x01	; 1
    33c0:	f1 f7       	brne	.-4      	; 0x33be <EF_void_LCD_send_data+0x63c>
    33c2:	9d 83       	std	Y+5, r25	; 0x05
    33c4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33c6:	8e 81       	ldd	r24, Y+6	; 0x06
    33c8:	9f 81       	ldd	r25, Y+7	; 0x07
    33ca:	01 97       	sbiw	r24, 0x01	; 1
    33cc:	9f 83       	std	Y+7, r25	; 0x07
    33ce:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33d0:	8e 81       	ldd	r24, Y+6	; 0x06
    33d2:	9f 81       	ldd	r25, Y+7	; 0x07
    33d4:	00 97       	sbiw	r24, 0x00	; 0
    33d6:	69 f7       	brne	.-38     	; 0x33b2 <EF_void_LCD_send_data+0x630>
    33d8:	24 c0       	rjmp	.+72     	; 0x3422 <EF_void_LCD_send_data+0x6a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33da:	68 85       	ldd	r22, Y+8	; 0x08
    33dc:	79 85       	ldd	r23, Y+9	; 0x09
    33de:	8a 85       	ldd	r24, Y+10	; 0x0a
    33e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    33e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33e6:	dc 01       	movw	r26, r24
    33e8:	cb 01       	movw	r24, r22
    33ea:	9f 83       	std	Y+7, r25	; 0x07
    33ec:	8e 83       	std	Y+6, r24	; 0x06
    33ee:	8e 81       	ldd	r24, Y+6	; 0x06
    33f0:	9f 81       	ldd	r25, Y+7	; 0x07
    33f2:	9b 83       	std	Y+3, r25	; 0x03
    33f4:	8a 83       	std	Y+2, r24	; 0x02
    33f6:	8a 81       	ldd	r24, Y+2	; 0x02
    33f8:	9b 81       	ldd	r25, Y+3	; 0x03
    33fa:	01 97       	sbiw	r24, 0x01	; 1
    33fc:	f1 f7       	brne	.-4      	; 0x33fa <EF_void_LCD_send_data+0x678>
    33fe:	9b 83       	std	Y+3, r25	; 0x03
    3400:	8a 83       	std	Y+2, r24	; 0x02
    3402:	0f c0       	rjmp	.+30     	; 0x3422 <EF_void_LCD_send_data+0x6a0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3404:	69 89       	ldd	r22, Y+17	; 0x11
    3406:	7a 89       	ldd	r23, Y+18	; 0x12
    3408:	8b 89       	ldd	r24, Y+19	; 0x13
    340a:	9c 89       	ldd	r25, Y+20	; 0x14
    340c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3410:	dc 01       	movw	r26, r24
    3412:	cb 01       	movw	r24, r22
    3414:	88 8b       	std	Y+16, r24	; 0x10
    3416:	88 89       	ldd	r24, Y+16	; 0x10
    3418:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    341a:	89 81       	ldd	r24, Y+1	; 0x01
    341c:	8a 95       	dec	r24
    341e:	f1 f7       	brne	.-4      	; 0x341c <EF_void_LCD_send_data+0x69a>
    3420:	89 83       	std	Y+1, r24	; 0x01

	/* wait to let LCD running the command*/
	_delay_us(300);
}
    3422:	c7 5b       	subi	r28, 0xB7	; 183
    3424:	df 4f       	sbci	r29, 0xFF	; 255
    3426:	0f b6       	in	r0, 0x3f	; 63
    3428:	f8 94       	cli
    342a:	de bf       	out	0x3e, r29	; 62
    342c:	0f be       	out	0x3f, r0	; 63
    342e:	cd bf       	out	0x3d, r28	; 61
    3430:	cf 91       	pop	r28
    3432:	df 91       	pop	r29
    3434:	1f 91       	pop	r17
    3436:	0f 91       	pop	r16
    3438:	08 95       	ret

0000343a <EF_void_LCD_goto>:
 * PARAMETERS  : u8 y, u8 x.
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_goto(u8 y, u8 x)
{
    343a:	df 93       	push	r29
    343c:	cf 93       	push	r28
    343e:	cd b7       	in	r28, 0x3d	; 61
    3440:	de b7       	in	r29, 0x3e	; 62
    3442:	64 97       	sbiw	r28, 0x14	; 20
    3444:	0f b6       	in	r0, 0x3f	; 63
    3446:	f8 94       	cli
    3448:	de bf       	out	0x3e, r29	; 62
    344a:	0f be       	out	0x3f, r0	; 63
    344c:	cd bf       	out	0x3d, r28	; 61
    344e:	8b 8b       	std	Y+19, r24	; 0x13
    3450:	6c 8b       	std	Y+20, r22	; 0x14
	u8 firstAddress[] = {0x80,0xC0,0x94,0xD4};
    3452:	80 e8       	ldi	r24, 0x80	; 128
    3454:	8f 87       	std	Y+15, r24	; 0x0f
    3456:	80 ec       	ldi	r24, 0xC0	; 192
    3458:	88 8b       	std	Y+16, r24	; 0x10
    345a:	84 e9       	ldi	r24, 0x94	; 148
    345c:	89 8b       	std	Y+17, r24	; 0x11
    345e:	84 ed       	ldi	r24, 0xD4	; 212
    3460:	8a 8b       	std	Y+18, r24	; 0x12

	EF_void_LCD_send_command(firstAddress[y-1] + x-1);
    3462:	8b 89       	ldd	r24, Y+19	; 0x13
    3464:	88 2f       	mov	r24, r24
    3466:	90 e0       	ldi	r25, 0x00	; 0
    3468:	9c 01       	movw	r18, r24
    346a:	21 50       	subi	r18, 0x01	; 1
    346c:	30 40       	sbci	r19, 0x00	; 0
    346e:	ce 01       	movw	r24, r28
    3470:	0f 96       	adiw	r24, 0x0f	; 15
    3472:	fc 01       	movw	r30, r24
    3474:	e2 0f       	add	r30, r18
    3476:	f3 1f       	adc	r31, r19
    3478:	90 81       	ld	r25, Z
    347a:	8c 89       	ldd	r24, Y+20	; 0x14
    347c:	89 0f       	add	r24, r25
    347e:	81 50       	subi	r24, 0x01	; 1
    3480:	0e 94 65 13 	call	0x26ca	; 0x26ca <EF_void_LCD_send_command>
    3484:	80 e0       	ldi	r24, 0x00	; 0
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	a0 e2       	ldi	r26, 0x20	; 32
    348a:	b1 e4       	ldi	r27, 0x41	; 65
    348c:	8b 87       	std	Y+11, r24	; 0x0b
    348e:	9c 87       	std	Y+12, r25	; 0x0c
    3490:	ad 87       	std	Y+13, r26	; 0x0d
    3492:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3494:	6b 85       	ldd	r22, Y+11	; 0x0b
    3496:	7c 85       	ldd	r23, Y+12	; 0x0c
    3498:	8d 85       	ldd	r24, Y+13	; 0x0d
    349a:	9e 85       	ldd	r25, Y+14	; 0x0e
    349c:	20 e0       	ldi	r18, 0x00	; 0
    349e:	30 e0       	ldi	r19, 0x00	; 0
    34a0:	4a e7       	ldi	r20, 0x7A	; 122
    34a2:	55 e4       	ldi	r21, 0x45	; 69
    34a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34a8:	dc 01       	movw	r26, r24
    34aa:	cb 01       	movw	r24, r22
    34ac:	8f 83       	std	Y+7, r24	; 0x07
    34ae:	98 87       	std	Y+8, r25	; 0x08
    34b0:	a9 87       	std	Y+9, r26	; 0x09
    34b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34b4:	6f 81       	ldd	r22, Y+7	; 0x07
    34b6:	78 85       	ldd	r23, Y+8	; 0x08
    34b8:	89 85       	ldd	r24, Y+9	; 0x09
    34ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    34bc:	20 e0       	ldi	r18, 0x00	; 0
    34be:	30 e0       	ldi	r19, 0x00	; 0
    34c0:	40 e8       	ldi	r20, 0x80	; 128
    34c2:	5f e3       	ldi	r21, 0x3F	; 63
    34c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34c8:	88 23       	and	r24, r24
    34ca:	2c f4       	brge	.+10     	; 0x34d6 <EF_void_LCD_goto+0x9c>
		__ticks = 1;
    34cc:	81 e0       	ldi	r24, 0x01	; 1
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	9e 83       	std	Y+6, r25	; 0x06
    34d2:	8d 83       	std	Y+5, r24	; 0x05
    34d4:	3f c0       	rjmp	.+126    	; 0x3554 <EF_void_LCD_goto+0x11a>
	else if (__tmp > 65535)
    34d6:	6f 81       	ldd	r22, Y+7	; 0x07
    34d8:	78 85       	ldd	r23, Y+8	; 0x08
    34da:	89 85       	ldd	r24, Y+9	; 0x09
    34dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    34de:	20 e0       	ldi	r18, 0x00	; 0
    34e0:	3f ef       	ldi	r19, 0xFF	; 255
    34e2:	4f e7       	ldi	r20, 0x7F	; 127
    34e4:	57 e4       	ldi	r21, 0x47	; 71
    34e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34ea:	18 16       	cp	r1, r24
    34ec:	4c f5       	brge	.+82     	; 0x3540 <EF_void_LCD_goto+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    34f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    34f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    34f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    34f6:	20 e0       	ldi	r18, 0x00	; 0
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	40 e2       	ldi	r20, 0x20	; 32
    34fc:	51 e4       	ldi	r21, 0x41	; 65
    34fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3502:	dc 01       	movw	r26, r24
    3504:	cb 01       	movw	r24, r22
    3506:	bc 01       	movw	r22, r24
    3508:	cd 01       	movw	r24, r26
    350a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    350e:	dc 01       	movw	r26, r24
    3510:	cb 01       	movw	r24, r22
    3512:	9e 83       	std	Y+6, r25	; 0x06
    3514:	8d 83       	std	Y+5, r24	; 0x05
    3516:	0f c0       	rjmp	.+30     	; 0x3536 <EF_void_LCD_goto+0xfc>
    3518:	80 e9       	ldi	r24, 0x90	; 144
    351a:	91 e0       	ldi	r25, 0x01	; 1
    351c:	9c 83       	std	Y+4, r25	; 0x04
    351e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3520:	8b 81       	ldd	r24, Y+3	; 0x03
    3522:	9c 81       	ldd	r25, Y+4	; 0x04
    3524:	01 97       	sbiw	r24, 0x01	; 1
    3526:	f1 f7       	brne	.-4      	; 0x3524 <EF_void_LCD_goto+0xea>
    3528:	9c 83       	std	Y+4, r25	; 0x04
    352a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    352c:	8d 81       	ldd	r24, Y+5	; 0x05
    352e:	9e 81       	ldd	r25, Y+6	; 0x06
    3530:	01 97       	sbiw	r24, 0x01	; 1
    3532:	9e 83       	std	Y+6, r25	; 0x06
    3534:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3536:	8d 81       	ldd	r24, Y+5	; 0x05
    3538:	9e 81       	ldd	r25, Y+6	; 0x06
    353a:	00 97       	sbiw	r24, 0x00	; 0
    353c:	69 f7       	brne	.-38     	; 0x3518 <EF_void_LCD_goto+0xde>
    353e:	14 c0       	rjmp	.+40     	; 0x3568 <EF_void_LCD_goto+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3540:	6f 81       	ldd	r22, Y+7	; 0x07
    3542:	78 85       	ldd	r23, Y+8	; 0x08
    3544:	89 85       	ldd	r24, Y+9	; 0x09
    3546:	9a 85       	ldd	r25, Y+10	; 0x0a
    3548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    354c:	dc 01       	movw	r26, r24
    354e:	cb 01       	movw	r24, r22
    3550:	9e 83       	std	Y+6, r25	; 0x06
    3552:	8d 83       	std	Y+5, r24	; 0x05
    3554:	8d 81       	ldd	r24, Y+5	; 0x05
    3556:	9e 81       	ldd	r25, Y+6	; 0x06
    3558:	9a 83       	std	Y+2, r25	; 0x02
    355a:	89 83       	std	Y+1, r24	; 0x01
    355c:	89 81       	ldd	r24, Y+1	; 0x01
    355e:	9a 81       	ldd	r25, Y+2	; 0x02
    3560:	01 97       	sbiw	r24, 0x01	; 1
    3562:	f1 f7       	brne	.-4      	; 0x3560 <EF_void_LCD_goto+0x126>
    3564:	9a 83       	std	Y+2, r25	; 0x02
    3566:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    3568:	64 96       	adiw	r28, 0x14	; 20
    356a:	0f b6       	in	r0, 0x3f	; 63
    356c:	f8 94       	cli
    356e:	de bf       	out	0x3e, r29	; 62
    3570:	0f be       	out	0x3f, r0	; 63
    3572:	cd bf       	out	0x3d, r28	; 61
    3574:	cf 91       	pop	r28
    3576:	df 91       	pop	r29
    3578:	08 95       	ret

0000357a <EF_void_LCD_print_NUM>:
*				take 1 for first row, 2: for the second row
*
* Return Value: Void.
***********************************************************************/
void EF_void_LCD_print_NUM(s32 s16Numberstring,u8 u8RowNumber)
{
    357a:	df 93       	push	r29
    357c:	cf 93       	push	r28
    357e:	cd b7       	in	r28, 0x3d	; 61
    3580:	de b7       	in	r29, 0x3e	; 62
    3582:	2a 97       	sbiw	r28, 0x0a	; 10
    3584:	0f b6       	in	r0, 0x3f	; 63
    3586:	f8 94       	cli
    3588:	de bf       	out	0x3e, r29	; 62
    358a:	0f be       	out	0x3f, r0	; 63
    358c:	cd bf       	out	0x3d, r28	; 61
    358e:	99 87       	std	Y+9, r25	; 0x09
    3590:	88 87       	std	Y+8, r24	; 0x08
    3592:	6a 87       	std	Y+10, r22	; 0x0a
	u8 ArrayIndex = 0;
    3594:	19 82       	std	Y+1, r1	; 0x01
	u8 s8DisplayStr[6] = {0};
    3596:	86 e0       	ldi	r24, 0x06	; 6
    3598:	fe 01       	movw	r30, r28
    359a:	32 96       	adiw	r30, 0x02	; 2
    359c:	df 01       	movw	r26, r30
    359e:	98 2f       	mov	r25, r24
    35a0:	1d 92       	st	X+, r1
    35a2:	9a 95       	dec	r25
    35a4:	e9 f7       	brne	.-6      	; 0x35a0 <EF_void_LCD_print_NUM+0x26>
	/* convert number to ASCII */
	itoa( (int )s16Numberstring,  (char*)s8DisplayStr, 10);
    35a6:	88 85       	ldd	r24, Y+8	; 0x08
    35a8:	99 85       	ldd	r25, Y+9	; 0x09
    35aa:	9e 01       	movw	r18, r28
    35ac:	2e 5f       	subi	r18, 0xFE	; 254
    35ae:	3f 4f       	sbci	r19, 0xFF	; 255
    35b0:	b9 01       	movw	r22, r18
    35b2:	4a e0       	ldi	r20, 0x0A	; 10
    35b4:	50 e0       	ldi	r21, 0x00	; 0
    35b6:	0e 94 24 20 	call	0x4048	; 0x4048 <itoa>
	for(ArrayIndex = 0; s8DisplayStr[ArrayIndex] != 0; ArrayIndex++)
    35ba:	19 82       	std	Y+1, r1	; 0x01
    35bc:	15 c0       	rjmp	.+42     	; 0x35e8 <EF_void_LCD_print_NUM+0x6e>
	{
		EF_void_LCD_goto(u8RowNumber, (ArrayIndex + 1));
    35be:	89 81       	ldd	r24, Y+1	; 0x01
    35c0:	98 2f       	mov	r25, r24
    35c2:	9f 5f       	subi	r25, 0xFF	; 255
    35c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    35c6:	69 2f       	mov	r22, r25
    35c8:	0e 94 1d 1a 	call	0x343a	; 0x343a <EF_void_LCD_goto>
		EF_void_LCD_send_data(s8DisplayStr[ArrayIndex]);
    35cc:	89 81       	ldd	r24, Y+1	; 0x01
    35ce:	28 2f       	mov	r18, r24
    35d0:	30 e0       	ldi	r19, 0x00	; 0
    35d2:	ce 01       	movw	r24, r28
    35d4:	02 96       	adiw	r24, 0x02	; 2
    35d6:	fc 01       	movw	r30, r24
    35d8:	e2 0f       	add	r30, r18
    35da:	f3 1f       	adc	r31, r19
    35dc:	80 81       	ld	r24, Z
    35de:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <EF_void_LCD_send_data>
{
	u8 ArrayIndex = 0;
	u8 s8DisplayStr[6] = {0};
	/* convert number to ASCII */
	itoa( (int )s16Numberstring,  (char*)s8DisplayStr, 10);
	for(ArrayIndex = 0; s8DisplayStr[ArrayIndex] != 0; ArrayIndex++)
    35e2:	89 81       	ldd	r24, Y+1	; 0x01
    35e4:	8f 5f       	subi	r24, 0xFF	; 255
    35e6:	89 83       	std	Y+1, r24	; 0x01
    35e8:	89 81       	ldd	r24, Y+1	; 0x01
    35ea:	28 2f       	mov	r18, r24
    35ec:	30 e0       	ldi	r19, 0x00	; 0
    35ee:	ce 01       	movw	r24, r28
    35f0:	02 96       	adiw	r24, 0x02	; 2
    35f2:	fc 01       	movw	r30, r24
    35f4:	e2 0f       	add	r30, r18
    35f6:	f3 1f       	adc	r31, r19
    35f8:	80 81       	ld	r24, Z
    35fa:	88 23       	and	r24, r24
    35fc:	01 f7       	brne	.-64     	; 0x35be <EF_void_LCD_print_NUM+0x44>
	{
		EF_void_LCD_goto(u8RowNumber, (ArrayIndex + 1));
		EF_void_LCD_send_data(s8DisplayStr[ArrayIndex]);
	}
}
    35fe:	2a 96       	adiw	r28, 0x0a	; 10
    3600:	0f b6       	in	r0, 0x3f	; 63
    3602:	f8 94       	cli
    3604:	de bf       	out	0x3e, r29	; 62
    3606:	0f be       	out	0x3f, r0	; 63
    3608:	cd bf       	out	0x3d, r28	; 61
    360a:	cf 91       	pop	r28
    360c:	df 91       	pop	r29
    360e:	08 95       	ret

00003610 <EF_void_LCD_print>:
* PARAMETERS  : u8 *string:  String User want to send.
*
* Return Value: Void.
***********************************************************************/
void EF_void_LCD_print(unsigned char *string)
{
    3610:	df 93       	push	r29
    3612:	cf 93       	push	r28
    3614:	00 d0       	rcall	.+0      	; 0x3616 <EF_void_LCD_print+0x6>
    3616:	0f 92       	push	r0
    3618:	cd b7       	in	r28, 0x3d	; 61
    361a:	de b7       	in	r29, 0x3e	; 62
    361c:	9b 83       	std	Y+3, r25	; 0x03
    361e:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    3620:	19 82       	std	Y+1, r1	; 0x01
    3622:	0e c0       	rjmp	.+28     	; 0x3640 <EF_void_LCD_print+0x30>

	while(string[i]!=0)
	{
		EF_void_LCD_send_data(string[i]);
    3624:	89 81       	ldd	r24, Y+1	; 0x01
    3626:	28 2f       	mov	r18, r24
    3628:	30 e0       	ldi	r19, 0x00	; 0
    362a:	8a 81       	ldd	r24, Y+2	; 0x02
    362c:	9b 81       	ldd	r25, Y+3	; 0x03
    362e:	fc 01       	movw	r30, r24
    3630:	e2 0f       	add	r30, r18
    3632:	f3 1f       	adc	r31, r19
    3634:	80 81       	ld	r24, Z
    3636:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <EF_void_LCD_send_data>
		i++;
    363a:	89 81       	ldd	r24, Y+1	; 0x01
    363c:	8f 5f       	subi	r24, 0xFF	; 255
    363e:	89 83       	std	Y+1, r24	; 0x01
***********************************************************************/
void EF_void_LCD_print(unsigned char *string)
{
	u8 i = 0;

	while(string[i]!=0)
    3640:	89 81       	ldd	r24, Y+1	; 0x01
    3642:	28 2f       	mov	r18, r24
    3644:	30 e0       	ldi	r19, 0x00	; 0
    3646:	8a 81       	ldd	r24, Y+2	; 0x02
    3648:	9b 81       	ldd	r25, Y+3	; 0x03
    364a:	fc 01       	movw	r30, r24
    364c:	e2 0f       	add	r30, r18
    364e:	f3 1f       	adc	r31, r19
    3650:	80 81       	ld	r24, Z
    3652:	88 23       	and	r24, r24
    3654:	39 f7       	brne	.-50     	; 0x3624 <EF_void_LCD_print+0x14>
	{
		EF_void_LCD_send_data(string[i]);
		i++;
	}
}
    3656:	0f 90       	pop	r0
    3658:	0f 90       	pop	r0
    365a:	0f 90       	pop	r0
    365c:	cf 91       	pop	r28
    365e:	df 91       	pop	r29
    3660:	08 95       	ret

00003662 <EF_void_LCD_print_ByLength>:
* 				u8  length:  number of characters to be displayed
*
* Return Value: Void.
***********************************************************************/
void EF_void_LCD_print_ByLength(unsigned char *string, u8 length)
{
    3662:	df 93       	push	r29
    3664:	cf 93       	push	r28
    3666:	00 d0       	rcall	.+0      	; 0x3668 <EF_void_LCD_print_ByLength+0x6>
    3668:	00 d0       	rcall	.+0      	; 0x366a <EF_void_LCD_print_ByLength+0x8>
    366a:	cd b7       	in	r28, 0x3d	; 61
    366c:	de b7       	in	r29, 0x3e	; 62
    366e:	9b 83       	std	Y+3, r25	; 0x03
    3670:	8a 83       	std	Y+2, r24	; 0x02
    3672:	6c 83       	std	Y+4, r22	; 0x04
	u8 i = 0;
    3674:	19 82       	std	Y+1, r1	; 0x01
    3676:	0e c0       	rjmp	.+28     	; 0x3694 <EF_void_LCD_print_ByLength+0x32>

	while( i < length)
	{
		EF_void_LCD_send_data(string[i]);
    3678:	89 81       	ldd	r24, Y+1	; 0x01
    367a:	28 2f       	mov	r18, r24
    367c:	30 e0       	ldi	r19, 0x00	; 0
    367e:	8a 81       	ldd	r24, Y+2	; 0x02
    3680:	9b 81       	ldd	r25, Y+3	; 0x03
    3682:	fc 01       	movw	r30, r24
    3684:	e2 0f       	add	r30, r18
    3686:	f3 1f       	adc	r31, r19
    3688:	80 81       	ld	r24, Z
    368a:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <EF_void_LCD_send_data>
		i++;
    368e:	89 81       	ldd	r24, Y+1	; 0x01
    3690:	8f 5f       	subi	r24, 0xFF	; 255
    3692:	89 83       	std	Y+1, r24	; 0x01
***********************************************************************/
void EF_void_LCD_print_ByLength(unsigned char *string, u8 length)
{
	u8 i = 0;

	while( i < length)
    3694:	99 81       	ldd	r25, Y+1	; 0x01
    3696:	8c 81       	ldd	r24, Y+4	; 0x04
    3698:	98 17       	cp	r25, r24
    369a:	70 f3       	brcs	.-36     	; 0x3678 <EF_void_LCD_print_ByLength+0x16>
	{
		EF_void_LCD_send_data(string[i]);
		i++;
	}
}
    369c:	0f 90       	pop	r0
    369e:	0f 90       	pop	r0
    36a0:	0f 90       	pop	r0
    36a2:	0f 90       	pop	r0
    36a4:	cf 91       	pop	r28
    36a6:	df 91       	pop	r29
    36a8:	08 95       	ret

000036aa <EF_void_LCD_Clear_Screen>:
* PARAMETERS  : Void.
*
* Return Value: Void.
***********************************************************************/
void EF_void_LCD_Clear_Screen(void)
{
    36aa:	df 93       	push	r29
    36ac:	cf 93       	push	r28
    36ae:	cd b7       	in	r28, 0x3d	; 61
    36b0:	de b7       	in	r29, 0x3e	; 62
    36b2:	a6 97       	sbiw	r28, 0x26	; 38
    36b4:	0f b6       	in	r0, 0x3f	; 63
    36b6:	f8 94       	cli
    36b8:	de bf       	out	0x3e, r29	; 62
    36ba:	0f be       	out	0x3f, r0	; 63
    36bc:	cd bf       	out	0x3d, r28	; 61
	EF_void_LCD_send_command(1<<0);
    36be:	81 e0       	ldi	r24, 0x01	; 1
    36c0:	0e 94 65 13 	call	0x26ca	; 0x26ca <EF_void_LCD_send_command>
    36c4:	80 e0       	ldi	r24, 0x00	; 0
    36c6:	90 e0       	ldi	r25, 0x00	; 0
    36c8:	a0 e0       	ldi	r26, 0x00	; 0
    36ca:	b0 e4       	ldi	r27, 0x40	; 64
    36cc:	8b a3       	std	Y+35, r24	; 0x23
    36ce:	9c a3       	std	Y+36, r25	; 0x24
    36d0:	ad a3       	std	Y+37, r26	; 0x25
    36d2:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    36d4:	6b a1       	ldd	r22, Y+35	; 0x23
    36d6:	7c a1       	ldd	r23, Y+36	; 0x24
    36d8:	8d a1       	ldd	r24, Y+37	; 0x25
    36da:	9e a1       	ldd	r25, Y+38	; 0x26
    36dc:	2b ea       	ldi	r18, 0xAB	; 171
    36de:	3a ea       	ldi	r19, 0xAA	; 170
    36e0:	4a ea       	ldi	r20, 0xAA	; 170
    36e2:	50 e4       	ldi	r21, 0x40	; 64
    36e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36e8:	dc 01       	movw	r26, r24
    36ea:	cb 01       	movw	r24, r22
    36ec:	8f 8f       	std	Y+31, r24	; 0x1f
    36ee:	98 a3       	std	Y+32, r25	; 0x20
    36f0:	a9 a3       	std	Y+33, r26	; 0x21
    36f2:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    36f4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    36f6:	78 a1       	ldd	r23, Y+32	; 0x20
    36f8:	89 a1       	ldd	r24, Y+33	; 0x21
    36fa:	9a a1       	ldd	r25, Y+34	; 0x22
    36fc:	20 e0       	ldi	r18, 0x00	; 0
    36fe:	30 e0       	ldi	r19, 0x00	; 0
    3700:	40 e8       	ldi	r20, 0x80	; 128
    3702:	5f e3       	ldi	r21, 0x3F	; 63
    3704:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3708:	88 23       	and	r24, r24
    370a:	1c f4       	brge	.+6      	; 0x3712 <EF_void_LCD_Clear_Screen+0x68>
		__ticks = 1;
    370c:	81 e0       	ldi	r24, 0x01	; 1
    370e:	8e 8f       	std	Y+30, r24	; 0x1e
    3710:	91 c0       	rjmp	.+290    	; 0x3834 <EF_void_LCD_Clear_Screen+0x18a>
	else if (__tmp > 255)
    3712:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3714:	78 a1       	ldd	r23, Y+32	; 0x20
    3716:	89 a1       	ldd	r24, Y+33	; 0x21
    3718:	9a a1       	ldd	r25, Y+34	; 0x22
    371a:	20 e0       	ldi	r18, 0x00	; 0
    371c:	30 e0       	ldi	r19, 0x00	; 0
    371e:	4f e7       	ldi	r20, 0x7F	; 127
    3720:	53 e4       	ldi	r21, 0x43	; 67
    3722:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3726:	18 16       	cp	r1, r24
    3728:	0c f0       	brlt	.+2      	; 0x372c <EF_void_LCD_Clear_Screen+0x82>
    372a:	7b c0       	rjmp	.+246    	; 0x3822 <EF_void_LCD_Clear_Screen+0x178>
	{
		_delay_ms(__us / 1000.0);
    372c:	6b a1       	ldd	r22, Y+35	; 0x23
    372e:	7c a1       	ldd	r23, Y+36	; 0x24
    3730:	8d a1       	ldd	r24, Y+37	; 0x25
    3732:	9e a1       	ldd	r25, Y+38	; 0x26
    3734:	20 e0       	ldi	r18, 0x00	; 0
    3736:	30 e0       	ldi	r19, 0x00	; 0
    3738:	4a e7       	ldi	r20, 0x7A	; 122
    373a:	54 e4       	ldi	r21, 0x44	; 68
    373c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3740:	dc 01       	movw	r26, r24
    3742:	cb 01       	movw	r24, r22
    3744:	8a 8f       	std	Y+26, r24	; 0x1a
    3746:	9b 8f       	std	Y+27, r25	; 0x1b
    3748:	ac 8f       	std	Y+28, r26	; 0x1c
    374a:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    374c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    374e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3750:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3752:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3754:	20 e0       	ldi	r18, 0x00	; 0
    3756:	30 e0       	ldi	r19, 0x00	; 0
    3758:	4a e7       	ldi	r20, 0x7A	; 122
    375a:	55 e4       	ldi	r21, 0x45	; 69
    375c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3760:	dc 01       	movw	r26, r24
    3762:	cb 01       	movw	r24, r22
    3764:	8e 8b       	std	Y+22, r24	; 0x16
    3766:	9f 8b       	std	Y+23, r25	; 0x17
    3768:	a8 8f       	std	Y+24, r26	; 0x18
    376a:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    376c:	6e 89       	ldd	r22, Y+22	; 0x16
    376e:	7f 89       	ldd	r23, Y+23	; 0x17
    3770:	88 8d       	ldd	r24, Y+24	; 0x18
    3772:	99 8d       	ldd	r25, Y+25	; 0x19
    3774:	20 e0       	ldi	r18, 0x00	; 0
    3776:	30 e0       	ldi	r19, 0x00	; 0
    3778:	40 e8       	ldi	r20, 0x80	; 128
    377a:	5f e3       	ldi	r21, 0x3F	; 63
    377c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3780:	88 23       	and	r24, r24
    3782:	2c f4       	brge	.+10     	; 0x378e <EF_void_LCD_Clear_Screen+0xe4>
		__ticks = 1;
    3784:	81 e0       	ldi	r24, 0x01	; 1
    3786:	90 e0       	ldi	r25, 0x00	; 0
    3788:	9d 8b       	std	Y+21, r25	; 0x15
    378a:	8c 8b       	std	Y+20, r24	; 0x14
    378c:	3f c0       	rjmp	.+126    	; 0x380c <EF_void_LCD_Clear_Screen+0x162>
	else if (__tmp > 65535)
    378e:	6e 89       	ldd	r22, Y+22	; 0x16
    3790:	7f 89       	ldd	r23, Y+23	; 0x17
    3792:	88 8d       	ldd	r24, Y+24	; 0x18
    3794:	99 8d       	ldd	r25, Y+25	; 0x19
    3796:	20 e0       	ldi	r18, 0x00	; 0
    3798:	3f ef       	ldi	r19, 0xFF	; 255
    379a:	4f e7       	ldi	r20, 0x7F	; 127
    379c:	57 e4       	ldi	r21, 0x47	; 71
    379e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37a2:	18 16       	cp	r1, r24
    37a4:	4c f5       	brge	.+82     	; 0x37f8 <EF_void_LCD_Clear_Screen+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37a6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    37a8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    37aa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    37ac:	9d 8d       	ldd	r25, Y+29	; 0x1d
    37ae:	20 e0       	ldi	r18, 0x00	; 0
    37b0:	30 e0       	ldi	r19, 0x00	; 0
    37b2:	40 e2       	ldi	r20, 0x20	; 32
    37b4:	51 e4       	ldi	r21, 0x41	; 65
    37b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ba:	dc 01       	movw	r26, r24
    37bc:	cb 01       	movw	r24, r22
    37be:	bc 01       	movw	r22, r24
    37c0:	cd 01       	movw	r24, r26
    37c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37c6:	dc 01       	movw	r26, r24
    37c8:	cb 01       	movw	r24, r22
    37ca:	9d 8b       	std	Y+21, r25	; 0x15
    37cc:	8c 8b       	std	Y+20, r24	; 0x14
    37ce:	0f c0       	rjmp	.+30     	; 0x37ee <EF_void_LCD_Clear_Screen+0x144>
    37d0:	80 e9       	ldi	r24, 0x90	; 144
    37d2:	91 e0       	ldi	r25, 0x01	; 1
    37d4:	9b 8b       	std	Y+19, r25	; 0x13
    37d6:	8a 8b       	std	Y+18, r24	; 0x12
    37d8:	8a 89       	ldd	r24, Y+18	; 0x12
    37da:	9b 89       	ldd	r25, Y+19	; 0x13
    37dc:	01 97       	sbiw	r24, 0x01	; 1
    37de:	f1 f7       	brne	.-4      	; 0x37dc <EF_void_LCD_Clear_Screen+0x132>
    37e0:	9b 8b       	std	Y+19, r25	; 0x13
    37e2:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37e4:	8c 89       	ldd	r24, Y+20	; 0x14
    37e6:	9d 89       	ldd	r25, Y+21	; 0x15
    37e8:	01 97       	sbiw	r24, 0x01	; 1
    37ea:	9d 8b       	std	Y+21, r25	; 0x15
    37ec:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37ee:	8c 89       	ldd	r24, Y+20	; 0x14
    37f0:	9d 89       	ldd	r25, Y+21	; 0x15
    37f2:	00 97       	sbiw	r24, 0x00	; 0
    37f4:	69 f7       	brne	.-38     	; 0x37d0 <EF_void_LCD_Clear_Screen+0x126>
    37f6:	24 c0       	rjmp	.+72     	; 0x3840 <EF_void_LCD_Clear_Screen+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37f8:	6e 89       	ldd	r22, Y+22	; 0x16
    37fa:	7f 89       	ldd	r23, Y+23	; 0x17
    37fc:	88 8d       	ldd	r24, Y+24	; 0x18
    37fe:	99 8d       	ldd	r25, Y+25	; 0x19
    3800:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3804:	dc 01       	movw	r26, r24
    3806:	cb 01       	movw	r24, r22
    3808:	9d 8b       	std	Y+21, r25	; 0x15
    380a:	8c 8b       	std	Y+20, r24	; 0x14
    380c:	8c 89       	ldd	r24, Y+20	; 0x14
    380e:	9d 89       	ldd	r25, Y+21	; 0x15
    3810:	99 8b       	std	Y+17, r25	; 0x11
    3812:	88 8b       	std	Y+16, r24	; 0x10
    3814:	88 89       	ldd	r24, Y+16	; 0x10
    3816:	99 89       	ldd	r25, Y+17	; 0x11
    3818:	01 97       	sbiw	r24, 0x01	; 1
    381a:	f1 f7       	brne	.-4      	; 0x3818 <EF_void_LCD_Clear_Screen+0x16e>
    381c:	99 8b       	std	Y+17, r25	; 0x11
    381e:	88 8b       	std	Y+16, r24	; 0x10
    3820:	0f c0       	rjmp	.+30     	; 0x3840 <EF_void_LCD_Clear_Screen+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3822:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3824:	78 a1       	ldd	r23, Y+32	; 0x20
    3826:	89 a1       	ldd	r24, Y+33	; 0x21
    3828:	9a a1       	ldd	r25, Y+34	; 0x22
    382a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    382e:	dc 01       	movw	r26, r24
    3830:	cb 01       	movw	r24, r22
    3832:	8e 8f       	std	Y+30, r24	; 0x1e
    3834:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3836:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3838:	8f 85       	ldd	r24, Y+15	; 0x0f
    383a:	8a 95       	dec	r24
    383c:	f1 f7       	brne	.-4      	; 0x383a <EF_void_LCD_Clear_Screen+0x190>
    383e:	8f 87       	std	Y+15, r24	; 0x0f
    3840:	80 e0       	ldi	r24, 0x00	; 0
    3842:	90 e0       	ldi	r25, 0x00	; 0
    3844:	a0 e2       	ldi	r26, 0x20	; 32
    3846:	b1 e4       	ldi	r27, 0x41	; 65
    3848:	8b 87       	std	Y+11, r24	; 0x0b
    384a:	9c 87       	std	Y+12, r25	; 0x0c
    384c:	ad 87       	std	Y+13, r26	; 0x0d
    384e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3850:	6b 85       	ldd	r22, Y+11	; 0x0b
    3852:	7c 85       	ldd	r23, Y+12	; 0x0c
    3854:	8d 85       	ldd	r24, Y+13	; 0x0d
    3856:	9e 85       	ldd	r25, Y+14	; 0x0e
    3858:	20 e0       	ldi	r18, 0x00	; 0
    385a:	30 e0       	ldi	r19, 0x00	; 0
    385c:	4a e7       	ldi	r20, 0x7A	; 122
    385e:	55 e4       	ldi	r21, 0x45	; 69
    3860:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3864:	dc 01       	movw	r26, r24
    3866:	cb 01       	movw	r24, r22
    3868:	8f 83       	std	Y+7, r24	; 0x07
    386a:	98 87       	std	Y+8, r25	; 0x08
    386c:	a9 87       	std	Y+9, r26	; 0x09
    386e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3870:	6f 81       	ldd	r22, Y+7	; 0x07
    3872:	78 85       	ldd	r23, Y+8	; 0x08
    3874:	89 85       	ldd	r24, Y+9	; 0x09
    3876:	9a 85       	ldd	r25, Y+10	; 0x0a
    3878:	20 e0       	ldi	r18, 0x00	; 0
    387a:	30 e0       	ldi	r19, 0x00	; 0
    387c:	40 e8       	ldi	r20, 0x80	; 128
    387e:	5f e3       	ldi	r21, 0x3F	; 63
    3880:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3884:	88 23       	and	r24, r24
    3886:	2c f4       	brge	.+10     	; 0x3892 <EF_void_LCD_Clear_Screen+0x1e8>
		__ticks = 1;
    3888:	81 e0       	ldi	r24, 0x01	; 1
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	9e 83       	std	Y+6, r25	; 0x06
    388e:	8d 83       	std	Y+5, r24	; 0x05
    3890:	3f c0       	rjmp	.+126    	; 0x3910 <EF_void_LCD_Clear_Screen+0x266>
	else if (__tmp > 65535)
    3892:	6f 81       	ldd	r22, Y+7	; 0x07
    3894:	78 85       	ldd	r23, Y+8	; 0x08
    3896:	89 85       	ldd	r24, Y+9	; 0x09
    3898:	9a 85       	ldd	r25, Y+10	; 0x0a
    389a:	20 e0       	ldi	r18, 0x00	; 0
    389c:	3f ef       	ldi	r19, 0xFF	; 255
    389e:	4f e7       	ldi	r20, 0x7F	; 127
    38a0:	57 e4       	ldi	r21, 0x47	; 71
    38a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38a6:	18 16       	cp	r1, r24
    38a8:	4c f5       	brge	.+82     	; 0x38fc <EF_void_LCD_Clear_Screen+0x252>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    38ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    38ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    38b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    38b2:	20 e0       	ldi	r18, 0x00	; 0
    38b4:	30 e0       	ldi	r19, 0x00	; 0
    38b6:	40 e2       	ldi	r20, 0x20	; 32
    38b8:	51 e4       	ldi	r21, 0x41	; 65
    38ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38be:	dc 01       	movw	r26, r24
    38c0:	cb 01       	movw	r24, r22
    38c2:	bc 01       	movw	r22, r24
    38c4:	cd 01       	movw	r24, r26
    38c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ca:	dc 01       	movw	r26, r24
    38cc:	cb 01       	movw	r24, r22
    38ce:	9e 83       	std	Y+6, r25	; 0x06
    38d0:	8d 83       	std	Y+5, r24	; 0x05
    38d2:	0f c0       	rjmp	.+30     	; 0x38f2 <EF_void_LCD_Clear_Screen+0x248>
    38d4:	80 e9       	ldi	r24, 0x90	; 144
    38d6:	91 e0       	ldi	r25, 0x01	; 1
    38d8:	9c 83       	std	Y+4, r25	; 0x04
    38da:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    38dc:	8b 81       	ldd	r24, Y+3	; 0x03
    38de:	9c 81       	ldd	r25, Y+4	; 0x04
    38e0:	01 97       	sbiw	r24, 0x01	; 1
    38e2:	f1 f7       	brne	.-4      	; 0x38e0 <EF_void_LCD_Clear_Screen+0x236>
    38e4:	9c 83       	std	Y+4, r25	; 0x04
    38e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38e8:	8d 81       	ldd	r24, Y+5	; 0x05
    38ea:	9e 81       	ldd	r25, Y+6	; 0x06
    38ec:	01 97       	sbiw	r24, 0x01	; 1
    38ee:	9e 83       	std	Y+6, r25	; 0x06
    38f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38f2:	8d 81       	ldd	r24, Y+5	; 0x05
    38f4:	9e 81       	ldd	r25, Y+6	; 0x06
    38f6:	00 97       	sbiw	r24, 0x00	; 0
    38f8:	69 f7       	brne	.-38     	; 0x38d4 <EF_void_LCD_Clear_Screen+0x22a>
    38fa:	14 c0       	rjmp	.+40     	; 0x3924 <EF_void_LCD_Clear_Screen+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38fc:	6f 81       	ldd	r22, Y+7	; 0x07
    38fe:	78 85       	ldd	r23, Y+8	; 0x08
    3900:	89 85       	ldd	r24, Y+9	; 0x09
    3902:	9a 85       	ldd	r25, Y+10	; 0x0a
    3904:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3908:	dc 01       	movw	r26, r24
    390a:	cb 01       	movw	r24, r22
    390c:	9e 83       	std	Y+6, r25	; 0x06
    390e:	8d 83       	std	Y+5, r24	; 0x05
    3910:	8d 81       	ldd	r24, Y+5	; 0x05
    3912:	9e 81       	ldd	r25, Y+6	; 0x06
    3914:	9a 83       	std	Y+2, r25	; 0x02
    3916:	89 83       	std	Y+1, r24	; 0x01
    3918:	89 81       	ldd	r24, Y+1	; 0x01
    391a:	9a 81       	ldd	r25, Y+2	; 0x02
    391c:	01 97       	sbiw	r24, 0x01	; 1
    391e:	f1 f7       	brne	.-4      	; 0x391c <EF_void_LCD_Clear_Screen+0x272>
    3920:	9a 83       	std	Y+2, r25	; 0x02
    3922:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2);
	_delay_ms(10);
}
    3924:	a6 96       	adiw	r28, 0x26	; 38
    3926:	0f b6       	in	r0, 0x3f	; 63
    3928:	f8 94       	cli
    392a:	de bf       	out	0x3e, r29	; 62
    392c:	0f be       	out	0x3f, r0	; 63
    392e:	cd bf       	out	0x3d, r28	; 61
    3930:	cf 91       	pop	r28
    3932:	df 91       	pop	r29
    3934:	08 95       	ret

00003936 <EF_void_uploadCustomChar>:
*
* Return Value: Void.
***********************************************************************/
void EF_void_uploadCustomChar(u8 location, unsigned char *character)

{
    3936:	df 93       	push	r29
    3938:	cf 93       	push	r28
    393a:	00 d0       	rcall	.+0      	; 0x393c <EF_void_uploadCustomChar+0x6>
    393c:	00 d0       	rcall	.+0      	; 0x393e <EF_void_uploadCustomChar+0x8>
    393e:	cd b7       	in	r28, 0x3d	; 61
    3940:	de b7       	in	r29, 0x3e	; 62
    3942:	8a 83       	std	Y+2, r24	; 0x02
    3944:	7c 83       	std	Y+4, r23	; 0x04
    3946:	6b 83       	std	Y+3, r22	; 0x03
	u8 ArrayIndex;
	/* the Add offset must be 0 to 7*/
	if (location < 8)
    3948:	8a 81       	ldd	r24, Y+2	; 0x02
    394a:	88 30       	cpi	r24, 0x08	; 8
    394c:	f8 f4       	brcc	.+62     	; 0x398c <EF_void_uploadCustomChar+0x56>
	{
		EF_void_LCD_send_command(0x40 + (location * 8));
    394e:	8a 81       	ldd	r24, Y+2	; 0x02
    3950:	88 2f       	mov	r24, r24
    3952:	90 e0       	ldi	r25, 0x00	; 0
    3954:	08 96       	adiw	r24, 0x08	; 8
    3956:	88 0f       	add	r24, r24
    3958:	99 1f       	adc	r25, r25
    395a:	88 0f       	add	r24, r24
    395c:	99 1f       	adc	r25, r25
    395e:	88 0f       	add	r24, r24
    3960:	99 1f       	adc	r25, r25
    3962:	0e 94 65 13 	call	0x26ca	; 0x26ca <EF_void_LCD_send_command>
		for (ArrayIndex = 0; ArrayIndex < 8; ArrayIndex++)
    3966:	19 82       	std	Y+1, r1	; 0x01
    3968:	0e c0       	rjmp	.+28     	; 0x3986 <EF_void_uploadCustomChar+0x50>
		{
			EF_void_LCD_send_data(character[ArrayIndex]);
    396a:	89 81       	ldd	r24, Y+1	; 0x01
    396c:	28 2f       	mov	r18, r24
    396e:	30 e0       	ldi	r19, 0x00	; 0
    3970:	8b 81       	ldd	r24, Y+3	; 0x03
    3972:	9c 81       	ldd	r25, Y+4	; 0x04
    3974:	fc 01       	movw	r30, r24
    3976:	e2 0f       	add	r30, r18
    3978:	f3 1f       	adc	r31, r19
    397a:	80 81       	ld	r24, Z
    397c:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <EF_void_LCD_send_data>
	u8 ArrayIndex;
	/* the Add offset must be 0 to 7*/
	if (location < 8)
	{
		EF_void_LCD_send_command(0x40 + (location * 8));
		for (ArrayIndex = 0; ArrayIndex < 8; ArrayIndex++)
    3980:	89 81       	ldd	r24, Y+1	; 0x01
    3982:	8f 5f       	subi	r24, 0xFF	; 255
    3984:	89 83       	std	Y+1, r24	; 0x01
    3986:	89 81       	ldd	r24, Y+1	; 0x01
    3988:	88 30       	cpi	r24, 0x08	; 8
    398a:	78 f3       	brcs	.-34     	; 0x396a <EF_void_uploadCustomChar+0x34>
	else
	{
		/* TODO: return Error */
	}

}
    398c:	0f 90       	pop	r0
    398e:	0f 90       	pop	r0
    3990:	0f 90       	pop	r0
    3992:	0f 90       	pop	r0
    3994:	cf 91       	pop	r28
    3996:	df 91       	pop	r29
    3998:	08 95       	ret

0000399a <EF_void_LCD_HextoASCII>:
* PARAMETERS  : hex: pointer to hex (one byte)
*
* Return Value: Void.
***********************************************************************/
void EF_void_LCD_HextoASCII(u8 *hex)
{
    399a:	df 93       	push	r29
    399c:	cf 93       	push	r28
    399e:	00 d0       	rcall	.+0      	; 0x39a0 <EF_void_LCD_HextoASCII+0x6>
    39a0:	00 d0       	rcall	.+0      	; 0x39a2 <EF_void_LCD_HextoASCII+0x8>
    39a2:	cd b7       	in	r28, 0x3d	; 61
    39a4:	de b7       	in	r29, 0x3e	; 62
    39a6:	9c 83       	std	Y+4, r25	; 0x04
    39a8:	8b 83       	std	Y+3, r24	; 0x03

	u8 temp_L = 0;                    // dummy variable that will hold LSBs of Hex number
    39aa:	1a 82       	std	Y+2, r1	; 0x02
	u8 temp_H = 0;                    // dummy variable that will hold MSBs of Hex number
    39ac:	19 82       	std	Y+1, r1	; 0x01

	temp_H = *hex & 0xF0;           // Obtain the upper 4 bits (MSBs) of hex number
    39ae:	eb 81       	ldd	r30, Y+3	; 0x03
    39b0:	fc 81       	ldd	r31, Y+4	; 0x04
    39b2:	80 81       	ld	r24, Z
    39b4:	80 7f       	andi	r24, 0xF0	; 240
    39b6:	89 83       	std	Y+1, r24	; 0x01
	temp_H = temp_H >> 4;           //
    39b8:	89 81       	ldd	r24, Y+1	; 0x01
    39ba:	82 95       	swap	r24
    39bc:	8f 70       	andi	r24, 0x0F	; 15
    39be:	89 83       	std	Y+1, r24	; 0x01

	if(temp_H >9)                   // Check if the number is a letter
    39c0:	89 81       	ldd	r24, Y+1	; 0x01
    39c2:	8a 30       	cpi	r24, 0x0A	; 10
    39c4:	20 f0       	brcs	.+8      	; 0x39ce <EF_void_LCD_HextoASCII+0x34>
	{
		temp_H += 0x37;             // Convert the number to a letter in ASCII
    39c6:	89 81       	ldd	r24, Y+1	; 0x01
    39c8:	89 5c       	subi	r24, 0xC9	; 201
    39ca:	89 83       	std	Y+1, r24	; 0x01
    39cc:	03 c0       	rjmp	.+6      	; 0x39d4 <EF_void_LCD_HextoASCII+0x3a>
	}
	else
	{
		temp_H += 0x30;             // Convert the number to ASCII number
    39ce:	89 81       	ldd	r24, Y+1	; 0x01
    39d0:	80 5d       	subi	r24, 0xD0	; 208
    39d2:	89 83       	std	Y+1, r24	; 0x01
	}

	EF_void_LCD_send_data(temp_H);           // Display the number
    39d4:	89 81       	ldd	r24, Y+1	; 0x01
    39d6:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <EF_void_LCD_send_data>

	temp_L = *hex & 0x0F;           // Obtain the lower 4 bits (LSBs) of hex number
    39da:	eb 81       	ldd	r30, Y+3	; 0x03
    39dc:	fc 81       	ldd	r31, Y+4	; 0x04
    39de:	80 81       	ld	r24, Z
    39e0:	8f 70       	andi	r24, 0x0F	; 15
    39e2:	8a 83       	std	Y+2, r24	; 0x02

	if(temp_L >9)                   // Check if the the number is a letter
    39e4:	8a 81       	ldd	r24, Y+2	; 0x02
    39e6:	8a 30       	cpi	r24, 0x0A	; 10
    39e8:	20 f0       	brcs	.+8      	; 0x39f2 <EF_void_LCD_HextoASCII+0x58>
	{
		temp_L += 0x37;             // Convert the number to a letter in ASCII
    39ea:	8a 81       	ldd	r24, Y+2	; 0x02
    39ec:	89 5c       	subi	r24, 0xC9	; 201
    39ee:	8a 83       	std	Y+2, r24	; 0x02
    39f0:	03 c0       	rjmp	.+6      	; 0x39f8 <EF_void_LCD_HextoASCII+0x5e>
	}
	else
	{
		temp_L += 0x30;             // Convert the number to ASCII number
    39f2:	8a 81       	ldd	r24, Y+2	; 0x02
    39f4:	80 5d       	subi	r24, 0xD0	; 208
    39f6:	8a 83       	std	Y+2, r24	; 0x02
	}

	EF_void_LCD_send_data(temp_L);           // Display the number
    39f8:	8a 81       	ldd	r24, Y+2	; 0x02
    39fa:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <EF_void_LCD_send_data>
}
    39fe:	0f 90       	pop	r0
    3a00:	0f 90       	pop	r0
    3a02:	0f 90       	pop	r0
    3a04:	0f 90       	pop	r0
    3a06:	cf 91       	pop	r28
    3a08:	df 91       	pop	r29
    3a0a:	08 95       	ret

00003a0c <GPS_inlinevidAsciiToInt>:
//
//
//}

void GPS_inlinevidAsciiToInt(const u8* GPS_p2Constu8_DataBuffer , f32** Copy_pf32Lat , f32** Copy_pf32Long , u8** Copy_pu8LatDir , u8** Copy_pu8LongDir  )
{
    3a0c:	0f 93       	push	r16
    3a0e:	1f 93       	push	r17
    3a10:	df 93       	push	r29
    3a12:	cf 93       	push	r28
    3a14:	cd b7       	in	r28, 0x3d	; 61
    3a16:	de b7       	in	r29, 0x3e	; 62
    3a18:	2f 97       	sbiw	r28, 0x0f	; 15
    3a1a:	0f b6       	in	r0, 0x3f	; 63
    3a1c:	f8 94       	cli
    3a1e:	de bf       	out	0x3e, r29	; 62
    3a20:	0f be       	out	0x3f, r0	; 63
    3a22:	cd bf       	out	0x3d, r28	; 61
    3a24:	9f 83       	std	Y+7, r25	; 0x07
    3a26:	8e 83       	std	Y+6, r24	; 0x06
    3a28:	79 87       	std	Y+9, r23	; 0x09
    3a2a:	68 87       	std	Y+8, r22	; 0x08
    3a2c:	5b 87       	std	Y+11, r21	; 0x0b
    3a2e:	4a 87       	std	Y+10, r20	; 0x0a
    3a30:	3d 87       	std	Y+13, r19	; 0x0d
    3a32:	2c 87       	std	Y+12, r18	; 0x0c
    3a34:	1f 87       	std	Y+15, r17	; 0x0f
    3a36:	0e 87       	std	Y+14, r16	; 0x0e


	u16 Local_u16TempLat  = 0 ;
    3a38:	1d 82       	std	Y+5, r1	; 0x05
    3a3a:	1c 82       	std	Y+4, r1	; 0x04
	u16 Local_u16TempLong = 0 ;
    3a3c:	1b 82       	std	Y+3, r1	; 0x03
    3a3e:	1a 82       	std	Y+2, r1	; 0x02

	u8 Local_u8Temp = 1 ;
    3a40:	81 e0       	ldi	r24, 0x01	; 1
    3a42:	89 83       	std	Y+1, r24	; 0x01
    3a44:	05 c0       	rjmp	.+10     	; 0x3a50 <GPS_inlinevidAsciiToInt+0x44>
	//  0.........  10  ....  15 ....  20  .  22  .......... 33  .  35  .............................
	//  043338.100  ,   5404  .  2675  ,   N  ,   00159.7569  ,  W  ,   1,10,4.00,100.0,M,50.0,M,,*72
	//  |
	while( (*GPS_p2Constu8_DataBuffer) != ',' )
	{
		GPS_p2Constu8_DataBuffer++;
    3a46:	8e 81       	ldd	r24, Y+6	; 0x06
    3a48:	9f 81       	ldd	r25, Y+7	; 0x07
    3a4a:	01 96       	adiw	r24, 0x01	; 1
    3a4c:	9f 83       	std	Y+7, r25	; 0x07
    3a4e:	8e 83       	std	Y+6, r24	; 0x06
	u8 Local_u8Temp = 1 ;

	//  0.........  10  ....  15 ....  20  .  22  .......... 33  .  35  .............................
	//  043338.100  ,   5404  .  2675  ,   N  ,   00159.7569  ,  W  ,   1,10,4.00,100.0,M,50.0,M,,*72
	//  |
	while( (*GPS_p2Constu8_DataBuffer) != ',' )
    3a50:	ee 81       	ldd	r30, Y+6	; 0x06
    3a52:	ff 81       	ldd	r31, Y+7	; 0x07
    3a54:	80 81       	ld	r24, Z
    3a56:	8c 32       	cpi	r24, 0x2C	; 44
    3a58:	b1 f7       	brne	.-20     	; 0x3a46 <GPS_inlinevidAsciiToInt+0x3a>
	//  043338.100  ,   5404  .  2675  ,   N  ,   00159.7569  ,  W  ,   1,10,4.00,100.0,M,50.0,M,,*72
	//              |
	//P2Data:       10


	GPS_p2Constu8_DataBuffer++;
    3a5a:	8e 81       	ldd	r24, Y+6	; 0x06
    3a5c:	9f 81       	ldd	r25, Y+7	; 0x07
    3a5e:	01 96       	adiw	r24, 0x01	; 1
    3a60:	9f 83       	std	Y+7, r25	; 0x07
    3a62:	8e 83       	std	Y+6, r24	; 0x06
	do
	{
		// 540 4.2675
		// |

		Local_u16TempLat *= 10;
    3a64:	8c 81       	ldd	r24, Y+4	; 0x04
    3a66:	9d 81       	ldd	r25, Y+5	; 0x05
    3a68:	9c 01       	movw	r18, r24
    3a6a:	22 0f       	add	r18, r18
    3a6c:	33 1f       	adc	r19, r19
    3a6e:	c9 01       	movw	r24, r18
    3a70:	88 0f       	add	r24, r24
    3a72:	99 1f       	adc	r25, r25
    3a74:	88 0f       	add	r24, r24
    3a76:	99 1f       	adc	r25, r25
    3a78:	82 0f       	add	r24, r18
    3a7a:	93 1f       	adc	r25, r19
    3a7c:	9d 83       	std	Y+5, r25	; 0x05
    3a7e:	8c 83       	std	Y+4, r24	; 0x04

		Local_u16TempLat += ((u16)(*(GPS_p2Constu8_DataBuffer)-0x30));
    3a80:	ee 81       	ldd	r30, Y+6	; 0x06
    3a82:	ff 81       	ldd	r31, Y+7	; 0x07
    3a84:	80 81       	ld	r24, Z
    3a86:	28 2f       	mov	r18, r24
    3a88:	30 e0       	ldi	r19, 0x00	; 0
    3a8a:	8c 81       	ldd	r24, Y+4	; 0x04
    3a8c:	9d 81       	ldd	r25, Y+5	; 0x05
    3a8e:	82 0f       	add	r24, r18
    3a90:	93 1f       	adc	r25, r19
    3a92:	c0 97       	sbiw	r24, 0x30	; 48
    3a94:	9d 83       	std	Y+5, r25	; 0x05
    3a96:	8c 83       	std	Y+4, r24	; 0x04
		//iter_#1      		0+5 = 5
		//iter_#2          50+4 = 54
		//iter_#3         540+0 = 540
		//iter_#4        5400+4 = 5404

		GPS_p2Constu8_DataBuffer++;
    3a98:	8e 81       	ldd	r24, Y+6	; 0x06
    3a9a:	9f 81       	ldd	r25, Y+7	; 0x07
    3a9c:	01 96       	adiw	r24, 0x01	; 1
    3a9e:	9f 83       	std	Y+7, r25	; 0x07
    3aa0:	8e 83       	std	Y+6, r24	; 0x06

	}while( (*GPS_p2Constu8_DataBuffer) != '.');
    3aa2:	ee 81       	ldd	r30, Y+6	; 0x06
    3aa4:	ff 81       	ldd	r31, Y+7	; 0x07
    3aa6:	80 81       	ld	r24, Z
    3aa8:	8e 32       	cpi	r24, 0x2E	; 46
    3aaa:	e1 f6       	brne	.-72     	; 0x3a64 <GPS_inlinevidAsciiToInt+0x58>
	//  0.........  10  ....  15 ....  20  .  22  .......... 33  .  35  .............................
	//  043338.100  ,   5404  .  2675  ,   N  ,   00159.7569  ,  W  ,   1,10,4.00,100.0,M,50.0,M,,*72
	//                        |
	//P2Data:

	GPS_p2Constu8_DataBuffer++;
    3aac:	8e 81       	ldd	r24, Y+6	; 0x06
    3aae:	9f 81       	ldd	r25, Y+7	; 0x07
    3ab0:	01 96       	adiw	r24, 0x01	; 1
    3ab2:	9f 83       	std	Y+7, r25	; 0x07
    3ab4:	8e 83       	std	Y+6, r24	; 0x06

	do
	{
		// 5404.2675,
		//      |
		Local_u8Temp *= 10 ;
    3ab6:	89 81       	ldd	r24, Y+1	; 0x01
    3ab8:	88 2f       	mov	r24, r24
    3aba:	90 e0       	ldi	r25, 0x00	; 0
    3abc:	9c 01       	movw	r18, r24
    3abe:	22 0f       	add	r18, r18
    3ac0:	33 1f       	adc	r19, r19
    3ac2:	c9 01       	movw	r24, r18
    3ac4:	88 0f       	add	r24, r24
    3ac6:	99 1f       	adc	r25, r25
    3ac8:	88 0f       	add	r24, r24
    3aca:	99 1f       	adc	r25, r25
    3acc:	82 0f       	add	r24, r18
    3ace:	93 1f       	adc	r25, r19
    3ad0:	89 83       	std	Y+1, r24	; 0x01

		Local_u16TempLat += ((u16)(*(GPS_p2Constu8_DataBuffer)-0x30)/Local_u8Temp);
    3ad2:	ee 81       	ldd	r30, Y+6	; 0x06
    3ad4:	ff 81       	ldd	r31, Y+7	; 0x07
    3ad6:	80 81       	ld	r24, Z
    3ad8:	88 2f       	mov	r24, r24
    3ada:	90 e0       	ldi	r25, 0x00	; 0
    3adc:	c0 97       	sbiw	r24, 0x30	; 48
    3ade:	ac 01       	movw	r20, r24
    3ae0:	89 81       	ldd	r24, Y+1	; 0x01
    3ae2:	28 2f       	mov	r18, r24
    3ae4:	30 e0       	ldi	r19, 0x00	; 0
    3ae6:	ca 01       	movw	r24, r20
    3ae8:	b9 01       	movw	r22, r18
    3aea:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <__udivmodhi4>
    3aee:	cb 01       	movw	r24, r22
    3af0:	9c 01       	movw	r18, r24
    3af2:	8c 81       	ldd	r24, Y+4	; 0x04
    3af4:	9d 81       	ldd	r25, Y+5	; 0x05
    3af6:	82 0f       	add	r24, r18
    3af8:	93 1f       	adc	r25, r19
    3afa:	9d 83       	std	Y+5, r25	; 0x05
    3afc:	8c 83       	std	Y+4, r24	; 0x04
		//iter_#2  Local_u16TempLat=   5404.2 + 0.06=  5404.26
		//iter_#3                      5404.26 + 0.007=  5404.267
		//iter_#4                      5404.267 + 0.0005=  5404.2675


		GPS_p2Constu8_DataBuffer++;
    3afe:	8e 81       	ldd	r24, Y+6	; 0x06
    3b00:	9f 81       	ldd	r25, Y+7	; 0x07
    3b02:	01 96       	adiw	r24, 0x01	; 1
    3b04:	9f 83       	std	Y+7, r25	; 0x07
    3b06:	8e 83       	std	Y+6, r24	; 0x06


	}while( *(GPS_p2Constu8_DataBuffer) != ',');
    3b08:	ee 81       	ldd	r30, Y+6	; 0x06
    3b0a:	ff 81       	ldd	r31, Y+7	; 0x07
    3b0c:	80 81       	ld	r24, Z
    3b0e:	8c 32       	cpi	r24, 0x2C	; 44
    3b10:	91 f6       	brne	.-92     	; 0x3ab6 <GPS_inlinevidAsciiToInt+0xaa>
	//  0.........  10  ....  15 ....  20  .  22  .......... 33  .  35  .............................
	//  043338.100  ,   5404  .  2675  ,   N  ,   00159.7569  ,  W  ,   1,10,4.00,100.0,M,50.0,M,,*72
	//  P2Data:                        |
	//

	GPS_p2Constu8_DataBuffer++;
    3b12:	8e 81       	ldd	r24, Y+6	; 0x06
    3b14:	9f 81       	ldd	r25, Y+7	; 0x07
    3b16:	01 96       	adiw	r24, 0x01	; 1
    3b18:	9f 83       	std	Y+7, r25	; 0x07
    3b1a:	8e 83       	std	Y+6, r24	; 0x06
	//  0.........  10  ....  15 ....  20  .  22  .......... 33  .  35  .............................
	//  043338.100  ,   5404  .  2675  ,   N  ,   00159.7569  ,  W  ,   1,10,4.00,100.0,M,50.0,M,,*72
	//  P2Data:                            |


	**Copy_pu8LatDir = *GPS_p2Constu8_DataBuffer ;
    3b1c:	ec 85       	ldd	r30, Y+12	; 0x0c
    3b1e:	fd 85       	ldd	r31, Y+13	; 0x0d
    3b20:	a0 81       	ld	r26, Z
    3b22:	b1 81       	ldd	r27, Z+1	; 0x01
    3b24:	ee 81       	ldd	r30, Y+6	; 0x06
    3b26:	ff 81       	ldd	r31, Y+7	; 0x07
    3b28:	80 81       	ld	r24, Z
    3b2a:	8c 93       	st	X, r24

	GPS_p2Constu8_DataBuffer++;
    3b2c:	8e 81       	ldd	r24, Y+6	; 0x06
    3b2e:	9f 81       	ldd	r25, Y+7	; 0x07
    3b30:	01 96       	adiw	r24, 0x01	; 1
    3b32:	9f 83       	std	Y+7, r25	; 0x07
    3b34:	8e 83       	std	Y+6, r24	; 0x06

	//  0.........  10  ....  15 ....  20  .  22  .......... 33  .  35  .............................
	//  043338.100  ,   5404  .  2675  ,   N  ,   00159.7569  ,  W  ,   1,10,4.00,100.0,M,50.0,M,,*72
	//  P2Data:                               |

	GPS_p2Constu8_DataBuffer++;
    3b36:	8e 81       	ldd	r24, Y+6	; 0x06
    3b38:	9f 81       	ldd	r25, Y+7	; 0x07
    3b3a:	01 96       	adiw	r24, 0x01	; 1
    3b3c:	9f 83       	std	Y+7, r25	; 0x07
    3b3e:	8e 83       	std	Y+6, r24	; 0x06
	do
	{
		// 00159.7569
		// |

		Local_u16TempLong *= 10;
    3b40:	8a 81       	ldd	r24, Y+2	; 0x02
    3b42:	9b 81       	ldd	r25, Y+3	; 0x03
    3b44:	9c 01       	movw	r18, r24
    3b46:	22 0f       	add	r18, r18
    3b48:	33 1f       	adc	r19, r19
    3b4a:	c9 01       	movw	r24, r18
    3b4c:	88 0f       	add	r24, r24
    3b4e:	99 1f       	adc	r25, r25
    3b50:	88 0f       	add	r24, r24
    3b52:	99 1f       	adc	r25, r25
    3b54:	82 0f       	add	r24, r18
    3b56:	93 1f       	adc	r25, r19
    3b58:	9b 83       	std	Y+3, r25	; 0x03
    3b5a:	8a 83       	std	Y+2, r24	; 0x02

		Local_u16TempLong += ((u16)((*GPS_p2Constu8_DataBuffer)-0x30));
    3b5c:	ee 81       	ldd	r30, Y+6	; 0x06
    3b5e:	ff 81       	ldd	r31, Y+7	; 0x07
    3b60:	80 81       	ld	r24, Z
    3b62:	28 2f       	mov	r18, r24
    3b64:	30 e0       	ldi	r19, 0x00	; 0
    3b66:	8a 81       	ldd	r24, Y+2	; 0x02
    3b68:	9b 81       	ldd	r25, Y+3	; 0x03
    3b6a:	82 0f       	add	r24, r18
    3b6c:	93 1f       	adc	r25, r19
    3b6e:	c0 97       	sbiw	r24, 0x30	; 48
    3b70:	9b 83       	std	Y+3, r25	; 0x03
    3b72:	8a 83       	std	Y+2, r24	; 0x02
		//iter_#2          0 + 0 = 0
		//iter_#3          0 + 1 = 1
		//iter_#4         10 + 5 = 15
		//iter_#4        150 + 9 = 159

		GPS_p2Constu8_DataBuffer++;
    3b74:	8e 81       	ldd	r24, Y+6	; 0x06
    3b76:	9f 81       	ldd	r25, Y+7	; 0x07
    3b78:	01 96       	adiw	r24, 0x01	; 1
    3b7a:	9f 83       	std	Y+7, r25	; 0x07
    3b7c:	8e 83       	std	Y+6, r24	; 0x06


	}while( (*GPS_p2Constu8_DataBuffer) != '.');
    3b7e:	ee 81       	ldd	r30, Y+6	; 0x06
    3b80:	ff 81       	ldd	r31, Y+7	; 0x07
    3b82:	80 81       	ld	r24, Z
    3b84:	8e 32       	cpi	r24, 0x2E	; 46
    3b86:	e1 f6       	brne	.-72     	; 0x3b40 <GPS_inlinevidAsciiToInt+0x134>


	// 00159.7569
	//      |
	GPS_p2Constu8_DataBuffer++;
    3b88:	8e 81       	ldd	r24, Y+6	; 0x06
    3b8a:	9f 81       	ldd	r25, Y+7	; 0x07
    3b8c:	01 96       	adiw	r24, 0x01	; 1
    3b8e:	9f 83       	std	Y+7, r25	; 0x07
    3b90:	8e 83       	std	Y+6, r24	; 0x06

	// 00159.7569
	//       |

	Local_u8Temp = 1 ;
    3b92:	81 e0       	ldi	r24, 0x01	; 1
    3b94:	89 83       	std	Y+1, r24	; 0x01
	{

		// 00159.7569,W
		//       |

		Local_u8Temp *= 10 ;
    3b96:	89 81       	ldd	r24, Y+1	; 0x01
    3b98:	88 2f       	mov	r24, r24
    3b9a:	90 e0       	ldi	r25, 0x00	; 0
    3b9c:	9c 01       	movw	r18, r24
    3b9e:	22 0f       	add	r18, r18
    3ba0:	33 1f       	adc	r19, r19
    3ba2:	c9 01       	movw	r24, r18
    3ba4:	88 0f       	add	r24, r24
    3ba6:	99 1f       	adc	r25, r25
    3ba8:	88 0f       	add	r24, r24
    3baa:	99 1f       	adc	r25, r25
    3bac:	82 0f       	add	r24, r18
    3bae:	93 1f       	adc	r25, r19
    3bb0:	89 83       	std	Y+1, r24	; 0x01

		Local_u16TempLong += ((u16)((*GPS_p2Constu8_DataBuffer)-0x30)/Local_u8Temp);
    3bb2:	ee 81       	ldd	r30, Y+6	; 0x06
    3bb4:	ff 81       	ldd	r31, Y+7	; 0x07
    3bb6:	80 81       	ld	r24, Z
    3bb8:	88 2f       	mov	r24, r24
    3bba:	90 e0       	ldi	r25, 0x00	; 0
    3bbc:	c0 97       	sbiw	r24, 0x30	; 48
    3bbe:	ac 01       	movw	r20, r24
    3bc0:	89 81       	ldd	r24, Y+1	; 0x01
    3bc2:	28 2f       	mov	r18, r24
    3bc4:	30 e0       	ldi	r19, 0x00	; 0
    3bc6:	ca 01       	movw	r24, r20
    3bc8:	b9 01       	movw	r22, r18
    3bca:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <__udivmodhi4>
    3bce:	cb 01       	movw	r24, r22
    3bd0:	9c 01       	movw	r18, r24
    3bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    3bd4:	9b 81       	ldd	r25, Y+3	; 0x03
    3bd6:	82 0f       	add	r24, r18
    3bd8:	93 1f       	adc	r25, r19
    3bda:	9b 83       	std	Y+3, r25	; 0x03
    3bdc:	8a 83       	std	Y+2, r24	; 0x02
		//iter_#2  Local_u16TempLat= 159.7+0.05 =  159.75           100
		//iter_#3                  159.75+0.006 =  159.756          1000
		//iter_#4                 159.756+0.0009 = 159.7569         10000                                   10000


		GPS_p2Constu8_DataBuffer++;
    3bde:	8e 81       	ldd	r24, Y+6	; 0x06
    3be0:	9f 81       	ldd	r25, Y+7	; 0x07
    3be2:	01 96       	adiw	r24, 0x01	; 1
    3be4:	9f 83       	std	Y+7, r25	; 0x07
    3be6:	8e 83       	std	Y+6, r24	; 0x06


	}while( (*GPS_p2Constu8_DataBuffer) != ',');
    3be8:	ee 81       	ldd	r30, Y+6	; 0x06
    3bea:	ff 81       	ldd	r31, Y+7	; 0x07
    3bec:	80 81       	ld	r24, Z
    3bee:	8c 32       	cpi	r24, 0x2C	; 44
    3bf0:	91 f6       	brne	.-92     	; 0x3b96 <GPS_inlinevidAsciiToInt+0x18a>

	// 00159.7569,W
	//           |


	GPS_p2Constu8_DataBuffer++;
    3bf2:	8e 81       	ldd	r24, Y+6	; 0x06
    3bf4:	9f 81       	ldd	r25, Y+7	; 0x07
    3bf6:	01 96       	adiw	r24, 0x01	; 1
    3bf8:	9f 83       	std	Y+7, r25	; 0x07
    3bfa:	8e 83       	std	Y+6, r24	; 0x06
	// 00159.7569,W
	//            |

	**Copy_pu8LongDir = *GPS_p2Constu8_DataBuffer;
    3bfc:	ee 85       	ldd	r30, Y+14	; 0x0e
    3bfe:	ff 85       	ldd	r31, Y+15	; 0x0f
    3c00:	a0 81       	ld	r26, Z
    3c02:	b1 81       	ldd	r27, Z+1	; 0x01
    3c04:	ee 81       	ldd	r30, Y+6	; 0x06
    3c06:	ff 81       	ldd	r31, Y+7	; 0x07
    3c08:	80 81       	ld	r24, Z
    3c0a:	8c 93       	st	X, r24

	**Copy_pf32Long   = Local_u16TempLong;
    3c0c:	ea 85       	ldd	r30, Y+10	; 0x0a
    3c0e:	fb 85       	ldd	r31, Y+11	; 0x0b
    3c10:	00 81       	ld	r16, Z
    3c12:	11 81       	ldd	r17, Z+1	; 0x01
    3c14:	8a 81       	ldd	r24, Y+2	; 0x02
    3c16:	9b 81       	ldd	r25, Y+3	; 0x03
    3c18:	cc 01       	movw	r24, r24
    3c1a:	a0 e0       	ldi	r26, 0x00	; 0
    3c1c:	b0 e0       	ldi	r27, 0x00	; 0
    3c1e:	bc 01       	movw	r22, r24
    3c20:	cd 01       	movw	r24, r26
    3c22:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3c26:	dc 01       	movw	r26, r24
    3c28:	cb 01       	movw	r24, r22
    3c2a:	f8 01       	movw	r30, r16
    3c2c:	80 83       	st	Z, r24
    3c2e:	91 83       	std	Z+1, r25	; 0x01
    3c30:	a2 83       	std	Z+2, r26	; 0x02
    3c32:	b3 83       	std	Z+3, r27	; 0x03
	**Copy_pf32Lat    = Local_u16TempLat ;
    3c34:	e8 85       	ldd	r30, Y+8	; 0x08
    3c36:	f9 85       	ldd	r31, Y+9	; 0x09
    3c38:	00 81       	ld	r16, Z
    3c3a:	11 81       	ldd	r17, Z+1	; 0x01
    3c3c:	8c 81       	ldd	r24, Y+4	; 0x04
    3c3e:	9d 81       	ldd	r25, Y+5	; 0x05
    3c40:	cc 01       	movw	r24, r24
    3c42:	a0 e0       	ldi	r26, 0x00	; 0
    3c44:	b0 e0       	ldi	r27, 0x00	; 0
    3c46:	bc 01       	movw	r22, r24
    3c48:	cd 01       	movw	r24, r26
    3c4a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3c4e:	dc 01       	movw	r26, r24
    3c50:	cb 01       	movw	r24, r22
    3c52:	f8 01       	movw	r30, r16
    3c54:	80 83       	st	Z, r24
    3c56:	91 83       	std	Z+1, r25	; 0x01
    3c58:	a2 83       	std	Z+2, r26	; 0x02
    3c5a:	b3 83       	std	Z+3, r27	; 0x03

}//End of GPS_inlinevidAsciiToInt().
    3c5c:	2f 96       	adiw	r28, 0x0f	; 15
    3c5e:	0f b6       	in	r0, 0x3f	; 63
    3c60:	f8 94       	cli
    3c62:	de bf       	out	0x3e, r29	; 62
    3c64:	0f be       	out	0x3f, r0	; 63
    3c66:	cd bf       	out	0x3d, r28	; 61
    3c68:	cf 91       	pop	r28
    3c6a:	df 91       	pop	r29
    3c6c:	1f 91       	pop	r17
    3c6e:	0f 91       	pop	r16
    3c70:	08 95       	ret

00003c72 <GPS_enuInit>:
 *                   according to the PGS Configurable structure.           *
 * Argument Type   : None .                                                 *
 * Return Type     : Error state of type ES_t.                              *
 **....................*****************************************************/
ES_t GPS_enuInit(void)
{
    3c72:	df 93       	push	r29
    3c74:	cf 93       	push	r28
    3c76:	00 d0       	rcall	.+0      	; 0x3c78 <GPS_enuInit+0x6>
    3c78:	0f 92       	push	r0
    3c7a:	cd b7       	in	r28, 0x3d	; 61
    3c7c:	de b7       	in	r29, 0x3e	; 62

	ES_t Local_enuErrorState = ES_NOK ;
    3c7e:	19 82       	std	Y+1, r1	; 0x01


	//Read the Status of gps module and make the appropriate configuration.
	switch( GPS.GPS_STATE_t )
    3c80:	80 91 68 01 	lds	r24, 0x0168
    3c84:	28 2f       	mov	r18, r24
    3c86:	30 e0       	ldi	r19, 0x00	; 0
    3c88:	3b 83       	std	Y+3, r19	; 0x03
    3c8a:	2a 83       	std	Y+2, r18	; 0x02
    3c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c8e:	9b 81       	ldd	r25, Y+3	; 0x03
    3c90:	00 97       	sbiw	r24, 0x00	; 0
    3c92:	31 f0       	breq	.+12     	; 0x3ca0 <GPS_enuInit+0x2e>
    3c94:	2a 81       	ldd	r18, Y+2	; 0x02
    3c96:	3b 81       	ldd	r19, Y+3	; 0x03
    3c98:	21 30       	cpi	r18, 0x01	; 1
    3c9a:	31 05       	cpc	r19, r1
    3c9c:	41 f1       	breq	.+80     	; 0x3cee <GPS_enuInit+0x7c>
    3c9e:	29 c0       	rjmp	.+82     	; 0x3cf2 <GPS_enuInit+0x80>

		/****************************************************************************
		 *-Initialize the Direction of pins that the gps module is connected on to  *
		 * be an output pins and Set the suitable value for each.                                                       *
		 ****************************************************************************/
		DIO_enuSetPinDirection( GPS.GPS_VCC_PORT , GPS.GPS_VCC_PIN , DIO_OUTPUT_PIN );
    3ca0:	80 91 69 01 	lds	r24, 0x0169
    3ca4:	90 91 6a 01 	lds	r25, 0x016A
    3ca8:	69 2f       	mov	r22, r25
    3caa:	41 e0       	ldi	r20, 0x01	; 1
    3cac:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_enuSetPinDirection>
		DIO_enuSetPinValue( GPS.GPS_VCC_PORT , GPS.GPS_VCC_PIN , DIO_HIGH );
    3cb0:	80 91 69 01 	lds	r24, 0x0169
    3cb4:	90 91 6a 01 	lds	r25, 0x016A
    3cb8:	69 2f       	mov	r22, r25
    3cba:	41 e0       	ldi	r20, 0x01	; 1
    3cbc:	0e 94 65 0a 	call	0x14ca	; 0x14ca <DIO_enuSetPinValue>

		DIO_enuSetPinDirection( GPS.GPS_GND_PORT , GPS.GPS_GND_PIN , DIO_OUTPUT_PIN );
    3cc0:	80 91 6b 01 	lds	r24, 0x016B
    3cc4:	90 91 6c 01 	lds	r25, 0x016C
    3cc8:	69 2f       	mov	r22, r25
    3cca:	41 e0       	ldi	r20, 0x01	; 1
    3ccc:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_enuSetPinDirection>
		DIO_enuSetPinValue( GPS.GPS_GND_PORT , GPS.GPS_GND_PIN , DIO_LOW );
    3cd0:	80 91 6b 01 	lds	r24, 0x016B
    3cd4:	90 91 6c 01 	lds	r25, 0x016C
    3cd8:	69 2f       	mov	r22, r25
    3cda:	40 e0       	ldi	r20, 0x00	; 0
    3cdc:	0e 94 65 0a 	call	0x14ca	; 0x14ca <DIO_enuSetPinValue>

		GPS_CLEAR_ALL_FLAGSE();
    3ce0:	10 92 b4 01 	sts	0x01B4, r1

		//Initiate the UART to receive read the gps output.
		UART_enuInit();
    3ce4:	0e 94 17 07 	call	0xe2e	; 0xe2e <UART_enuInit>

		Local_enuErrorState = ES_OK ;
    3ce8:	81 e0       	ldi	r24, 0x01	; 1
    3cea:	89 83       	std	Y+1, r24	; 0x01
    3cec:	02 c0       	rjmp	.+4      	; 0x3cf2 <GPS_enuInit+0x80>

		break ;

	case gps_off :
		//Do nothing.
		Local_enuErrorState = ES_OK ;
    3cee:	81 e0       	ldi	r24, 0x01	; 1
    3cf0:	89 83       	std	Y+1, r24	; 0x01
	default:
		break;

	}//End of switch.

	return Local_enuErrorState ;
    3cf2:	89 81       	ldd	r24, Y+1	; 0x01

}//End of GPS_enuInit(void).
    3cf4:	0f 90       	pop	r0
    3cf6:	0f 90       	pop	r0
    3cf8:	0f 90       	pop	r0
    3cfa:	cf 91       	pop	r28
    3cfc:	df 91       	pop	r29
    3cfe:	08 95       	ret

00003d00 <GPS_enuGetLocation>:
 *                   Argu.4:         Address of u8 variable  --->  ~  ~ Longitude  ~ (E,w,N or S)                  *
 * Return Type     : Error state of type ES_t.                                                                     *
 **.....................................................................................................************/
//   GPS_enuGetLocation(f32* Copy_pf32Lat , f32* Copy_pf32Long , u8 Copy_pu8LatDir , u8 Copy_pu8LongDir );
ES_t GPS_enuGetLocation(f32* Copy_pf32Lat , f32* Copy_pf32Long , u8* Copy_pu8LatDir , u8* Copy_pu8LongDir )
{
    3d00:	df 93       	push	r29
    3d02:	cf 93       	push	r28
    3d04:	cd b7       	in	r28, 0x3d	; 61
    3d06:	de b7       	in	r29, 0x3e	; 62
    3d08:	2c 97       	sbiw	r28, 0x0c	; 12
    3d0a:	0f b6       	in	r0, 0x3f	; 63
    3d0c:	f8 94       	cli
    3d0e:	de bf       	out	0x3e, r29	; 62
    3d10:	0f be       	out	0x3f, r0	; 63
    3d12:	cd bf       	out	0x3d, r28	; 61
    3d14:	9e 83       	std	Y+6, r25	; 0x06
    3d16:	8d 83       	std	Y+5, r24	; 0x05
    3d18:	78 87       	std	Y+8, r23	; 0x08
    3d1a:	6f 83       	std	Y+7, r22	; 0x07
    3d1c:	5a 87       	std	Y+10, r21	; 0x0a
    3d1e:	49 87       	std	Y+9, r20	; 0x09
    3d20:	3c 87       	std	Y+12, r19	; 0x0c
    3d22:	2b 87       	std	Y+11, r18	; 0x0b

	UART_enuSendByte(' ');
    3d24:	80 e2       	ldi	r24, 0x20	; 32
    3d26:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>
	UART_enuSendByte('G');
    3d2a:	87 e4       	ldi	r24, 0x47	; 71
    3d2c:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>
	UART_enuSendByte('e');
    3d30:	85 e6       	ldi	r24, 0x65	; 101
    3d32:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>
	UART_enuSendByte('t');
    3d36:	84 e7       	ldi	r24, 0x74	; 116
    3d38:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>
	UART_enuSendByte(' ');
    3d3c:	80 e2       	ldi	r24, 0x20	; 32
    3d3e:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>
	UART_enuSendByte('i');
    3d42:	89 e6       	ldi	r24, 0x69	; 105
    3d44:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>
	UART_enuSendByte('n');
    3d48:	8e e6       	ldi	r24, 0x6E	; 110
    3d4a:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>
	UART_enuSendByte(' ');
    3d4e:	80 e2       	ldi	r24, 0x20	; 32
    3d50:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>



	ES_t Local_enuErrorState = ES_NOK ;
    3d54:	1b 82       	std	Y+3, r1	; 0x03


	if(( Copy_pf32Lat != NULL) && (Copy_pf32Long != NULL) && ( Copy_pu8LatDir != NULL)&& ( Copy_pu8LongDir !=  NULL))
    3d56:	8d 81       	ldd	r24, Y+5	; 0x05
    3d58:	9e 81       	ldd	r25, Y+6	; 0x06
    3d5a:	00 97       	sbiw	r24, 0x00	; 0
    3d5c:	09 f4       	brne	.+2      	; 0x3d60 <GPS_enuGetLocation+0x60>
    3d5e:	c8 c0       	rjmp	.+400    	; 0x3ef0 <GPS_enuGetLocation+0x1f0>
    3d60:	8f 81       	ldd	r24, Y+7	; 0x07
    3d62:	98 85       	ldd	r25, Y+8	; 0x08
    3d64:	00 97       	sbiw	r24, 0x00	; 0
    3d66:	09 f4       	brne	.+2      	; 0x3d6a <GPS_enuGetLocation+0x6a>
    3d68:	c3 c0       	rjmp	.+390    	; 0x3ef0 <GPS_enuGetLocation+0x1f0>
    3d6a:	89 85       	ldd	r24, Y+9	; 0x09
    3d6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d6e:	00 97       	sbiw	r24, 0x00	; 0
    3d70:	09 f4       	brne	.+2      	; 0x3d74 <GPS_enuGetLocation+0x74>
    3d72:	be c0       	rjmp	.+380    	; 0x3ef0 <GPS_enuGetLocation+0x1f0>
    3d74:	8b 85       	ldd	r24, Y+11	; 0x0b
    3d76:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d78:	00 97       	sbiw	r24, 0x00	; 0
    3d7a:	09 f4       	brne	.+2      	; 0x3d7e <GPS_enuGetLocation+0x7e>
    3d7c:	b9 c0       	rjmp	.+370    	; 0x3ef0 <GPS_enuGetLocation+0x1f0>
	{

		u8 Local_u8TempChar =  0  ;
    3d7e:	1c 82       	std	Y+4, r1	; 0x04
		//u8 Local_u8Counter  =  0  ;


		UART_enuRecieveByte(&Local_u8TempChar);
    3d80:	ce 01       	movw	r24, r28
    3d82:	04 96       	adiw	r24, 0x04	; 4
    3d84:	0e 94 78 07 	call	0xef0	; 0xef0 <UART_enuRecieveByte>
		do
		{
			/************************************************
			 * 1.Catch the Start of line '$'.               *
			 ************************************************/
			if(Local_u8TempChar != '$')
    3d88:	8c 81       	ldd	r24, Y+4	; 0x04
    3d8a:	84 32       	cpi	r24, 0x24	; 36
    3d8c:	39 f0       	breq	.+14     	; 0x3d9c <GPS_enuGetLocation+0x9c>
			{
				do
				{
					UART_enuRecieveByte(&Local_u8TempChar);
    3d8e:	ce 01       	movw	r24, r28
    3d90:	04 96       	adiw	r24, 0x04	; 4
    3d92:	0e 94 78 07 	call	0xef0	; 0xef0 <UART_enuRecieveByte>

				}while( Local_u8TempChar!= '$' );
    3d96:	8c 81       	ldd	r24, Y+4	; 0x04
    3d98:	84 32       	cpi	r24, 0x24	; 36
    3d9a:	c9 f7       	brne	.-14     	; 0x3d8e <GPS_enuGetLocation+0x8e>
			 *                                      $GP  RMC, *
			 *                                      $GP  GSA, *
			 *                                      $GP  RMC, *
			 *                                                *
			 **************************************************/
			UART_enuRecieveByte(&Local_u8TempChar);
    3d9c:	ce 01       	movw	r24, r28
    3d9e:	04 96       	adiw	r24, 0x04	; 4
    3da0:	0e 94 78 07 	call	0xef0	; 0xef0 <UART_enuRecieveByte>
			UART_enuRecieveByte(&Local_u8TempChar);
    3da4:	ce 01       	movw	r24, r28
    3da6:	04 96       	adiw	r24, 0x04	; 4
    3da8:	0e 94 78 07 	call	0xef0	; 0xef0 <UART_enuRecieveByte>

			/************************************************
			 * 3.Read more one character and make sure it's *
			 *   'G' Not 'R'.                              *
			 ************************************************/
			UART_enuRecieveByte(&Local_u8TempChar);
    3dac:	ce 01       	movw	r24, r28
    3dae:	04 96       	adiw	r24, 0x04	; 4
    3db0:	0e 94 78 07 	call	0xef0	; 0xef0 <UART_enuRecieveByte>

			if(Local_u8TempChar == 'G')
    3db4:	8c 81       	ldd	r24, Y+4	; 0x04
    3db6:	87 34       	cpi	r24, 0x47	; 71
    3db8:	09 f0       	breq	.+2      	; 0x3dbc <GPS_enuGetLocation+0xbc>
    3dba:	5d c0       	rjmp	.+186    	; 0x3e76 <GPS_enuGetLocation+0x176>

				/************************************************
				 * 4.Read more one character and make sure it's *
				 *   'G' Not 'M'or 'S'.                         *
				 ************************************************/
				UART_enuRecieveByte(&Local_u8TempChar);
    3dbc:	ce 01       	movw	r24, r28
    3dbe:	04 96       	adiw	r24, 0x04	; 4
    3dc0:	0e 94 78 07 	call	0xef0	; 0xef0 <UART_enuRecieveByte>

				if(Local_u8TempChar == 'G')
    3dc4:	8c 81       	ldd	r24, Y+4	; 0x04
    3dc6:	87 34       	cpi	r24, 0x47	; 71
    3dc8:	09 f0       	breq	.+2      	; 0x3dcc <GPS_enuGetLocation+0xcc>
    3dca:	55 c0       	rjmp	.+170    	; 0x3e76 <GPS_enuGetLocation+0x176>

					/************************************************
					 * 5.Read more one character and make sure it's *
					 *   'A' Not 'C'.                               *
					 ************************************************/
					UART_enuRecieveByte(&Local_u8TempChar);
    3dcc:	ce 01       	movw	r24, r28
    3dce:	04 96       	adiw	r24, 0x04	; 4
    3dd0:	0e 94 78 07 	call	0xef0	; 0xef0 <UART_enuRecieveByte>

					if(Local_u8TempChar == 'A')
    3dd4:	8c 81       	ldd	r24, Y+4	; 0x04
    3dd6:	81 34       	cpi	r24, 0x41	; 65
    3dd8:	09 f0       	breq	.+2      	; 0x3ddc <GPS_enuGetLocation+0xdc>
    3dda:	4d c0       	rjmp	.+154    	; 0x3e76 <GPS_enuGetLocation+0x176>
						//UART_enuSendByte('A');
						/************************************************
						 * 6.Read more one character and make sure it's *
						 *   ',' (Check is an Optional Step).           *
						 ************************************************/
						UART_enuRecieveByte(&Local_u8TempChar);
    3ddc:	ce 01       	movw	r24, r28
    3dde:	04 96       	adiw	r24, 0x04	; 4
    3de0:	0e 94 78 07 	call	0xef0	; 0xef0 <UART_enuRecieveByte>
						if( Local_u8TempChar == ',' )
    3de4:	8c 81       	ldd	r24, Y+4	; 0x04
    3de6:	8c 32       	cpi	r24, 0x2C	; 44
    3de8:	09 f0       	breq	.+2      	; 0x3dec <GPS_enuGetLocation+0xec>
    3dea:	45 c0       	rjmp	.+138    	; 0x3e76 <GPS_enuGetLocation+0x176>
							 *    Hint:-                                    *
							 *          lines always ends with \n character.*
							 ************************************************/

							/*=================================================*/
							UART_enuRecieveByte(&Local_u8TempChar);
    3dec:	ce 01       	movw	r24, r28
    3dee:	04 96       	adiw	r24, 0x04	; 4
    3df0:	0e 94 78 07 	call	0xef0	; 0xef0 <UART_enuRecieveByte>
							UART_enuRecieveByte(&Local_u8TempChar);
    3df4:	ce 01       	movw	r24, r28
    3df6:	04 96       	adiw	r24, 0x04	; 4
    3df8:	0e 94 78 07 	call	0xef0	; 0xef0 <UART_enuRecieveByte>
							UART_enuRecieveByte(&Local_u8TempChar);
    3dfc:	ce 01       	movw	r24, r28
    3dfe:	04 96       	adiw	r24, 0x04	; 4
    3e00:	0e 94 78 07 	call	0xef0	; 0xef0 <UART_enuRecieveByte>
							UART_enuRecieveByte(&Local_u8TempChar);
    3e04:	ce 01       	movw	r24, r28
    3e06:	04 96       	adiw	r24, 0x04	; 4
    3e08:	0e 94 78 07 	call	0xef0	; 0xef0 <UART_enuRecieveByte>
							UART_enuRecieveByte(&Local_u8TempChar);
    3e0c:	ce 01       	movw	r24, r28
    3e0e:	04 96       	adiw	r24, 0x04	; 4
    3e10:	0e 94 78 07 	call	0xef0	; 0xef0 <UART_enuRecieveByte>
							UART_enuRecieveByte(&Local_u8TempChar);
    3e14:	ce 01       	movw	r24, r28
    3e16:	04 96       	adiw	r24, 0x04	; 4
    3e18:	0e 94 78 07 	call	0xef0	; 0xef0 <UART_enuRecieveByte>
							UART_enuRecieveByte(&Local_u8TempChar);
    3e1c:	ce 01       	movw	r24, r28
    3e1e:	04 96       	adiw	r24, 0x04	; 4
    3e20:	0e 94 78 07 	call	0xef0	; 0xef0 <UART_enuRecieveByte>
							UART_enuRecieveByte(&Local_u8TempChar);
    3e24:	ce 01       	movw	r24, r28
    3e26:	04 96       	adiw	r24, 0x04	; 4
    3e28:	0e 94 78 07 	call	0xef0	; 0xef0 <UART_enuRecieveByte>
							UART_enuRecieveByte(&Local_u8TempChar);
    3e2c:	ce 01       	movw	r24, r28
    3e2e:	04 96       	adiw	r24, 0x04	; 4
    3e30:	0e 94 78 07 	call	0xef0	; 0xef0 <UART_enuRecieveByte>
							UART_enuRecieveByte(&Local_u8TempChar);
    3e34:	ce 01       	movw	r24, r28
    3e36:	04 96       	adiw	r24, 0x04	; 4
    3e38:	0e 94 78 07 	call	0xef0	; 0xef0 <UART_enuRecieveByte>
							UART_enuRecieveByte(&Local_u8TempChar);
    3e3c:	ce 01       	movw	r24, r28
    3e3e:	04 96       	adiw	r24, 0x04	; 4
    3e40:	0e 94 78 07 	call	0xef0	; 0xef0 <UART_enuRecieveByte>
							UART_enuRecieveByte(&Local_u8TempChar);
    3e44:	ce 01       	movw	r24, r28
    3e46:	04 96       	adiw	r24, 0x04	; 4
    3e48:	0e 94 78 07 	call	0xef0	; 0xef0 <UART_enuRecieveByte>

							if( Local_u8TempChar == ',')
    3e4c:	8c 81       	ldd	r24, Y+4	; 0x04
    3e4e:	8c 32       	cpi	r24, 0x2C	; 44
    3e50:	91 f0       	breq	.+36     	; 0x3e76 <GPS_enuGetLocation+0x176>
							{
								continue;
							}


							UART_enuSendByte(Local_u8TempChar);
    3e52:	8c 81       	ldd	r24, Y+4	; 0x04
    3e54:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>
									//5404.2675,N,00159.7569,W,1,10,4.00,100.0,M,50.0,M,,*
							//[NMEA] $GPGGA,123534.742,5404.2675,N,00159.7569,W,1,10,4.00,100.0,M,50.0,M,,*7F [GPS1]
							do
							{

								UART_enuRecieveByte(&Local_u8TempChar);
    3e58:	ce 01       	movw	r24, r28
    3e5a:	04 96       	adiw	r24, 0x04	; 4
    3e5c:	0e 94 78 07 	call	0xef0	; 0xef0 <UART_enuRecieveByte>
								UART_enuSendByte(Local_u8TempChar);
    3e60:	8c 81       	ldd	r24, Y+4	; 0x04
    3e62:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>

								//GPS_u8Buffer[Local_u8Counter]=(Local_u8TempChar);

								//Local_u8Counter++;

							}while( Local_u8TempChar != '\n' );
    3e66:	8c 81       	ldd	r24, Y+4	; 0x04
    3e68:	8a 30       	cpi	r24, 0x0A	; 10
    3e6a:	b1 f7       	brne	.-20     	; 0x3e58 <GPS_enuGetLocation+0x158>

							GPS_SET_LINE_FLAG();
    3e6c:	80 91 b4 01 	lds	r24, 0x01B4
    3e70:	81 60       	ori	r24, 0x01	; 1
    3e72:	80 93 b4 01 	sts	0x01B4, r24
			{
				//-Hit 'R' Instead of 'G'.

			}

		}while( !(GPS_Flags.FLAG.GPGGA_LINE_FLAG) );
    3e76:	80 91 b4 01 	lds	r24, 0x01B4
    3e7a:	81 70       	andi	r24, 0x01	; 1
    3e7c:	88 23       	and	r24, r24
    3e7e:	09 f4       	brne	.+2      	; 0x3e82 <GPS_enuGetLocation+0x182>
    3e80:	83 cf       	rjmp	.-250    	; 0x3d88 <GPS_enuGetLocation+0x88>


		//****************************************************************//
		//****************************************************************//

		UART_enuSendByte(' ');
    3e82:	80 e2       	ldi	r24, 0x20	; 32
    3e84:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>
		UART_enuSendByte('G');
    3e88:	87 e4       	ldi	r24, 0x47	; 71
    3e8a:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>
		UART_enuSendByte('o');
    3e8e:	8f e6       	ldi	r24, 0x6F	; 111
    3e90:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>
		UART_enuSendByte('t');
    3e94:	84 e7       	ldi	r24, 0x74	; 116
    3e96:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>
		UART_enuSendByte(' ');
    3e9a:	80 e2       	ldi	r24, 0x20	; 32
    3e9c:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>
		UART_enuSendByte('L');
    3ea0:	8c e4       	ldi	r24, 0x4C	; 76
    3ea2:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>
		UART_enuSendByte('i');
    3ea6:	89 e6       	ldi	r24, 0x69	; 105
    3ea8:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>
		UART_enuSendByte('n');
    3eac:	8e e6       	ldi	r24, 0x6E	; 110
    3eae:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>
		UART_enuSendByte('e');
    3eb2:	85 e6       	ldi	r24, 0x65	; 101
    3eb4:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>
		UART_enuSendByte(' ');
    3eb8:	80 e2       	ldi	r24, 0x20	; 32
    3eba:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>
		//5404.2675,N,00159.7569,W,1,10,4.00,100.0,M,50.0,M,,*7B
		//[NMEA] $GPGGA,113055.824, ,,,,0,10,,,M,,M,,*74 [GPS1]



		int i = 0 ;
    3ebe:	1a 82       	std	Y+2, r1	; 0x02
    3ec0:	19 82       	std	Y+1, r1	; 0x01
		do
		{
			UART_enuSendByte(GPS_u8Buffer[i]);
    3ec2:	89 81       	ldd	r24, Y+1	; 0x01
    3ec4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ec6:	fc 01       	movw	r30, r24
    3ec8:	e3 59       	subi	r30, 0x93	; 147
    3eca:	fe 4f       	sbci	r31, 0xFE	; 254
    3ecc:	80 81       	ld	r24, Z
    3ece:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>
			i++ ;
    3ed2:	89 81       	ldd	r24, Y+1	; 0x01
    3ed4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ed6:	01 96       	adiw	r24, 0x01	; 1
    3ed8:	9a 83       	std	Y+2, r25	; 0x02
    3eda:	89 83       	std	Y+1, r24	; 0x01



		}while(i  < 10  );
    3edc:	89 81       	ldd	r24, Y+1	; 0x01
    3ede:	9a 81       	ldd	r25, Y+2	; 0x02
    3ee0:	8a 30       	cpi	r24, 0x0A	; 10
    3ee2:	91 05       	cpc	r25, r1
    3ee4:	74 f3       	brlt	.-36     	; 0x3ec2 <GPS_enuGetLocation+0x1c2>


		//GPS_inlinevidAsciiToInt( GPS_u8Buffer , &Copy_pf32Lat , &Copy_pf32Long , &Copy_pu8LatDir , &Copy_pu8LongDir  );


		GPS_CLEAR_ALL_FLAGSE();
    3ee6:	10 92 b4 01 	sts	0x01B4, r1
		//****************************************************************//




		Local_enuErrorState = ES_OK ;
    3eea:	81 e0       	ldi	r24, 0x01	; 1
    3eec:	8b 83       	std	Y+3, r24	; 0x03
    3eee:	02 c0       	rjmp	.+4      	; 0x3ef4 <GPS_enuGetLocation+0x1f4>


	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER ;
    3ef0:	82 e0       	ldi	r24, 0x02	; 2
    3ef2:	8b 83       	std	Y+3, r24	; 0x03
	}



	return Local_enuErrorState ;
    3ef4:	8b 81       	ldd	r24, Y+3	; 0x03

}//End of GPS_enuGetLocation.
    3ef6:	2c 96       	adiw	r28, 0x0c	; 12
    3ef8:	0f b6       	in	r0, 0x3f	; 63
    3efa:	f8 94       	cli
    3efc:	de bf       	out	0x3e, r29	; 62
    3efe:	0f be       	out	0x3f, r0	; 63
    3f00:	cd bf       	out	0x3d, r28	; 61
    3f02:	cf 91       	pop	r28
    3f04:	df 91       	pop	r29
    3f06:	08 95       	ret

00003f08 <main>:




int main(void)
{
    3f08:	df 93       	push	r29
    3f0a:	cf 93       	push	r28
    3f0c:	cd b7       	in	r28, 0x3d	; 61
    3f0e:	de b7       	in	r29, 0x3e	; 62


	GPS_enuInit();
    3f10:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <GPS_enuInit>



	UART_enuSendByte('M');
    3f14:	8d e4       	ldi	r24, 0x4D	; 77
    3f16:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>
	UART_enuSendByte('a');
    3f1a:	81 e6       	ldi	r24, 0x61	; 97
    3f1c:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>
	UART_enuSendByte('i');
    3f20:	89 e6       	ldi	r24, 0x69	; 105
    3f22:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>
	UART_enuSendByte('n');
    3f26:	8e e6       	ldi	r24, 0x6E	; 110
    3f28:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>




	GPS_enuGetLocation(&Lat , &Long , &latDir , &longDir );
    3f2c:	89 eb       	ldi	r24, 0xB9	; 185
    3f2e:	91 e0       	ldi	r25, 0x01	; 1
    3f30:	25 eb       	ldi	r18, 0xB5	; 181
    3f32:	31 e0       	ldi	r19, 0x01	; 1
    3f34:	4e eb       	ldi	r20, 0xBE	; 190
    3f36:	51 e0       	ldi	r21, 0x01	; 1
    3f38:	ed eb       	ldi	r30, 0xBD	; 189
    3f3a:	f1 e0       	ldi	r31, 0x01	; 1
    3f3c:	b9 01       	movw	r22, r18
    3f3e:	9f 01       	movw	r18, r30
    3f40:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <GPS_enuGetLocation>
	while(1)
	{
		//ES_t GPS_enuGetLocation(f32* Copy_pf32Lat , f32* Copy_pf32Long , u8 Copy_pu8LatDir , u8 Copy_pu8LongDir );

		//GPS_enuGetLocation(&var1 , &var2 , &lat , &lon );
		UART_enuSendByte(' ');
    3f44:	80 e2       	ldi	r24, 0x20	; 32
    3f46:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>
		UART_enuSendByte(' ');
    3f4a:	80 e2       	ldi	r24, 0x20	; 32
    3f4c:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>
		UART_enuSendByte('I');
    3f50:	89 e4       	ldi	r24, 0x49	; 73
    3f52:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>
		UART_enuSendByte(' ');
    3f56:	80 e2       	ldi	r24, 0x20	; 32
    3f58:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>
		UART_enuSendByte('a');
    3f5c:	81 e6       	ldi	r24, 0x61	; 97
    3f5e:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>
		UART_enuSendByte('m');
    3f62:	8d e6       	ldi	r24, 0x6D	; 109
    3f64:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>
		UART_enuSendByte(' ');
    3f68:	80 e2       	ldi	r24, 0x20	; 32
    3f6a:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>
		UART_enuSendByte('i');
    3f6e:	89 e6       	ldi	r24, 0x69	; 105
    3f70:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>
		UART_enuSendByte('n');
    3f74:	8e e6       	ldi	r24, 0x6E	; 110
    3f76:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>
		UART_enuSendByte(' ');
    3f7a:	80 e2       	ldi	r24, 0x20	; 32
    3f7c:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>
		UART_enuSendByte('w');
    3f80:	87 e7       	ldi	r24, 0x77	; 119
    3f82:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>
		UART_enuSendByte('h');
    3f86:	88 e6       	ldi	r24, 0x68	; 104
    3f88:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>
		UART_enuSendByte('i');
    3f8c:	89 e6       	ldi	r24, 0x69	; 105
    3f8e:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>
		UART_enuSendByte('l');
    3f92:	8c e6       	ldi	r24, 0x6C	; 108
    3f94:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>
		UART_enuSendByte('e');
    3f98:	85 e6       	ldi	r24, 0x65	; 101
    3f9a:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>
		UART_enuSendByte('(');
    3f9e:	88 e2       	ldi	r24, 0x28	; 40
    3fa0:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>
		UART_enuSendByte('1');
    3fa4:	81 e3       	ldi	r24, 0x31	; 49
    3fa6:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>
		UART_enuSendByte(')');
    3faa:	89 e2       	ldi	r24, 0x29	; 41
    3fac:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_enuSendByte>
    3fb0:	ff cf       	rjmp	.-2      	; 0x3fb0 <main+0xa8>

00003fb2 <__udivmodhi4>:
    3fb2:	aa 1b       	sub	r26, r26
    3fb4:	bb 1b       	sub	r27, r27
    3fb6:	51 e1       	ldi	r21, 0x11	; 17
    3fb8:	07 c0       	rjmp	.+14     	; 0x3fc8 <__udivmodhi4_ep>

00003fba <__udivmodhi4_loop>:
    3fba:	aa 1f       	adc	r26, r26
    3fbc:	bb 1f       	adc	r27, r27
    3fbe:	a6 17       	cp	r26, r22
    3fc0:	b7 07       	cpc	r27, r23
    3fc2:	10 f0       	brcs	.+4      	; 0x3fc8 <__udivmodhi4_ep>
    3fc4:	a6 1b       	sub	r26, r22
    3fc6:	b7 0b       	sbc	r27, r23

00003fc8 <__udivmodhi4_ep>:
    3fc8:	88 1f       	adc	r24, r24
    3fca:	99 1f       	adc	r25, r25
    3fcc:	5a 95       	dec	r21
    3fce:	a9 f7       	brne	.-22     	; 0x3fba <__udivmodhi4_loop>
    3fd0:	80 95       	com	r24
    3fd2:	90 95       	com	r25
    3fd4:	bc 01       	movw	r22, r24
    3fd6:	cd 01       	movw	r24, r26
    3fd8:	08 95       	ret

00003fda <__prologue_saves__>:
    3fda:	2f 92       	push	r2
    3fdc:	3f 92       	push	r3
    3fde:	4f 92       	push	r4
    3fe0:	5f 92       	push	r5
    3fe2:	6f 92       	push	r6
    3fe4:	7f 92       	push	r7
    3fe6:	8f 92       	push	r8
    3fe8:	9f 92       	push	r9
    3fea:	af 92       	push	r10
    3fec:	bf 92       	push	r11
    3fee:	cf 92       	push	r12
    3ff0:	df 92       	push	r13
    3ff2:	ef 92       	push	r14
    3ff4:	ff 92       	push	r15
    3ff6:	0f 93       	push	r16
    3ff8:	1f 93       	push	r17
    3ffa:	cf 93       	push	r28
    3ffc:	df 93       	push	r29
    3ffe:	cd b7       	in	r28, 0x3d	; 61
    4000:	de b7       	in	r29, 0x3e	; 62
    4002:	ca 1b       	sub	r28, r26
    4004:	db 0b       	sbc	r29, r27
    4006:	0f b6       	in	r0, 0x3f	; 63
    4008:	f8 94       	cli
    400a:	de bf       	out	0x3e, r29	; 62
    400c:	0f be       	out	0x3f, r0	; 63
    400e:	cd bf       	out	0x3d, r28	; 61
    4010:	09 94       	ijmp

00004012 <__epilogue_restores__>:
    4012:	2a 88       	ldd	r2, Y+18	; 0x12
    4014:	39 88       	ldd	r3, Y+17	; 0x11
    4016:	48 88       	ldd	r4, Y+16	; 0x10
    4018:	5f 84       	ldd	r5, Y+15	; 0x0f
    401a:	6e 84       	ldd	r6, Y+14	; 0x0e
    401c:	7d 84       	ldd	r7, Y+13	; 0x0d
    401e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4020:	9b 84       	ldd	r9, Y+11	; 0x0b
    4022:	aa 84       	ldd	r10, Y+10	; 0x0a
    4024:	b9 84       	ldd	r11, Y+9	; 0x09
    4026:	c8 84       	ldd	r12, Y+8	; 0x08
    4028:	df 80       	ldd	r13, Y+7	; 0x07
    402a:	ee 80       	ldd	r14, Y+6	; 0x06
    402c:	fd 80       	ldd	r15, Y+5	; 0x05
    402e:	0c 81       	ldd	r16, Y+4	; 0x04
    4030:	1b 81       	ldd	r17, Y+3	; 0x03
    4032:	aa 81       	ldd	r26, Y+2	; 0x02
    4034:	b9 81       	ldd	r27, Y+1	; 0x01
    4036:	ce 0f       	add	r28, r30
    4038:	d1 1d       	adc	r29, r1
    403a:	0f b6       	in	r0, 0x3f	; 63
    403c:	f8 94       	cli
    403e:	de bf       	out	0x3e, r29	; 62
    4040:	0f be       	out	0x3f, r0	; 63
    4042:	cd bf       	out	0x3d, r28	; 61
    4044:	ed 01       	movw	r28, r26
    4046:	08 95       	ret

00004048 <itoa>:
    4048:	fb 01       	movw	r30, r22
    404a:	9f 01       	movw	r18, r30
    404c:	e8 94       	clt
    404e:	42 30       	cpi	r20, 0x02	; 2
    4050:	c4 f0       	brlt	.+48     	; 0x4082 <itoa+0x3a>
    4052:	45 32       	cpi	r20, 0x25	; 37
    4054:	b4 f4       	brge	.+44     	; 0x4082 <itoa+0x3a>
    4056:	4a 30       	cpi	r20, 0x0A	; 10
    4058:	29 f4       	brne	.+10     	; 0x4064 <itoa+0x1c>
    405a:	97 fb       	bst	r25, 7
    405c:	1e f4       	brtc	.+6      	; 0x4064 <itoa+0x1c>
    405e:	90 95       	com	r25
    4060:	81 95       	neg	r24
    4062:	9f 4f       	sbci	r25, 0xFF	; 255
    4064:	64 2f       	mov	r22, r20
    4066:	77 27       	eor	r23, r23
    4068:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <__udivmodhi4>
    406c:	80 5d       	subi	r24, 0xD0	; 208
    406e:	8a 33       	cpi	r24, 0x3A	; 58
    4070:	0c f0       	brlt	.+2      	; 0x4074 <itoa+0x2c>
    4072:	89 5d       	subi	r24, 0xD9	; 217
    4074:	81 93       	st	Z+, r24
    4076:	cb 01       	movw	r24, r22
    4078:	00 97       	sbiw	r24, 0x00	; 0
    407a:	a1 f7       	brne	.-24     	; 0x4064 <itoa+0x1c>
    407c:	16 f4       	brtc	.+4      	; 0x4082 <itoa+0x3a>
    407e:	5d e2       	ldi	r21, 0x2D	; 45
    4080:	51 93       	st	Z+, r21
    4082:	10 82       	st	Z, r1
    4084:	c9 01       	movw	r24, r18
    4086:	0c 94 45 20 	jmp	0x408a	; 0x408a <strrev>

0000408a <strrev>:
    408a:	dc 01       	movw	r26, r24
    408c:	fc 01       	movw	r30, r24
    408e:	67 2f       	mov	r22, r23
    4090:	71 91       	ld	r23, Z+
    4092:	77 23       	and	r23, r23
    4094:	e1 f7       	brne	.-8      	; 0x408e <strrev+0x4>
    4096:	32 97       	sbiw	r30, 0x02	; 2
    4098:	04 c0       	rjmp	.+8      	; 0x40a2 <strrev+0x18>
    409a:	7c 91       	ld	r23, X
    409c:	6d 93       	st	X+, r22
    409e:	70 83       	st	Z, r23
    40a0:	62 91       	ld	r22, -Z
    40a2:	ae 17       	cp	r26, r30
    40a4:	bf 07       	cpc	r27, r31
    40a6:	c8 f3       	brcs	.-14     	; 0x409a <strrev+0x10>
    40a8:	08 95       	ret

000040aa <_exit>:
    40aa:	f8 94       	cli

000040ac <__stop_program>:
    40ac:	ff cf       	rjmp	.-2      	; 0x40ac <__stop_program>
