/*****************************************************************************/
/*****************************************************************************/
/* Title                 :   GPS_Prog                                      */
/* Filename              :   GPS_Prog.c                                     */
/* Author                :   Shaban Abdullah Awad                            */
/* Created on            :   Mar 15, 2022                                    */
/* Version               :   0.1.0                                           */
/* Toolchain             :   avr-gcc (4.3.3)                                 */
/* Target                :   ATmega32                                        */
/* Notes                 :   None                                            */
/*                                                                           */
/*****************************************************************************/

/*****************************************************************************/
/******************************  INCLUDES  ***********************************/
#include "LIB/STD_TYPES.h"
#include "LIB/errorStates.h"



#include "MCAL/DIO/DIO_interface.h"
#include "MCAL\USART\UART_Interface.h"

#include "GPS_Priv.h"
#include "GPS_Cnfg.h"



static GPS_FLAGS_t  GPS_Flags ;

static u8 GPS_u8Buffer[GPS_LINE_LENGTH]={'X'};


/****************************************************************************
 ****************************************************************************
 * Function Name   : GPS_enuInit.                                           *
 * Description     : Utility function to initialize the GPS module          *
 *                   according to the PGS Configurable structure.           *
 * Argument Type   : None .                                                 *
 * Return Type     : Error state of type ES_t.                              *
 **....................*****************************************************/
ES_t GPS_enuInit(void)
{

	ES_t Local_enuErrorState = ES_NOK ;


	//Read the Status of gps module and make the appropriate configuration.
	switch( GPS.GPS_STATE_t )
	{
	case gps_on :

		/****************************************************************************
		 *-Initialize the Direction of pins that the gps module is connected on to  *
		 * be an output pins and Set the suitable value for each.                                                       *
		 ****************************************************************************/
		DIO_enuSetPinDirection( GPS.GPS_VCC_PORT , GPS.GPS_VCC_PIN , DIO_OUTPUT_PIN );
		DIO_enuSetPinValue( GPS.GPS_VCC_PORT , GPS.GPS_VCC_PIN , DIO_HIGH );

		DIO_enuSetPinDirection( GPS.GPS_GND_PORT , GPS.GPS_GND_PIN , DIO_OUTPUT_PIN );
		DIO_enuSetPinValue( GPS.GPS_GND_PORT , GPS.GPS_GND_PIN , DIO_LOW );

		GPS_CLEAR_ALL_FLAGSE();

		//Initiate the UART to receive read the gps output.
		UART_enuInit();

		Local_enuErrorState = ES_OK ;

		break ;

	case gps_off :
		//Do nothing.
		Local_enuErrorState = ES_OK ;
		break ;

	default:
		break;

	}//End of switch.

	return Local_enuErrorState ;

}//End of GPS_enuInit(void).


/******************************************************************************************************************
 ******************************************************************************************************************
 * Function Name   : GPS_enuGetLocation.                                                                           *
 * Description     : Utility function to read a valid GPS Location and store it in the buffer to be                *
 *                   Processed.                                                                                    *
 * Argument Type   : Argu.1:         Address of f32 variable --->  To pass Latitude value.                         *
 *                   Argu.2:         Address of f32 variable --->  ~  ~   Longitude value.                         *
 *                   Argu.3:         Address of u8 variable  --->  ~  ~  Latitude Direction (E,w,N or S)           *
 *                   Argu.4:         Address of u8 variable  --->  ~  ~ Longitude  ~ (E,w,N or S)                  *
 * Return Type     : Error state of type ES_t.                                                                     *
 **.....................................................................................................************/
//   GPS_inlinevidAsciiToInt( u8 const* GPS_constu8_Buffer , f32** Copy_pf32Lat , f32** Copy_pf32Long  , u8** Copy_pu8LatDir , u8** Copy_pu8LongDir  )
ES_t GPS_enuGetLocation(f32* Copy_pf32Lat , f32* Copy_pf32Long , u8* Copy_pu8LatDir , u8* Copy_pu8LongDir )
{

	ES_t Local_enuErrorState = ES_NOK ;


	if(( Copy_pf32Lat != NULL) && (Copy_pf32Long != NULL) && ( Copy_pu8LatDir != NULL)&& ( Copy_pu8LongDir !=  NULL))
	{

		u8 Local_u8TempChar =  0  ;
		u8 Local_u8Counter  =  0  ;


		UART_enuRecieveByte(&Local_u8TempChar);

		do
		{
			/************************************************
			 * 1.Catch the Start of line '$'.               *
			 ************************************************/
			if(Local_u8TempChar != '$')
			{
				do
				{
					UART_enuRecieveByte(&Local_u8TempChar);

				}while( Local_u8TempChar!= '$' );
			}
			// Now you Get '$'


			/**************************************************
			 * 2.Read more tow characters and IGNORE them     *
			 *   because they are same in all PGS lines:      *
			 *                                   -> $GP  GGA, *
			 *                                      $GP  RMC, *
			 *                                      $GP  GSA, *
			 *                                      $GP  RMC, *
			 *                                                *
			 **************************************************/
			UART_enuRecieveByte(&Local_u8TempChar);
			UART_enuRecieveByte(&Local_u8TempChar);
			// Now you Get '$GP'


			/************************************************
			 * 3.Read more one character and make sure it's *
			 *   'G' Not 'R'.                              *
			 ************************************************/
			UART_enuRecieveByte(&Local_u8TempChar);

			if(Local_u8TempChar == 'G')
			{
				// Now you Get '$GPG'  of $GPG  GA, For sure.


				/************************************************
				 * 4.Read more one character and make sure it's *
				 *   'G' Not 'M'or 'S'.                         *
				 ************************************************/
				UART_enuRecieveByte(&Local_u8TempChar);

				if(Local_u8TempChar == 'G')
				{
					// Now you Get '$GPGG' of '$GPGG A,' For sure.


					/************************************************
					 * 5.Read more one character and make sure it's *
					 *   'A' Not 'C'.                               *
					 ************************************************/
					UART_enuRecieveByte(&Local_u8TempChar);

					if(Local_u8TempChar == 'A')
					{
						//Now you Get '$GPGGA' of '$GPGGA ,' For sure.


						/************************************************
						 * 6.Read more one character and make sure it's *
						 *   ',' (Check is an Optional Step).           *
						 ************************************************/
						UART_enuRecieveByte(&Local_u8TempChar);
						if( Local_u8TempChar == ',' )
						{
							//Now you Get '$GPGGA,' of '$GPGGA,' For sure.


							/************************************************
							 * 7. Read the whole Data exists on $GPGGA, line*
							 *     and store Data in buffer.                *
							 *                                              *
							 *    Hint:-                                    *
							 *          lines always ends with \n character.*
							 ************************************************/
							do
							{
								UART_enuRecieveByte(&Local_u8TempChar);

								GPS_u8Buffer[Local_u8Counter++]=Local_u8TempChar;

							}while( Local_u8TempChar != '\n'  );



							/***********************************************************
							 * 8. GPS Module needs to connect to satellite to Transmit *
							 *    a valid data, if not, the received $GPGGA line will  *
							 *    contain ,'s instead of the latitude and longitude    *
							 *    values,example:                                      *
							 *                                                         *
							 *         $GPGGA,143219.775,,,,,0,10,,,M,,M,,*70          *
							 *         $GPGGA,181430.343,5404.2675,N,00159.7569,W...   *
							 * index-->       012........[12].......                   *
							 **********************************************************/
							if(GPS_u8Buffer[12] != ',')
							{

								//Set flag to break the outer do while() loop.
								GPS_SET_LINE_FLAG();

							}
							else
							{
								/************************************************
								 * -Empty $GPGGA line. So, Reset the buffer and *
								 *  read another $GPGGA line.                   *
								 ************************************************/
								do
								{
									GPS_u8Buffer[Local_u8Counter--]='X';

								}while( Local_u8Counter != 0 );

							}

						}
						else
						{
							//-Hit Not ','
						}

					}
					else
					{
						//-Hit '$GPGGC'
					}

				}
				else
				{
					//-Hit  'M' or 'S' instead of 'G'.
				}

			}
			else
			{
				//-Hit 'R' Instead of 'G'.
			}

		}while( !(GPS_Flags.FLAG.GPGGA_LINE_FLAG) );


		//****************************************************************//
		//****************************************************************//

		 void   GPS_inlinevidAsciiToInt(const u8* GPS_constu8_Buffer , f32** Copy_pf32Lat , f32** Copy_pf32Long , u8** Copy_pu8LatDir , u8** Copy_pu8LongDir  );


		GPS_inlinevidAsciiToInt( GPS_u8Buffer , &Copy_pf32Lat , &Copy_pf32Long , &Copy_pu8LatDir , &Copy_pu8LongDir  );




						//****************************************************************//




						Local_enuErrorState = ES_OK ;





	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER ;
	}


	//func();
	return Local_enuErrorState ;

}//End of GPS_enuGetLocation.


 void   GPS_inlinevidAsciiToInt(const u8* GPS_constu8_Buffer , f32** Copy_pf32Lat , f32** Copy_pf32Long , u8** Copy_pu8LatDir , u8** Copy_pu8LongDir  )
{
	u8 Local_u8Counter ;

	u8 Local_u8_Subs_Of_First_Comma   = 0  ;
	u8 Local_u8_Subs_Of_Second_Comma  = 0  ;
	u8 Local_u8_Subs_Of_Third_Comma   = 0  ;
	u8 Local_u8_Subs_Of_Fourth_Comma  = 0  ;


	u16 Local_u16TempLat  = 0 ;
	u16 Local_u16TempLong = 0 ;

	u8 Local_u8Temp = 10 ;

	//  0.........  10  ....  15 ....  20  .  22  .......... 33  .  35  .............................
	//  043338.100  ,   5404  .  2675  ,   N  ,   00159.7569  ,  W  ,   1,10,4.00,100.0,M,50.0,M,,*72
	//  |
	while( *GPS_constu8_Buffer != ',' )
	{
		GPS_constu8_Buffer++;
		Local_u8Counter++	;
	}
	//  0.........  10  ....  15 ....  20  .  22  .......... 33  .  35  .............................
	//  043338.100  ,   5404  .  2675  ,   N  ,   00159.7569  ,  W  ,   1,10,4.00,100.0,M,50.0,M,,*72
	//              |
	//Count:        10

	Local_u8_Subs_Of_First_Comma = Local_u8Counter ;
	GPS_constu8_Buffer++;
	Local_u8Counter++	;
	//  0.........  10  ....  15 ....  20  .  22  .......... 33  .  35  .............................
	//  043338.100  ,   5404  .  2675  ,   N  ,   00159.7569  ,  W  ,   1,10,4.00,100.0,M,50.0,M,,*72
	//                  |
	//Count:           11
	while( *GPS_constu8_Buffer != ',' )
	{
		GPS_constu8_Buffer++;
		Local_u8Counter++	;

	}
	//  0.........  10  ....  15 ....  20  .  22  .......... 33  .  35  .............................
	//  043338.100  ,   5404  .  2675  ,   N  ,   00159.7569  ,  W  ,   1,10,4.00,100.0,M,50.0,M,,*72
	//                                 |
	//Count:                           20
	Local_u8_Subs_Of_Second_Comma = Local_u8Counter	;
	GPS_constu8_Buffer++;
	Local_u8Counter++	;

	//  0.........  10  ....  15 ....  20  .  22  .......... 33  .  35  .............................
	//  043338.100  ,   5404  .  2675  ,   N  ,   00159.7569  ,  W  ,   1,10,4.00,100.0,M,50.0,M,,*72
	//                                     |
	//Count:                               21


	while( *GPS_constu8_Buffer != ',' )
	{
		GPS_constu8_Buffer++;
		Local_u8Counter++	;
	}

	//  0.........  10  ....  15 ....  20  .  22  .......... 33  .  35  .............................
	//  043338.100  ,   5404  .  2675  ,   N  ,   00159.7569  ,  W  ,   1,10,4.00,100.0,M,50.0,M,,*72
	//                                        |
	//Count:                                  21


	Local_u8_Subs_Of_Third_Comma = Local_u8Counter	;
	GPS_constu8_Buffer++;
	Local_u8Counter++	;

	//  0.........  10  ....  15 ....  20  .  22  .......... 33  .  35  .............................
	//  043338.100  ,   5404  .  2675  ,   N  ,   00159.7569  ,  W  ,   1,10,4.00,100.0,M,50.0,M,,*72
	//                                            |
	//Count:                                      23

	while( *GPS_constu8_Buffer != ',' )
	{
		GPS_constu8_Buffer++;
		Local_u8Counter++	;
	}


	Local_u8Counter++;

	//  0.........  10  ....  15 ....  20  .  22  .......... 33  .  35  .............................
	//  043338.100  ,   5404  .  2675  ,   N  ,   00159.7569  ,  W  ,   1,10,4.00,100.0,M,50.0,M,,*72
	//                                                           |
	//Count:                                                     34

	Local_u8_Subs_Of_Fourth_Comma = Local_u8Counter	;

	// We all Set .

	//  0.........  10  ....  15 ....  20  .  22  .......... 33  .  35  .............................
	//  043338.100  ,   5404  .  2675  ,   N  ,   00159.7569  ,  W  ,   1,10,4.00,100.0,M,50.0,M,,*72
	//              |                  |      |               |
	//Comma's#:     1                  2      3               4

	//	Local_u8_Subs_Of_First_Comma
	//	Local_u8_Subs_Of_Second_Comma
	//	Local_u8_Subs_Of_Third_Comma
	//	Local_u8_Subs_Of_Fourth_Comma



	Local_u8_Subs_Of_First_Comma++;

	do
	{
		// 540 4.2675
		// |

		Local_u16TempLat *= 10;

		Local_u16TempLat += ((u16)(GPS_constu8_Buffer[Local_u8_Subs_Of_First_Comma]-0x30));

		//iter_#1      		0+5= 5
		//iter_#2          50+4= 54
		//iter_#3         540+0= 540
		//iter_#4        5400+4= 5404

		Local_u8_Subs_Of_First_Comma++;


	}while(GPS_constu8_Buffer[Local_u8_Subs_Of_First_Comma] != '.');

	// 5404.2675
	//     |

	Local_u8_Subs_Of_First_Comma++;

	// 5404.2675
	//      |



	do
	{
		// 5404.2675,
		//          |

		Local_u16TempLat += ((u16)(GPS_constu8_Buffer[Local_u8_Subs_Of_First_Comma]-0x30)/Local_u8Temp);

		Local_u8Temp *= 10 ;

		//iter_#1  Local_u16TempLat=   5404 + 0.2=  5404.2
		//iter_#2  Local_u16TempLat=   5404.2 + 0.06=  5404.26
		//iter_#3                      5404.26 + 0.007=  5404.267
		//iter_#4                      5404.267 + 0.0005=  5404.2675


		Local_u8_Subs_Of_First_Comma++;


	}while(GPS_constu8_Buffer[Local_u8_Subs_Of_First_Comma] != ',');


	// 5404.2675,N,00159.7569  ,  W
	//          |

	Local_u8_Subs_Of_First_Comma++;

	// 5404.2675,N,00159.7569  ,  W
	//           |
	**Copy_pu8LatDir = GPS_constu8_Buffer[Local_u8_Subs_Of_First_Comma];

	Local_u8_Subs_Of_First_Comma++;
	// 5404.2675,N,00159.7569  ,  W
	//            |
	Local_u8_Subs_Of_First_Comma++;

	// 5404.2675,N,00159.7569  ,  W
	//             |

	do
	{
		// 00159.7569
		// |

		Local_u16TempLong *= 10;

		Local_u16TempLong += ((u16)(GPS_constu8_Buffer[Local_u8_Subs_Of_First_Comma]-0x30));

		//iter_#1          0 + 0 = 0
		//iter_#2          0 + 0 = 0
		//iter_#3          0 + 1 = 1
		//iter_#4         10 + 5 = 15
		//iter_#4        150 + 9 = 159

		Local_u8_Subs_Of_First_Comma++;


	}while(GPS_constu8_Buffer[Local_u8_Subs_Of_First_Comma] != '.');


	// 00159.7569
	//      |
	Local_u8_Subs_Of_First_Comma++;

	// 00159.7569
	//       |

	Local_u8Temp = 10 ;

	do
	{

		// 00159.7569,W
		//       |

		Local_u16TempLong += ((u16)(GPS_constu8_Buffer[Local_u8_Subs_Of_First_Comma]-0x30)/Local_u8Temp);

		Local_u8Temp *= 10 ;
		//                                                          Local_u8Temp
		//iter_#1  Local_u16TempLat=   159 + 0.7=  159.7            10
		//iter_#2  Local_u16TempLat= 159.7+0.05 =  159.75           100
		//iter_#3                  159.75+0.006 =  159.756          1000
		//iter_#4                 159.756+0.0009 = 159.7569         10000                                   10000


		Local_u8_Subs_Of_First_Comma++;


	}while(GPS_constu8_Buffer[Local_u8_Subs_Of_First_Comma] != ',');

	// 00159.7569,W
	//           |


	Local_u8_Subs_Of_First_Comma++;
	// 00159.7569,W
	//            |

	**Copy_pu8LongDir = GPS_constu8_Buffer[Local_u8_Subs_Of_First_Comma];


	**Copy_pf32Long = Local_u16TempLong;
	**Copy_pf32Lat  = Local_u16TempLat ;

}//End of GPS_inlinevidAsciiToInt().



/***************************** END OF FILE. **********************************/
/*****************************************************************************/

