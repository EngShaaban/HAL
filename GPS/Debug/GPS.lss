
GPS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ad4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000154  00800060  00001ad4  00001b68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  008001b4  008001b4  00001cbc  2**0
                  ALLOC
  3 .stab         00001a64  00000000  00000000  00001cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b04  00000000  00000000  00003720  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000120  00000000  00000000  00004224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000178  00000000  00000000  00004344  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000168c  00000000  00000000  000044bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ca1  00000000  00000000  00005b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000c22  00000000  00000000  000067e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000140  00000000  00000000  0000740c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028a  00000000  00000000  0000754c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000732  00000000  00000000  000077d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ed       	ldi	r30, 0xD4	; 212
      68:	fa e1       	ldi	r31, 0x1A	; 26
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3b       	cpi	r26, 0xB4	; 180
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 eb       	ldi	r26, 0xB4	; 180
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3b       	cpi	r26, 0xBF	; 191
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ae 0c 	call	0x195c	; 0x195c <main>
      8a:	0c 94 68 0d 	jmp	0x1ad0	; 0x1ad0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 4f 02 	call	0x49e	; 0x49e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 4f 02 	call	0x49e	; 0x49e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 31 0d 	jmp	0x1a62	; 0x1a62 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3d 0d 	jmp	0x1a7a	; 0x1a7a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 40 04 	call	0x880	; 0x880 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 40 04 	call	0x880	; 0x880 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3d 0d 	jmp	0x1a7a	; 0x1a7a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 40 04 	call	0x880	; 0x880 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 40 04 	call	0x880	; 0x880 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <__epilogue_restores__+0x18>

0000043e <__gesf2>:
     43e:	a8 e1       	ldi	r26, 0x18	; 24
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3d 0d 	jmp	0x1a7a	; 0x1a7a <__prologue_saves__+0x18>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	89 e0       	ldi	r24, 0x09	; 9
     45c:	e8 2e       	mov	r14, r24
     45e:	f1 2c       	mov	r15, r1
     460:	ec 0e       	add	r14, r28
     462:	fd 1e       	adc	r15, r29
     464:	ce 01       	movw	r24, r28
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	b7 01       	movw	r22, r14
     46a:	0e 94 40 04 	call	0x880	; 0x880 <__unpack_f>
     46e:	8e 01       	movw	r16, r28
     470:	0f 5e       	subi	r16, 0xEF	; 239
     472:	1f 4f       	sbci	r17, 0xFF	; 255
     474:	ce 01       	movw	r24, r28
     476:	05 96       	adiw	r24, 0x05	; 5
     478:	b8 01       	movw	r22, r16
     47a:	0e 94 40 04 	call	0x880	; 0x880 <__unpack_f>
     47e:	89 85       	ldd	r24, Y+9	; 0x09
     480:	82 30       	cpi	r24, 0x02	; 2
     482:	40 f0       	brcs	.+16     	; 0x494 <__gesf2+0x56>
     484:	89 89       	ldd	r24, Y+17	; 0x11
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	28 f0       	brcs	.+10     	; 0x494 <__gesf2+0x56>
     48a:	c7 01       	movw	r24, r14
     48c:	b8 01       	movw	r22, r16
     48e:	0e 94 b8 04 	call	0x970	; 0x970 <__fpcmp_parts_f>
     492:	01 c0       	rjmp	.+2      	; 0x496 <__gesf2+0x58>
     494:	8f ef       	ldi	r24, 0xFF	; 255
     496:	68 96       	adiw	r28, 0x18	; 24
     498:	e6 e0       	ldi	r30, 0x06	; 6
     49a:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <__epilogue_restores__+0x18>

0000049e <__fixsfsi>:
     49e:	ac e0       	ldi	r26, 0x0C	; 12
     4a0:	b0 e0       	ldi	r27, 0x00	; 0
     4a2:	e5 e5       	ldi	r30, 0x55	; 85
     4a4:	f2 e0       	ldi	r31, 0x02	; 2
     4a6:	0c 94 41 0d 	jmp	0x1a82	; 0x1a82 <__prologue_saves__+0x20>
     4aa:	69 83       	std	Y+1, r22	; 0x01
     4ac:	7a 83       	std	Y+2, r23	; 0x02
     4ae:	8b 83       	std	Y+3, r24	; 0x03
     4b0:	9c 83       	std	Y+4, r25	; 0x04
     4b2:	ce 01       	movw	r24, r28
     4b4:	01 96       	adiw	r24, 0x01	; 1
     4b6:	be 01       	movw	r22, r28
     4b8:	6b 5f       	subi	r22, 0xFB	; 251
     4ba:	7f 4f       	sbci	r23, 0xFF	; 255
     4bc:	0e 94 40 04 	call	0x880	; 0x880 <__unpack_f>
     4c0:	8d 81       	ldd	r24, Y+5	; 0x05
     4c2:	82 30       	cpi	r24, 0x02	; 2
     4c4:	61 f1       	breq	.+88     	; 0x51e <__fixsfsi+0x80>
     4c6:	82 30       	cpi	r24, 0x02	; 2
     4c8:	50 f1       	brcs	.+84     	; 0x51e <__fixsfsi+0x80>
     4ca:	84 30       	cpi	r24, 0x04	; 4
     4cc:	21 f4       	brne	.+8      	; 0x4d6 <__fixsfsi+0x38>
     4ce:	8e 81       	ldd	r24, Y+6	; 0x06
     4d0:	88 23       	and	r24, r24
     4d2:	51 f1       	breq	.+84     	; 0x528 <__fixsfsi+0x8a>
     4d4:	2e c0       	rjmp	.+92     	; 0x532 <__fixsfsi+0x94>
     4d6:	2f 81       	ldd	r18, Y+7	; 0x07
     4d8:	38 85       	ldd	r19, Y+8	; 0x08
     4da:	37 fd       	sbrc	r19, 7
     4dc:	20 c0       	rjmp	.+64     	; 0x51e <__fixsfsi+0x80>
     4de:	6e 81       	ldd	r22, Y+6	; 0x06
     4e0:	2f 31       	cpi	r18, 0x1F	; 31
     4e2:	31 05       	cpc	r19, r1
     4e4:	1c f0       	brlt	.+6      	; 0x4ec <__fixsfsi+0x4e>
     4e6:	66 23       	and	r22, r22
     4e8:	f9 f0       	breq	.+62     	; 0x528 <__fixsfsi+0x8a>
     4ea:	23 c0       	rjmp	.+70     	; 0x532 <__fixsfsi+0x94>
     4ec:	8e e1       	ldi	r24, 0x1E	; 30
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	82 1b       	sub	r24, r18
     4f2:	93 0b       	sbc	r25, r19
     4f4:	29 85       	ldd	r18, Y+9	; 0x09
     4f6:	3a 85       	ldd	r19, Y+10	; 0x0a
     4f8:	4b 85       	ldd	r20, Y+11	; 0x0b
     4fa:	5c 85       	ldd	r21, Y+12	; 0x0c
     4fc:	04 c0       	rjmp	.+8      	; 0x506 <__fixsfsi+0x68>
     4fe:	56 95       	lsr	r21
     500:	47 95       	ror	r20
     502:	37 95       	ror	r19
     504:	27 95       	ror	r18
     506:	8a 95       	dec	r24
     508:	d2 f7       	brpl	.-12     	; 0x4fe <__fixsfsi+0x60>
     50a:	66 23       	and	r22, r22
     50c:	b1 f0       	breq	.+44     	; 0x53a <__fixsfsi+0x9c>
     50e:	50 95       	com	r21
     510:	40 95       	com	r20
     512:	30 95       	com	r19
     514:	21 95       	neg	r18
     516:	3f 4f       	sbci	r19, 0xFF	; 255
     518:	4f 4f       	sbci	r20, 0xFF	; 255
     51a:	5f 4f       	sbci	r21, 0xFF	; 255
     51c:	0e c0       	rjmp	.+28     	; 0x53a <__fixsfsi+0x9c>
     51e:	20 e0       	ldi	r18, 0x00	; 0
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	40 e0       	ldi	r20, 0x00	; 0
     524:	50 e0       	ldi	r21, 0x00	; 0
     526:	09 c0       	rjmp	.+18     	; 0x53a <__fixsfsi+0x9c>
     528:	2f ef       	ldi	r18, 0xFF	; 255
     52a:	3f ef       	ldi	r19, 0xFF	; 255
     52c:	4f ef       	ldi	r20, 0xFF	; 255
     52e:	5f e7       	ldi	r21, 0x7F	; 127
     530:	04 c0       	rjmp	.+8      	; 0x53a <__fixsfsi+0x9c>
     532:	20 e0       	ldi	r18, 0x00	; 0
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	40 e0       	ldi	r20, 0x00	; 0
     538:	50 e8       	ldi	r21, 0x80	; 128
     53a:	b9 01       	movw	r22, r18
     53c:	ca 01       	movw	r24, r20
     53e:	2c 96       	adiw	r28, 0x0c	; 12
     540:	e2 e0       	ldi	r30, 0x02	; 2
     542:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <__epilogue_restores__+0x20>

00000546 <__floatunsisf>:
     546:	a8 e0       	ldi	r26, 0x08	; 8
     548:	b0 e0       	ldi	r27, 0x00	; 0
     54a:	e9 ea       	ldi	r30, 0xA9	; 169
     54c:	f2 e0       	ldi	r31, 0x02	; 2
     54e:	0c 94 39 0d 	jmp	0x1a72	; 0x1a72 <__prologue_saves__+0x10>
     552:	7b 01       	movw	r14, r22
     554:	8c 01       	movw	r16, r24
     556:	61 15       	cp	r22, r1
     558:	71 05       	cpc	r23, r1
     55a:	81 05       	cpc	r24, r1
     55c:	91 05       	cpc	r25, r1
     55e:	19 f4       	brne	.+6      	; 0x566 <__floatunsisf+0x20>
     560:	82 e0       	ldi	r24, 0x02	; 2
     562:	89 83       	std	Y+1, r24	; 0x01
     564:	60 c0       	rjmp	.+192    	; 0x626 <__floatunsisf+0xe0>
     566:	83 e0       	ldi	r24, 0x03	; 3
     568:	89 83       	std	Y+1, r24	; 0x01
     56a:	8e e1       	ldi	r24, 0x1E	; 30
     56c:	c8 2e       	mov	r12, r24
     56e:	d1 2c       	mov	r13, r1
     570:	dc 82       	std	Y+4, r13	; 0x04
     572:	cb 82       	std	Y+3, r12	; 0x03
     574:	ed 82       	std	Y+5, r14	; 0x05
     576:	fe 82       	std	Y+6, r15	; 0x06
     578:	0f 83       	std	Y+7, r16	; 0x07
     57a:	18 87       	std	Y+8, r17	; 0x08
     57c:	c8 01       	movw	r24, r16
     57e:	b7 01       	movw	r22, r14
     580:	0e 94 1c 03 	call	0x638	; 0x638 <__clzsi2>
     584:	fc 01       	movw	r30, r24
     586:	31 97       	sbiw	r30, 0x01	; 1
     588:	f7 ff       	sbrs	r31, 7
     58a:	3b c0       	rjmp	.+118    	; 0x602 <__floatunsisf+0xbc>
     58c:	22 27       	eor	r18, r18
     58e:	33 27       	eor	r19, r19
     590:	2e 1b       	sub	r18, r30
     592:	3f 0b       	sbc	r19, r31
     594:	57 01       	movw	r10, r14
     596:	68 01       	movw	r12, r16
     598:	02 2e       	mov	r0, r18
     59a:	04 c0       	rjmp	.+8      	; 0x5a4 <__floatunsisf+0x5e>
     59c:	d6 94       	lsr	r13
     59e:	c7 94       	ror	r12
     5a0:	b7 94       	ror	r11
     5a2:	a7 94       	ror	r10
     5a4:	0a 94       	dec	r0
     5a6:	d2 f7       	brpl	.-12     	; 0x59c <__floatunsisf+0x56>
     5a8:	40 e0       	ldi	r20, 0x00	; 0
     5aa:	50 e0       	ldi	r21, 0x00	; 0
     5ac:	60 e0       	ldi	r22, 0x00	; 0
     5ae:	70 e0       	ldi	r23, 0x00	; 0
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	a0 e0       	ldi	r26, 0x00	; 0
     5b6:	b0 e0       	ldi	r27, 0x00	; 0
     5b8:	04 c0       	rjmp	.+8      	; 0x5c2 <__floatunsisf+0x7c>
     5ba:	88 0f       	add	r24, r24
     5bc:	99 1f       	adc	r25, r25
     5be:	aa 1f       	adc	r26, r26
     5c0:	bb 1f       	adc	r27, r27
     5c2:	2a 95       	dec	r18
     5c4:	d2 f7       	brpl	.-12     	; 0x5ba <__floatunsisf+0x74>
     5c6:	01 97       	sbiw	r24, 0x01	; 1
     5c8:	a1 09       	sbc	r26, r1
     5ca:	b1 09       	sbc	r27, r1
     5cc:	8e 21       	and	r24, r14
     5ce:	9f 21       	and	r25, r15
     5d0:	a0 23       	and	r26, r16
     5d2:	b1 23       	and	r27, r17
     5d4:	00 97       	sbiw	r24, 0x00	; 0
     5d6:	a1 05       	cpc	r26, r1
     5d8:	b1 05       	cpc	r27, r1
     5da:	21 f0       	breq	.+8      	; 0x5e4 <__floatunsisf+0x9e>
     5dc:	41 e0       	ldi	r20, 0x01	; 1
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	4a 29       	or	r20, r10
     5e6:	5b 29       	or	r21, r11
     5e8:	6c 29       	or	r22, r12
     5ea:	7d 29       	or	r23, r13
     5ec:	4d 83       	std	Y+5, r20	; 0x05
     5ee:	5e 83       	std	Y+6, r21	; 0x06
     5f0:	6f 83       	std	Y+7, r22	; 0x07
     5f2:	78 87       	std	Y+8, r23	; 0x08
     5f4:	8e e1       	ldi	r24, 0x1E	; 30
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	8e 1b       	sub	r24, r30
     5fa:	9f 0b       	sbc	r25, r31
     5fc:	9c 83       	std	Y+4, r25	; 0x04
     5fe:	8b 83       	std	Y+3, r24	; 0x03
     600:	12 c0       	rjmp	.+36     	; 0x626 <__floatunsisf+0xe0>
     602:	30 97       	sbiw	r30, 0x00	; 0
     604:	81 f0       	breq	.+32     	; 0x626 <__floatunsisf+0xe0>
     606:	0e 2e       	mov	r0, r30
     608:	04 c0       	rjmp	.+8      	; 0x612 <__floatunsisf+0xcc>
     60a:	ee 0c       	add	r14, r14
     60c:	ff 1c       	adc	r15, r15
     60e:	00 1f       	adc	r16, r16
     610:	11 1f       	adc	r17, r17
     612:	0a 94       	dec	r0
     614:	d2 f7       	brpl	.-12     	; 0x60a <__floatunsisf+0xc4>
     616:	ed 82       	std	Y+5, r14	; 0x05
     618:	fe 82       	std	Y+6, r15	; 0x06
     61a:	0f 83       	std	Y+7, r16	; 0x07
     61c:	18 87       	std	Y+8, r17	; 0x08
     61e:	ce 1a       	sub	r12, r30
     620:	df 0a       	sbc	r13, r31
     622:	dc 82       	std	Y+4, r13	; 0x04
     624:	cb 82       	std	Y+3, r12	; 0x03
     626:	1a 82       	std	Y+2, r1	; 0x02
     628:	ce 01       	movw	r24, r28
     62a:	01 96       	adiw	r24, 0x01	; 1
     62c:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__pack_f>
     630:	28 96       	adiw	r28, 0x08	; 8
     632:	ea e0       	ldi	r30, 0x0A	; 10
     634:	0c 94 55 0d 	jmp	0x1aaa	; 0x1aaa <__epilogue_restores__+0x10>

00000638 <__clzsi2>:
     638:	ef 92       	push	r14
     63a:	ff 92       	push	r15
     63c:	0f 93       	push	r16
     63e:	1f 93       	push	r17
     640:	7b 01       	movw	r14, r22
     642:	8c 01       	movw	r16, r24
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	e8 16       	cp	r14, r24
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	f8 06       	cpc	r15, r24
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	08 07       	cpc	r16, r24
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	18 07       	cpc	r17, r24
     654:	88 f4       	brcc	.+34     	; 0x678 <__clzsi2+0x40>
     656:	8f ef       	ldi	r24, 0xFF	; 255
     658:	e8 16       	cp	r14, r24
     65a:	f1 04       	cpc	r15, r1
     65c:	01 05       	cpc	r16, r1
     65e:	11 05       	cpc	r17, r1
     660:	31 f0       	breq	.+12     	; 0x66e <__clzsi2+0x36>
     662:	28 f0       	brcs	.+10     	; 0x66e <__clzsi2+0x36>
     664:	88 e0       	ldi	r24, 0x08	; 8
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	a0 e0       	ldi	r26, 0x00	; 0
     66a:	b0 e0       	ldi	r27, 0x00	; 0
     66c:	17 c0       	rjmp	.+46     	; 0x69c <__clzsi2+0x64>
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	a0 e0       	ldi	r26, 0x00	; 0
     674:	b0 e0       	ldi	r27, 0x00	; 0
     676:	12 c0       	rjmp	.+36     	; 0x69c <__clzsi2+0x64>
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	e8 16       	cp	r14, r24
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	f8 06       	cpc	r15, r24
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	08 07       	cpc	r16, r24
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	18 07       	cpc	r17, r24
     688:	28 f0       	brcs	.+10     	; 0x694 <__clzsi2+0x5c>
     68a:	88 e1       	ldi	r24, 0x18	; 24
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e0       	ldi	r27, 0x00	; 0
     692:	04 c0       	rjmp	.+8      	; 0x69c <__clzsi2+0x64>
     694:	80 e1       	ldi	r24, 0x10	; 16
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	a0 e0       	ldi	r26, 0x00	; 0
     69a:	b0 e0       	ldi	r27, 0x00	; 0
     69c:	20 e2       	ldi	r18, 0x20	; 32
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	40 e0       	ldi	r20, 0x00	; 0
     6a2:	50 e0       	ldi	r21, 0x00	; 0
     6a4:	28 1b       	sub	r18, r24
     6a6:	39 0b       	sbc	r19, r25
     6a8:	4a 0b       	sbc	r20, r26
     6aa:	5b 0b       	sbc	r21, r27
     6ac:	04 c0       	rjmp	.+8      	; 0x6b6 <__clzsi2+0x7e>
     6ae:	16 95       	lsr	r17
     6b0:	07 95       	ror	r16
     6b2:	f7 94       	ror	r15
     6b4:	e7 94       	ror	r14
     6b6:	8a 95       	dec	r24
     6b8:	d2 f7       	brpl	.-12     	; 0x6ae <__clzsi2+0x76>
     6ba:	f7 01       	movw	r30, r14
     6bc:	e8 59       	subi	r30, 0x98	; 152
     6be:	ff 4f       	sbci	r31, 0xFF	; 255
     6c0:	80 81       	ld	r24, Z
     6c2:	28 1b       	sub	r18, r24
     6c4:	31 09       	sbc	r19, r1
     6c6:	41 09       	sbc	r20, r1
     6c8:	51 09       	sbc	r21, r1
     6ca:	c9 01       	movw	r24, r18
     6cc:	1f 91       	pop	r17
     6ce:	0f 91       	pop	r16
     6d0:	ff 90       	pop	r15
     6d2:	ef 90       	pop	r14
     6d4:	08 95       	ret

000006d6 <__pack_f>:
     6d6:	df 92       	push	r13
     6d8:	ef 92       	push	r14
     6da:	ff 92       	push	r15
     6dc:	0f 93       	push	r16
     6de:	1f 93       	push	r17
     6e0:	fc 01       	movw	r30, r24
     6e2:	e4 80       	ldd	r14, Z+4	; 0x04
     6e4:	f5 80       	ldd	r15, Z+5	; 0x05
     6e6:	06 81       	ldd	r16, Z+6	; 0x06
     6e8:	17 81       	ldd	r17, Z+7	; 0x07
     6ea:	d1 80       	ldd	r13, Z+1	; 0x01
     6ec:	80 81       	ld	r24, Z
     6ee:	82 30       	cpi	r24, 0x02	; 2
     6f0:	48 f4       	brcc	.+18     	; 0x704 <__pack_f+0x2e>
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	a0 e1       	ldi	r26, 0x10	; 16
     6f8:	b0 e0       	ldi	r27, 0x00	; 0
     6fa:	e8 2a       	or	r14, r24
     6fc:	f9 2a       	or	r15, r25
     6fe:	0a 2b       	or	r16, r26
     700:	1b 2b       	or	r17, r27
     702:	a5 c0       	rjmp	.+330    	; 0x84e <__pack_f+0x178>
     704:	84 30       	cpi	r24, 0x04	; 4
     706:	09 f4       	brne	.+2      	; 0x70a <__pack_f+0x34>
     708:	9f c0       	rjmp	.+318    	; 0x848 <__pack_f+0x172>
     70a:	82 30       	cpi	r24, 0x02	; 2
     70c:	21 f4       	brne	.+8      	; 0x716 <__pack_f+0x40>
     70e:	ee 24       	eor	r14, r14
     710:	ff 24       	eor	r15, r15
     712:	87 01       	movw	r16, r14
     714:	05 c0       	rjmp	.+10     	; 0x720 <__pack_f+0x4a>
     716:	e1 14       	cp	r14, r1
     718:	f1 04       	cpc	r15, r1
     71a:	01 05       	cpc	r16, r1
     71c:	11 05       	cpc	r17, r1
     71e:	19 f4       	brne	.+6      	; 0x726 <__pack_f+0x50>
     720:	e0 e0       	ldi	r30, 0x00	; 0
     722:	f0 e0       	ldi	r31, 0x00	; 0
     724:	96 c0       	rjmp	.+300    	; 0x852 <__pack_f+0x17c>
     726:	62 81       	ldd	r22, Z+2	; 0x02
     728:	73 81       	ldd	r23, Z+3	; 0x03
     72a:	9f ef       	ldi	r25, 0xFF	; 255
     72c:	62 38       	cpi	r22, 0x82	; 130
     72e:	79 07       	cpc	r23, r25
     730:	0c f0       	brlt	.+2      	; 0x734 <__pack_f+0x5e>
     732:	5b c0       	rjmp	.+182    	; 0x7ea <__pack_f+0x114>
     734:	22 e8       	ldi	r18, 0x82	; 130
     736:	3f ef       	ldi	r19, 0xFF	; 255
     738:	26 1b       	sub	r18, r22
     73a:	37 0b       	sbc	r19, r23
     73c:	2a 31       	cpi	r18, 0x1A	; 26
     73e:	31 05       	cpc	r19, r1
     740:	2c f0       	brlt	.+10     	; 0x74c <__pack_f+0x76>
     742:	20 e0       	ldi	r18, 0x00	; 0
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	40 e0       	ldi	r20, 0x00	; 0
     748:	50 e0       	ldi	r21, 0x00	; 0
     74a:	2a c0       	rjmp	.+84     	; 0x7a0 <__pack_f+0xca>
     74c:	b8 01       	movw	r22, r16
     74e:	a7 01       	movw	r20, r14
     750:	02 2e       	mov	r0, r18
     752:	04 c0       	rjmp	.+8      	; 0x75c <__pack_f+0x86>
     754:	76 95       	lsr	r23
     756:	67 95       	ror	r22
     758:	57 95       	ror	r21
     75a:	47 95       	ror	r20
     75c:	0a 94       	dec	r0
     75e:	d2 f7       	brpl	.-12     	; 0x754 <__pack_f+0x7e>
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	a0 e0       	ldi	r26, 0x00	; 0
     766:	b0 e0       	ldi	r27, 0x00	; 0
     768:	04 c0       	rjmp	.+8      	; 0x772 <__pack_f+0x9c>
     76a:	88 0f       	add	r24, r24
     76c:	99 1f       	adc	r25, r25
     76e:	aa 1f       	adc	r26, r26
     770:	bb 1f       	adc	r27, r27
     772:	2a 95       	dec	r18
     774:	d2 f7       	brpl	.-12     	; 0x76a <__pack_f+0x94>
     776:	01 97       	sbiw	r24, 0x01	; 1
     778:	a1 09       	sbc	r26, r1
     77a:	b1 09       	sbc	r27, r1
     77c:	8e 21       	and	r24, r14
     77e:	9f 21       	and	r25, r15
     780:	a0 23       	and	r26, r16
     782:	b1 23       	and	r27, r17
     784:	00 97       	sbiw	r24, 0x00	; 0
     786:	a1 05       	cpc	r26, r1
     788:	b1 05       	cpc	r27, r1
     78a:	21 f0       	breq	.+8      	; 0x794 <__pack_f+0xbe>
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	a0 e0       	ldi	r26, 0x00	; 0
     792:	b0 e0       	ldi	r27, 0x00	; 0
     794:	9a 01       	movw	r18, r20
     796:	ab 01       	movw	r20, r22
     798:	28 2b       	or	r18, r24
     79a:	39 2b       	or	r19, r25
     79c:	4a 2b       	or	r20, r26
     79e:	5b 2b       	or	r21, r27
     7a0:	da 01       	movw	r26, r20
     7a2:	c9 01       	movw	r24, r18
     7a4:	8f 77       	andi	r24, 0x7F	; 127
     7a6:	90 70       	andi	r25, 0x00	; 0
     7a8:	a0 70       	andi	r26, 0x00	; 0
     7aa:	b0 70       	andi	r27, 0x00	; 0
     7ac:	80 34       	cpi	r24, 0x40	; 64
     7ae:	91 05       	cpc	r25, r1
     7b0:	a1 05       	cpc	r26, r1
     7b2:	b1 05       	cpc	r27, r1
     7b4:	39 f4       	brne	.+14     	; 0x7c4 <__pack_f+0xee>
     7b6:	27 ff       	sbrs	r18, 7
     7b8:	09 c0       	rjmp	.+18     	; 0x7cc <__pack_f+0xf6>
     7ba:	20 5c       	subi	r18, 0xC0	; 192
     7bc:	3f 4f       	sbci	r19, 0xFF	; 255
     7be:	4f 4f       	sbci	r20, 0xFF	; 255
     7c0:	5f 4f       	sbci	r21, 0xFF	; 255
     7c2:	04 c0       	rjmp	.+8      	; 0x7cc <__pack_f+0xf6>
     7c4:	21 5c       	subi	r18, 0xC1	; 193
     7c6:	3f 4f       	sbci	r19, 0xFF	; 255
     7c8:	4f 4f       	sbci	r20, 0xFF	; 255
     7ca:	5f 4f       	sbci	r21, 0xFF	; 255
     7cc:	e0 e0       	ldi	r30, 0x00	; 0
     7ce:	f0 e0       	ldi	r31, 0x00	; 0
     7d0:	20 30       	cpi	r18, 0x00	; 0
     7d2:	a0 e0       	ldi	r26, 0x00	; 0
     7d4:	3a 07       	cpc	r19, r26
     7d6:	a0 e0       	ldi	r26, 0x00	; 0
     7d8:	4a 07       	cpc	r20, r26
     7da:	a0 e4       	ldi	r26, 0x40	; 64
     7dc:	5a 07       	cpc	r21, r26
     7de:	10 f0       	brcs	.+4      	; 0x7e4 <__pack_f+0x10e>
     7e0:	e1 e0       	ldi	r30, 0x01	; 1
     7e2:	f0 e0       	ldi	r31, 0x00	; 0
     7e4:	79 01       	movw	r14, r18
     7e6:	8a 01       	movw	r16, r20
     7e8:	27 c0       	rjmp	.+78     	; 0x838 <__pack_f+0x162>
     7ea:	60 38       	cpi	r22, 0x80	; 128
     7ec:	71 05       	cpc	r23, r1
     7ee:	64 f5       	brge	.+88     	; 0x848 <__pack_f+0x172>
     7f0:	fb 01       	movw	r30, r22
     7f2:	e1 58       	subi	r30, 0x81	; 129
     7f4:	ff 4f       	sbci	r31, 0xFF	; 255
     7f6:	d8 01       	movw	r26, r16
     7f8:	c7 01       	movw	r24, r14
     7fa:	8f 77       	andi	r24, 0x7F	; 127
     7fc:	90 70       	andi	r25, 0x00	; 0
     7fe:	a0 70       	andi	r26, 0x00	; 0
     800:	b0 70       	andi	r27, 0x00	; 0
     802:	80 34       	cpi	r24, 0x40	; 64
     804:	91 05       	cpc	r25, r1
     806:	a1 05       	cpc	r26, r1
     808:	b1 05       	cpc	r27, r1
     80a:	39 f4       	brne	.+14     	; 0x81a <__pack_f+0x144>
     80c:	e7 fe       	sbrs	r14, 7
     80e:	0d c0       	rjmp	.+26     	; 0x82a <__pack_f+0x154>
     810:	80 e4       	ldi	r24, 0x40	; 64
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	a0 e0       	ldi	r26, 0x00	; 0
     816:	b0 e0       	ldi	r27, 0x00	; 0
     818:	04 c0       	rjmp	.+8      	; 0x822 <__pack_f+0x14c>
     81a:	8f e3       	ldi	r24, 0x3F	; 63
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	a0 e0       	ldi	r26, 0x00	; 0
     820:	b0 e0       	ldi	r27, 0x00	; 0
     822:	e8 0e       	add	r14, r24
     824:	f9 1e       	adc	r15, r25
     826:	0a 1f       	adc	r16, r26
     828:	1b 1f       	adc	r17, r27
     82a:	17 ff       	sbrs	r17, 7
     82c:	05 c0       	rjmp	.+10     	; 0x838 <__pack_f+0x162>
     82e:	16 95       	lsr	r17
     830:	07 95       	ror	r16
     832:	f7 94       	ror	r15
     834:	e7 94       	ror	r14
     836:	31 96       	adiw	r30, 0x01	; 1
     838:	87 e0       	ldi	r24, 0x07	; 7
     83a:	16 95       	lsr	r17
     83c:	07 95       	ror	r16
     83e:	f7 94       	ror	r15
     840:	e7 94       	ror	r14
     842:	8a 95       	dec	r24
     844:	d1 f7       	brne	.-12     	; 0x83a <__pack_f+0x164>
     846:	05 c0       	rjmp	.+10     	; 0x852 <__pack_f+0x17c>
     848:	ee 24       	eor	r14, r14
     84a:	ff 24       	eor	r15, r15
     84c:	87 01       	movw	r16, r14
     84e:	ef ef       	ldi	r30, 0xFF	; 255
     850:	f0 e0       	ldi	r31, 0x00	; 0
     852:	6e 2f       	mov	r22, r30
     854:	67 95       	ror	r22
     856:	66 27       	eor	r22, r22
     858:	67 95       	ror	r22
     85a:	90 2f       	mov	r25, r16
     85c:	9f 77       	andi	r25, 0x7F	; 127
     85e:	d7 94       	ror	r13
     860:	dd 24       	eor	r13, r13
     862:	d7 94       	ror	r13
     864:	8e 2f       	mov	r24, r30
     866:	86 95       	lsr	r24
     868:	49 2f       	mov	r20, r25
     86a:	46 2b       	or	r20, r22
     86c:	58 2f       	mov	r21, r24
     86e:	5d 29       	or	r21, r13
     870:	b7 01       	movw	r22, r14
     872:	ca 01       	movw	r24, r20
     874:	1f 91       	pop	r17
     876:	0f 91       	pop	r16
     878:	ff 90       	pop	r15
     87a:	ef 90       	pop	r14
     87c:	df 90       	pop	r13
     87e:	08 95       	ret

00000880 <__unpack_f>:
     880:	fc 01       	movw	r30, r24
     882:	db 01       	movw	r26, r22
     884:	40 81       	ld	r20, Z
     886:	51 81       	ldd	r21, Z+1	; 0x01
     888:	22 81       	ldd	r18, Z+2	; 0x02
     88a:	62 2f       	mov	r22, r18
     88c:	6f 77       	andi	r22, 0x7F	; 127
     88e:	70 e0       	ldi	r23, 0x00	; 0
     890:	22 1f       	adc	r18, r18
     892:	22 27       	eor	r18, r18
     894:	22 1f       	adc	r18, r18
     896:	93 81       	ldd	r25, Z+3	; 0x03
     898:	89 2f       	mov	r24, r25
     89a:	88 0f       	add	r24, r24
     89c:	82 2b       	or	r24, r18
     89e:	28 2f       	mov	r18, r24
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	99 1f       	adc	r25, r25
     8a4:	99 27       	eor	r25, r25
     8a6:	99 1f       	adc	r25, r25
     8a8:	11 96       	adiw	r26, 0x01	; 1
     8aa:	9c 93       	st	X, r25
     8ac:	11 97       	sbiw	r26, 0x01	; 1
     8ae:	21 15       	cp	r18, r1
     8b0:	31 05       	cpc	r19, r1
     8b2:	a9 f5       	brne	.+106    	; 0x91e <__unpack_f+0x9e>
     8b4:	41 15       	cp	r20, r1
     8b6:	51 05       	cpc	r21, r1
     8b8:	61 05       	cpc	r22, r1
     8ba:	71 05       	cpc	r23, r1
     8bc:	11 f4       	brne	.+4      	; 0x8c2 <__unpack_f+0x42>
     8be:	82 e0       	ldi	r24, 0x02	; 2
     8c0:	37 c0       	rjmp	.+110    	; 0x930 <__unpack_f+0xb0>
     8c2:	82 e8       	ldi	r24, 0x82	; 130
     8c4:	9f ef       	ldi	r25, 0xFF	; 255
     8c6:	13 96       	adiw	r26, 0x03	; 3
     8c8:	9c 93       	st	X, r25
     8ca:	8e 93       	st	-X, r24
     8cc:	12 97       	sbiw	r26, 0x02	; 2
     8ce:	9a 01       	movw	r18, r20
     8d0:	ab 01       	movw	r20, r22
     8d2:	67 e0       	ldi	r22, 0x07	; 7
     8d4:	22 0f       	add	r18, r18
     8d6:	33 1f       	adc	r19, r19
     8d8:	44 1f       	adc	r20, r20
     8da:	55 1f       	adc	r21, r21
     8dc:	6a 95       	dec	r22
     8de:	d1 f7       	brne	.-12     	; 0x8d4 <__unpack_f+0x54>
     8e0:	83 e0       	ldi	r24, 0x03	; 3
     8e2:	8c 93       	st	X, r24
     8e4:	0d c0       	rjmp	.+26     	; 0x900 <__unpack_f+0x80>
     8e6:	22 0f       	add	r18, r18
     8e8:	33 1f       	adc	r19, r19
     8ea:	44 1f       	adc	r20, r20
     8ec:	55 1f       	adc	r21, r21
     8ee:	12 96       	adiw	r26, 0x02	; 2
     8f0:	8d 91       	ld	r24, X+
     8f2:	9c 91       	ld	r25, X
     8f4:	13 97       	sbiw	r26, 0x03	; 3
     8f6:	01 97       	sbiw	r24, 0x01	; 1
     8f8:	13 96       	adiw	r26, 0x03	; 3
     8fa:	9c 93       	st	X, r25
     8fc:	8e 93       	st	-X, r24
     8fe:	12 97       	sbiw	r26, 0x02	; 2
     900:	20 30       	cpi	r18, 0x00	; 0
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	38 07       	cpc	r19, r24
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	48 07       	cpc	r20, r24
     90a:	80 e4       	ldi	r24, 0x40	; 64
     90c:	58 07       	cpc	r21, r24
     90e:	58 f3       	brcs	.-42     	; 0x8e6 <__unpack_f+0x66>
     910:	14 96       	adiw	r26, 0x04	; 4
     912:	2d 93       	st	X+, r18
     914:	3d 93       	st	X+, r19
     916:	4d 93       	st	X+, r20
     918:	5c 93       	st	X, r21
     91a:	17 97       	sbiw	r26, 0x07	; 7
     91c:	08 95       	ret
     91e:	2f 3f       	cpi	r18, 0xFF	; 255
     920:	31 05       	cpc	r19, r1
     922:	79 f4       	brne	.+30     	; 0x942 <__unpack_f+0xc2>
     924:	41 15       	cp	r20, r1
     926:	51 05       	cpc	r21, r1
     928:	61 05       	cpc	r22, r1
     92a:	71 05       	cpc	r23, r1
     92c:	19 f4       	brne	.+6      	; 0x934 <__unpack_f+0xb4>
     92e:	84 e0       	ldi	r24, 0x04	; 4
     930:	8c 93       	st	X, r24
     932:	08 95       	ret
     934:	64 ff       	sbrs	r22, 4
     936:	03 c0       	rjmp	.+6      	; 0x93e <__unpack_f+0xbe>
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	8c 93       	st	X, r24
     93c:	12 c0       	rjmp	.+36     	; 0x962 <__unpack_f+0xe2>
     93e:	1c 92       	st	X, r1
     940:	10 c0       	rjmp	.+32     	; 0x962 <__unpack_f+0xe2>
     942:	2f 57       	subi	r18, 0x7F	; 127
     944:	30 40       	sbci	r19, 0x00	; 0
     946:	13 96       	adiw	r26, 0x03	; 3
     948:	3c 93       	st	X, r19
     94a:	2e 93       	st	-X, r18
     94c:	12 97       	sbiw	r26, 0x02	; 2
     94e:	83 e0       	ldi	r24, 0x03	; 3
     950:	8c 93       	st	X, r24
     952:	87 e0       	ldi	r24, 0x07	; 7
     954:	44 0f       	add	r20, r20
     956:	55 1f       	adc	r21, r21
     958:	66 1f       	adc	r22, r22
     95a:	77 1f       	adc	r23, r23
     95c:	8a 95       	dec	r24
     95e:	d1 f7       	brne	.-12     	; 0x954 <__unpack_f+0xd4>
     960:	70 64       	ori	r23, 0x40	; 64
     962:	14 96       	adiw	r26, 0x04	; 4
     964:	4d 93       	st	X+, r20
     966:	5d 93       	st	X+, r21
     968:	6d 93       	st	X+, r22
     96a:	7c 93       	st	X, r23
     96c:	17 97       	sbiw	r26, 0x07	; 7
     96e:	08 95       	ret

00000970 <__fpcmp_parts_f>:
     970:	1f 93       	push	r17
     972:	dc 01       	movw	r26, r24
     974:	fb 01       	movw	r30, r22
     976:	9c 91       	ld	r25, X
     978:	92 30       	cpi	r25, 0x02	; 2
     97a:	08 f4       	brcc	.+2      	; 0x97e <__fpcmp_parts_f+0xe>
     97c:	47 c0       	rjmp	.+142    	; 0xa0c <__fpcmp_parts_f+0x9c>
     97e:	80 81       	ld	r24, Z
     980:	82 30       	cpi	r24, 0x02	; 2
     982:	08 f4       	brcc	.+2      	; 0x986 <__fpcmp_parts_f+0x16>
     984:	43 c0       	rjmp	.+134    	; 0xa0c <__fpcmp_parts_f+0x9c>
     986:	94 30       	cpi	r25, 0x04	; 4
     988:	51 f4       	brne	.+20     	; 0x99e <__fpcmp_parts_f+0x2e>
     98a:	11 96       	adiw	r26, 0x01	; 1
     98c:	1c 91       	ld	r17, X
     98e:	84 30       	cpi	r24, 0x04	; 4
     990:	99 f5       	brne	.+102    	; 0x9f8 <__fpcmp_parts_f+0x88>
     992:	81 81       	ldd	r24, Z+1	; 0x01
     994:	68 2f       	mov	r22, r24
     996:	70 e0       	ldi	r23, 0x00	; 0
     998:	61 1b       	sub	r22, r17
     99a:	71 09       	sbc	r23, r1
     99c:	3f c0       	rjmp	.+126    	; 0xa1c <__fpcmp_parts_f+0xac>
     99e:	84 30       	cpi	r24, 0x04	; 4
     9a0:	21 f0       	breq	.+8      	; 0x9aa <__fpcmp_parts_f+0x3a>
     9a2:	92 30       	cpi	r25, 0x02	; 2
     9a4:	31 f4       	brne	.+12     	; 0x9b2 <__fpcmp_parts_f+0x42>
     9a6:	82 30       	cpi	r24, 0x02	; 2
     9a8:	b9 f1       	breq	.+110    	; 0xa18 <__fpcmp_parts_f+0xa8>
     9aa:	81 81       	ldd	r24, Z+1	; 0x01
     9ac:	88 23       	and	r24, r24
     9ae:	89 f1       	breq	.+98     	; 0xa12 <__fpcmp_parts_f+0xa2>
     9b0:	2d c0       	rjmp	.+90     	; 0xa0c <__fpcmp_parts_f+0x9c>
     9b2:	11 96       	adiw	r26, 0x01	; 1
     9b4:	1c 91       	ld	r17, X
     9b6:	11 97       	sbiw	r26, 0x01	; 1
     9b8:	82 30       	cpi	r24, 0x02	; 2
     9ba:	f1 f0       	breq	.+60     	; 0x9f8 <__fpcmp_parts_f+0x88>
     9bc:	81 81       	ldd	r24, Z+1	; 0x01
     9be:	18 17       	cp	r17, r24
     9c0:	d9 f4       	brne	.+54     	; 0x9f8 <__fpcmp_parts_f+0x88>
     9c2:	12 96       	adiw	r26, 0x02	; 2
     9c4:	2d 91       	ld	r18, X+
     9c6:	3c 91       	ld	r19, X
     9c8:	13 97       	sbiw	r26, 0x03	; 3
     9ca:	82 81       	ldd	r24, Z+2	; 0x02
     9cc:	93 81       	ldd	r25, Z+3	; 0x03
     9ce:	82 17       	cp	r24, r18
     9d0:	93 07       	cpc	r25, r19
     9d2:	94 f0       	brlt	.+36     	; 0x9f8 <__fpcmp_parts_f+0x88>
     9d4:	28 17       	cp	r18, r24
     9d6:	39 07       	cpc	r19, r25
     9d8:	bc f0       	brlt	.+46     	; 0xa08 <__fpcmp_parts_f+0x98>
     9da:	14 96       	adiw	r26, 0x04	; 4
     9dc:	8d 91       	ld	r24, X+
     9de:	9d 91       	ld	r25, X+
     9e0:	0d 90       	ld	r0, X+
     9e2:	bc 91       	ld	r27, X
     9e4:	a0 2d       	mov	r26, r0
     9e6:	24 81       	ldd	r18, Z+4	; 0x04
     9e8:	35 81       	ldd	r19, Z+5	; 0x05
     9ea:	46 81       	ldd	r20, Z+6	; 0x06
     9ec:	57 81       	ldd	r21, Z+7	; 0x07
     9ee:	28 17       	cp	r18, r24
     9f0:	39 07       	cpc	r19, r25
     9f2:	4a 07       	cpc	r20, r26
     9f4:	5b 07       	cpc	r21, r27
     9f6:	18 f4       	brcc	.+6      	; 0x9fe <__fpcmp_parts_f+0x8e>
     9f8:	11 23       	and	r17, r17
     9fa:	41 f0       	breq	.+16     	; 0xa0c <__fpcmp_parts_f+0x9c>
     9fc:	0a c0       	rjmp	.+20     	; 0xa12 <__fpcmp_parts_f+0xa2>
     9fe:	82 17       	cp	r24, r18
     a00:	93 07       	cpc	r25, r19
     a02:	a4 07       	cpc	r26, r20
     a04:	b5 07       	cpc	r27, r21
     a06:	40 f4       	brcc	.+16     	; 0xa18 <__fpcmp_parts_f+0xa8>
     a08:	11 23       	and	r17, r17
     a0a:	19 f0       	breq	.+6      	; 0xa12 <__fpcmp_parts_f+0xa2>
     a0c:	61 e0       	ldi	r22, 0x01	; 1
     a0e:	70 e0       	ldi	r23, 0x00	; 0
     a10:	05 c0       	rjmp	.+10     	; 0xa1c <__fpcmp_parts_f+0xac>
     a12:	6f ef       	ldi	r22, 0xFF	; 255
     a14:	7f ef       	ldi	r23, 0xFF	; 255
     a16:	02 c0       	rjmp	.+4      	; 0xa1c <__fpcmp_parts_f+0xac>
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	cb 01       	movw	r24, r22
     a1e:	1f 91       	pop	r17
     a20:	08 95       	ret

00000a22 <UART_enuInit>:
#include "UART_Priv.h"
#include "UART_Cnfg.h"


void UART_enuInit( void )
{
     a22:	df 93       	push	r29
     a24:	cf 93       	push	r28
     a26:	cd b7       	in	r28, 0x3d	; 61
     a28:	de b7       	in	r29, 0x3e	; 62
	 *                                                                           *
	 *                               5.4_ For Asynchronous mode .                *
	 *                                          Clear UCPOL Bit.                 *
	 *                                                                           *
	 ****************************************************************************/
	UCSRC =( (UART_MSK_BIT<<URSEL)|(UART_MSK_BIT<<UCSZ0)|(UART_MSK_BIT<<UCSZ1)  );
     a2a:	e0 e4       	ldi	r30, 0x40	; 64
     a2c:	f0 e0       	ldi	r31, 0x00	; 0
     a2e:	86 e8       	ldi	r24, 0x86	; 134
     a30:	80 83       	st	Z, r24

	UCSRA  &=~(UART_MSK_BIT<<U2X);

#elif UART_SPEED_MODE == DOUBLE

	UCSRA  |=(UART_MSK_BIT<<U2X);
     a32:	ab e2       	ldi	r26, 0x2B	; 43
     a34:	b0 e0       	ldi	r27, 0x00	; 0
     a36:	eb e2       	ldi	r30, 0x2B	; 43
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	80 81       	ld	r24, Z
     a3c:	82 60       	ori	r24, 0x02	; 2
     a3e:	8c 93       	st	X, r24

#endif



	UBRRL = MY_UBRRL  ;
     a40:	e9 e2       	ldi	r30, 0x29	; 41
     a42:	f0 e0       	ldi	r31, 0x00	; 0
     a44:	8c e0       	ldi	r24, 0x0C	; 12
     a46:	80 83       	st	Z, r24
	UBRRH = MY_UBRRH  ;
     a48:	e0 e4       	ldi	r30, 0x40	; 64
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	10 82       	st	Z, r1
	UART_RX_START();

#elif   UART_MODE   == TRANSCEIVER

	//3.Enable the  RXEN and TXEN Bit
	UART_TX_START();
     a4e:	aa e2       	ldi	r26, 0x2A	; 42
     a50:	b0 e0       	ldi	r27, 0x00	; 0
     a52:	ea e2       	ldi	r30, 0x2A	; 42
     a54:	f0 e0       	ldi	r31, 0x00	; 0
     a56:	80 81       	ld	r24, Z
     a58:	88 60       	ori	r24, 0x08	; 8
     a5a:	8c 93       	st	X, r24
	UART_RX_START();
     a5c:	aa e2       	ldi	r26, 0x2A	; 42
     a5e:	b0 e0       	ldi	r27, 0x00	; 0
     a60:	ea e2       	ldi	r30, 0x2A	; 42
     a62:	f0 e0       	ldi	r31, 0x00	; 0
     a64:	80 81       	ld	r24, Z
     a66:	80 61       	ori	r24, 0x10	; 16
     a68:	8c 93       	st	X, r24


	//2.Configure the UART Multi-processor Communication Mode.
#if  UART_MPC_MODE   ==  DISABLE_MPCM

	UCSRA  &=~(UART_MSK_BIT<<MPCM);
     a6a:	ab e2       	ldi	r26, 0x2B	; 43
     a6c:	b0 e0       	ldi	r27, 0x00	; 0
     a6e:	eb e2       	ldi	r30, 0x2B	; 43
     a70:	f0 e0       	ldi	r31, 0x00	; 0
     a72:	80 81       	ld	r24, Z
     a74:	8e 7f       	andi	r24, 0xFE	; 254
     a76:	8c 93       	st	X, r24

	UCSRA  |=(UART_MSK_BIT<<MPCM);

#endif

}//End of UART_
     a78:	cf 91       	pop	r28
     a7a:	df 91       	pop	r29
     a7c:	08 95       	ret

00000a7e <UART_enuSendByte>:



ES_t UART_enuSendByte(u8 Copy_u8Data)
{
     a7e:	df 93       	push	r29
     a80:	cf 93       	push	r28
     a82:	00 d0       	rcall	.+0      	; 0xa84 <UART_enuSendByte+0x6>
     a84:	cd b7       	in	r28, 0x3d	; 61
     a86:	de b7       	in	r29, 0x3e	; 62
     a88:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState  = ES_NOK ;
     a8a:	19 82       	std	Y+1, r1	; 0x01

	// Poll the for the UDRE
	while( !((UCSRA>>UDRE)&1) );
     a8c:	eb e2       	ldi	r30, 0x2B	; 43
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	80 81       	ld	r24, Z
     a92:	82 95       	swap	r24
     a94:	86 95       	lsr	r24
     a96:	87 70       	andi	r24, 0x07	; 7
     a98:	88 2f       	mov	r24, r24
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	81 70       	andi	r24, 0x01	; 1
     a9e:	90 70       	andi	r25, 0x00	; 0
     aa0:	00 97       	sbiw	r24, 0x00	; 0
     aa2:	a1 f3       	breq	.-24     	; 0xa8c <UART_enuSendByte+0xe>

	UDR = Copy_u8Data  ;
     aa4:	ec e2       	ldi	r30, 0x2C	; 44
     aa6:	f0 e0       	ldi	r31, 0x00	; 0
     aa8:	8a 81       	ldd	r24, Y+2	; 0x02
     aaa:	80 83       	st	Z, r24

	//Check for the Completion of Transmittioin.
	if( (UCSRA>>TXC)&1 )
     aac:	eb e2       	ldi	r30, 0x2B	; 43
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	80 81       	ld	r24, Z
     ab2:	82 95       	swap	r24
     ab4:	86 95       	lsr	r24
     ab6:	86 95       	lsr	r24
     ab8:	83 70       	andi	r24, 0x03	; 3
     aba:	88 2f       	mov	r24, r24
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	81 70       	andi	r24, 0x01	; 1
     ac0:	90 70       	andi	r25, 0x00	; 0
     ac2:	88 23       	and	r24, r24
     ac4:	49 f0       	breq	.+18     	; 0xad8 <UART_enuSendByte+0x5a>
	{
		//Clear the flag.
		UCSRA |=(UART_MSK_BIT<<TXC);
     ac6:	ab e2       	ldi	r26, 0x2B	; 43
     ac8:	b0 e0       	ldi	r27, 0x00	; 0
     aca:	eb e2       	ldi	r30, 0x2B	; 43
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	80 81       	ld	r24, Z
     ad0:	80 64       	ori	r24, 0x40	; 64
     ad2:	8c 93       	st	X, r24

		Local_enuErrorState = ES_OK ;
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		//Do nothing.
	}

	return Local_enuErrorState  ;
     ad8:	89 81       	ldd	r24, Y+1	; 0x01
}//End of UART_enuSendByte().
     ada:	0f 90       	pop	r0
     adc:	0f 90       	pop	r0
     ade:	cf 91       	pop	r28
     ae0:	df 91       	pop	r29
     ae2:	08 95       	ret

00000ae4 <UART_enuRecieveByte>:


ES_t UART_enuRecieveByte( u8* Copy_u8Data )
{
     ae4:	df 93       	push	r29
     ae6:	cf 93       	push	r28
     ae8:	00 d0       	rcall	.+0      	; 0xaea <UART_enuRecieveByte+0x6>
     aea:	0f 92       	push	r0
     aec:	cd b7       	in	r28, 0x3d	; 61
     aee:	de b7       	in	r29, 0x3e	; 62
     af0:	9b 83       	std	Y+3, r25	; 0x03
     af2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState  = ES_NOK ;
     af4:	19 82       	std	Y+1, r1	; 0x01

	if(  Copy_u8Data != NULL  )
     af6:	8a 81       	ldd	r24, Y+2	; 0x02
     af8:	9b 81       	ldd	r25, Y+3	; 0x03
     afa:	00 97       	sbiw	r24, 0x00	; 0
     afc:	71 f0       	breq	.+28     	; 0xb1a <UART_enuRecieveByte+0x36>
	{
		//There is NO Data to Read.
		while( !(( UCSRA>>RXC)&1) );
     afe:	eb e2       	ldi	r30, 0x2B	; 43
     b00:	f0 e0       	ldi	r31, 0x00	; 0
     b02:	80 81       	ld	r24, Z
     b04:	88 23       	and	r24, r24
     b06:	dc f7       	brge	.-10     	; 0xafe <UART_enuRecieveByte+0x1a>

		*Copy_u8Data = UDR ;
     b08:	ec e2       	ldi	r30, 0x2C	; 44
     b0a:	f0 e0       	ldi	r31, 0x00	; 0
     b0c:	80 81       	ld	r24, Z
     b0e:	ea 81       	ldd	r30, Y+2	; 0x02
     b10:	fb 81       	ldd	r31, Y+3	; 0x03
     b12:	80 83       	st	Z, r24

		Local_enuErrorState  = ES_OK ;
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	89 83       	std	Y+1, r24	; 0x01
     b18:	02 c0       	rjmp	.+4      	; 0xb1e <UART_enuRecieveByte+0x3a>
	}
	else
	{
		Local_enuErrorState  = ES_NULL_POINTER;
     b1a:	82 e0       	ldi	r24, 0x02	; 2
     b1c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState  ;
     b1e:	89 81       	ldd	r24, Y+1	; 0x01
}//End of UART_enuRecieveByte().
     b20:	0f 90       	pop	r0
     b22:	0f 90       	pop	r0
     b24:	0f 90       	pop	r0
     b26:	cf 91       	pop	r28
     b28:	df 91       	pop	r29
     b2a:	08 95       	ret

00000b2c <UART_enuSendString>:

//          UART_enuSendString( arr );

ES_t UART_enuSendString( const u8* Copy_pcData)
{
     b2c:	df 93       	push	r29
     b2e:	cf 93       	push	r28
     b30:	00 d0       	rcall	.+0      	; 0xb32 <UART_enuSendString+0x6>
     b32:	0f 92       	push	r0
     b34:	cd b7       	in	r28, 0x3d	; 61
     b36:	de b7       	in	r29, 0x3e	; 62
     b38:	9b 83       	std	Y+3, r25	; 0x03
     b3a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState  = ES_NOK ;
     b3c:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_pcData != NULL )
     b3e:	8a 81       	ldd	r24, Y+2	; 0x02
     b40:	9b 81       	ldd	r25, Y+3	; 0x03
     b42:	00 97       	sbiw	r24, 0x00	; 0
     b44:	01 f1       	breq	.+64     	; 0xb86 <UART_enuSendString+0x5a>
     b46:	17 c0       	rjmp	.+46     	; 0xb76 <UART_enuSendString+0x4a>
	{

		while( *Copy_pcData != '\0')
		{

			while( !((UCSRA>>UDRE)&1) );
     b48:	eb e2       	ldi	r30, 0x2B	; 43
     b4a:	f0 e0       	ldi	r31, 0x00	; 0
     b4c:	80 81       	ld	r24, Z
     b4e:	82 95       	swap	r24
     b50:	86 95       	lsr	r24
     b52:	87 70       	andi	r24, 0x07	; 7
     b54:	88 2f       	mov	r24, r24
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	81 70       	andi	r24, 0x01	; 1
     b5a:	90 70       	andi	r25, 0x00	; 0
     b5c:	00 97       	sbiw	r24, 0x00	; 0
     b5e:	a1 f3       	breq	.-24     	; 0xb48 <UART_enuSendString+0x1c>

			UDR = *Copy_pcData ;
     b60:	ac e2       	ldi	r26, 0x2C	; 44
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	ea 81       	ldd	r30, Y+2	; 0x02
     b66:	fb 81       	ldd	r31, Y+3	; 0x03
     b68:	80 81       	ld	r24, Z
     b6a:	8c 93       	st	X, r24

			Copy_pcData++ ;
     b6c:	8a 81       	ldd	r24, Y+2	; 0x02
     b6e:	9b 81       	ldd	r25, Y+3	; 0x03
     b70:	01 96       	adiw	r24, 0x01	; 1
     b72:	9b 83       	std	Y+3, r25	; 0x03
     b74:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState  = ES_NOK ;

	if( Copy_pcData != NULL )
	{

		while( *Copy_pcData != '\0')
     b76:	ea 81       	ldd	r30, Y+2	; 0x02
     b78:	fb 81       	ldd	r31, Y+3	; 0x03
     b7a:	80 81       	ld	r24, Z
     b7c:	88 23       	and	r24, r24
     b7e:	21 f7       	brne	.-56     	; 0xb48 <UART_enuSendString+0x1c>

			Copy_pcData++ ;

		}

		Local_enuErrorState  = ES_OK ;
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	89 83       	std	Y+1, r24	; 0x01
     b84:	02 c0       	rjmp	.+4      	; 0xb8a <UART_enuSendString+0x5e>
	}
	else
	{
		Local_enuErrorState  = ES_NULL_POINTER ;
     b86:	82 e0       	ldi	r24, 0x02	; 2
     b88:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState  ;
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
}//End of UART_enuRecieveByte().
     b8c:	0f 90       	pop	r0
     b8e:	0f 90       	pop	r0
     b90:	0f 90       	pop	r0
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <UART_enuReceiveString>:



ES_t UART_enuReceiveString(u8*  Copy_pcData)
{
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	00 d0       	rcall	.+0      	; 0xb9e <UART_enuReceiveString+0x6>
     b9e:	00 d0       	rcall	.+0      	; 0xba0 <UART_enuReceiveString+0x8>
     ba0:	00 d0       	rcall	.+0      	; 0xba2 <UART_enuReceiveString+0xa>
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
     ba6:	9e 83       	std	Y+6, r25	; 0x06
     ba8:	8d 83       	std	Y+5, r24	; 0x05
	ES_t Local_enuErrorState  = ES_NOK ;
     baa:	1c 82       	std	Y+4, r1	; 0x04

	if( Copy_pcData != 	NULL )
     bac:	8d 81       	ldd	r24, Y+5	; 0x05
     bae:	9e 81       	ldd	r25, Y+6	; 0x06
     bb0:	00 97       	sbiw	r24, 0x00	; 0
     bb2:	91 f1       	breq	.+100    	; 0xc18 <UART_enuReceiveString+0x80>
	{
		u8 Local_u8Data  = 0  ;
     bb4:	1b 82       	std	Y+3, r1	; 0x03

		u8 Local_u8Index = 0  ;
     bb6:	1a 82       	std	Y+2, r1	; 0x02

		while( !((UCSRA>>RXC)&1) );
     bb8:	eb e2       	ldi	r30, 0x2B	; 43
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	88 23       	and	r24, r24
     bc0:	dc f7       	brge	.-10     	; 0xbb8 <UART_enuReceiveString+0x20>

		u8 Local_u8Terminator = UDR ;
     bc2:	ec e2       	ldi	r30, 0x2C	; 44
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	89 83       	std	Y+1, r24	; 0x01

		while(1)
		{
			while( !((UCSRA>>RXC)&1) );
     bca:	eb e2       	ldi	r30, 0x2B	; 43
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	88 23       	and	r24, r24
     bd2:	dc f7       	brge	.-10     	; 0xbca <UART_enuReceiveString+0x32>

			Local_u8Data = UDR ;
     bd4:	ec e2       	ldi	r30, 0x2C	; 44
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	8b 83       	std	Y+3, r24	; 0x03

			if(Local_u8Data == Local_u8Terminator )
     bdc:	9b 81       	ldd	r25, Y+3	; 0x03
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	98 17       	cp	r25, r24
     be2:	61 f4       	brne	.+24     	; 0xbfc <UART_enuReceiveString+0x64>
			{
				Copy_pcData[Local_u8Index] = '\0' ;
     be4:	8a 81       	ldd	r24, Y+2	; 0x02
     be6:	28 2f       	mov	r18, r24
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	8d 81       	ldd	r24, Y+5	; 0x05
     bec:	9e 81       	ldd	r25, Y+6	; 0x06
     bee:	fc 01       	movw	r30, r24
     bf0:	e2 0f       	add	r30, r18
     bf2:	f3 1f       	adc	r31, r19
     bf4:	10 82       	st	Z, r1
				Local_u8Index++ ;
			}

		}

		Local_enuErrorState = ES_OK ;
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	8c 83       	std	Y+4, r24	; 0x04
     bfa:	10 c0       	rjmp	.+32     	; 0xc1c <UART_enuReceiveString+0x84>

				break;
			}
			else
			{
				Copy_pcData[Local_u8Index] = Local_u8Data ;
     bfc:	8a 81       	ldd	r24, Y+2	; 0x02
     bfe:	28 2f       	mov	r18, r24
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	8d 81       	ldd	r24, Y+5	; 0x05
     c04:	9e 81       	ldd	r25, Y+6	; 0x06
     c06:	fc 01       	movw	r30, r24
     c08:	e2 0f       	add	r30, r18
     c0a:	f3 1f       	adc	r31, r19
     c0c:	8b 81       	ldd	r24, Y+3	; 0x03
     c0e:	80 83       	st	Z, r24

				Local_u8Index++ ;
     c10:	8a 81       	ldd	r24, Y+2	; 0x02
     c12:	8f 5f       	subi	r24, 0xFF	; 255
     c14:	8a 83       	std	Y+2, r24	; 0x02
     c16:	d9 cf       	rjmp	.-78     	; 0xbca <UART_enuReceiveString+0x32>

		Local_enuErrorState = ES_OK ;
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER ;
     c18:	82 e0       	ldi	r24, 0x02	; 2
     c1a:	8c 83       	std	Y+4, r24	; 0x04
	}

	return Local_enuErrorState  ;
     c1c:	8c 81       	ldd	r24, Y+4	; 0x04
}//End of UART_enuRecieveByte().
     c1e:	26 96       	adiw	r28, 0x06	; 6
     c20:	0f b6       	in	r0, 0x3f	; 63
     c22:	f8 94       	cli
     c24:	de bf       	out	0x3e, r29	; 62
     c26:	0f be       	out	0x3f, r0	; 63
     c28:	cd bf       	out	0x3d, r28	; 61
     c2a:	cf 91       	pop	r28
     c2c:	df 91       	pop	r29
     c2e:	08 95       	ret

00000c30 <DIO_enuSetPortDirection>:
/*                 : Arg.2: Copy_u8Dir:                                     */
/*                                        DIO_INPTU_PIN  ,   DIO_OUTPUT_PIN */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Dir)
{
     c30:	df 93       	push	r29
     c32:	cf 93       	push	r28
     c34:	00 d0       	rcall	.+0      	; 0xc36 <DIO_enuSetPortDirection+0x6>
     c36:	00 d0       	rcall	.+0      	; 0xc38 <DIO_enuSetPortDirection+0x8>
     c38:	0f 92       	push	r0
     c3a:	cd b7       	in	r28, 0x3d	; 61
     c3c:	de b7       	in	r29, 0x3e	; 62
     c3e:	8a 83       	std	Y+2, r24	; 0x02
     c40:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuerrorState = ES_NOK ;
     c42:	19 82       	std	Y+1, r1	; 0x01

	if( (Copy_u8PortID <= DIO_PORTD )&& (Copy_u8Dir <= OUTPUT_PORT)  )
     c44:	8a 81       	ldd	r24, Y+2	; 0x02
     c46:	84 30       	cpi	r24, 0x04	; 4
     c48:	a8 f5       	brcc	.+106    	; 0xcb4 <DIO_enuSetPortDirection+0x84>
	{
		switch( Copy_u8PortID )
     c4a:	8a 81       	ldd	r24, Y+2	; 0x02
     c4c:	28 2f       	mov	r18, r24
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	3d 83       	std	Y+5, r19	; 0x05
     c52:	2c 83       	std	Y+4, r18	; 0x04
     c54:	8c 81       	ldd	r24, Y+4	; 0x04
     c56:	9d 81       	ldd	r25, Y+5	; 0x05
     c58:	81 30       	cpi	r24, 0x01	; 1
     c5a:	91 05       	cpc	r25, r1
     c5c:	d1 f0       	breq	.+52     	; 0xc92 <DIO_enuSetPortDirection+0x62>
     c5e:	2c 81       	ldd	r18, Y+4	; 0x04
     c60:	3d 81       	ldd	r19, Y+5	; 0x05
     c62:	22 30       	cpi	r18, 0x02	; 2
     c64:	31 05       	cpc	r19, r1
     c66:	2c f4       	brge	.+10     	; 0xc72 <DIO_enuSetPortDirection+0x42>
     c68:	8c 81       	ldd	r24, Y+4	; 0x04
     c6a:	9d 81       	ldd	r25, Y+5	; 0x05
     c6c:	00 97       	sbiw	r24, 0x00	; 0
     c6e:	61 f0       	breq	.+24     	; 0xc88 <DIO_enuSetPortDirection+0x58>
     c70:	1e c0       	rjmp	.+60     	; 0xcae <DIO_enuSetPortDirection+0x7e>
     c72:	2c 81       	ldd	r18, Y+4	; 0x04
     c74:	3d 81       	ldd	r19, Y+5	; 0x05
     c76:	22 30       	cpi	r18, 0x02	; 2
     c78:	31 05       	cpc	r19, r1
     c7a:	81 f0       	breq	.+32     	; 0xc9c <DIO_enuSetPortDirection+0x6c>
     c7c:	8c 81       	ldd	r24, Y+4	; 0x04
     c7e:	9d 81       	ldd	r25, Y+5	; 0x05
     c80:	83 30       	cpi	r24, 0x03	; 3
     c82:	91 05       	cpc	r25, r1
     c84:	81 f0       	breq	.+32     	; 0xca6 <DIO_enuSetPortDirection+0x76>
     c86:	13 c0       	rjmp	.+38     	; 0xcae <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA :
			DDRA = Copy_u8Dir;
     c88:	ea e3       	ldi	r30, 0x3A	; 58
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	8b 81       	ldd	r24, Y+3	; 0x03
     c8e:	80 83       	st	Z, r24
     c90:	0e c0       	rjmp	.+28     	; 0xcae <DIO_enuSetPortDirection+0x7e>
			break;

		case DIO_PORTB :
			DDRB = Copy_u8Dir;
     c92:	e7 e3       	ldi	r30, 0x37	; 55
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	8b 81       	ldd	r24, Y+3	; 0x03
     c98:	80 83       	st	Z, r24
     c9a:	09 c0       	rjmp	.+18     	; 0xcae <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC :
			DDRC = Copy_u8Dir;
     c9c:	e4 e3       	ldi	r30, 0x34	; 52
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	8b 81       	ldd	r24, Y+3	; 0x03
     ca2:	80 83       	st	Z, r24
     ca4:	04 c0       	rjmp	.+8      	; 0xcae <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD :
			DDRD = Copy_u8Dir;
     ca6:	e1 e3       	ldi	r30, 0x31	; 49
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	8b 81       	ldd	r24, Y+3	; 0x03
     cac:	80 83       	st	Z, r24
			break;
		}
		Local_enuerrorState = ES_OK;
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	89 83       	std	Y+1, r24	; 0x01
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <DIO_enuSetPortDirection+0x88>

	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
     cb4:	83 e0       	ldi	r24, 0x03	; 3
     cb6:	89 83       	std	Y+1, r24	; 0x01

	}


	return Local_enuerrorState  ;
     cb8:	89 81       	ldd	r24, Y+1	; 0x01

}//End of DIO_enuSetPortDirection().
     cba:	0f 90       	pop	r0
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	cf 91       	pop	r28
     cc6:	df 91       	pop	r29
     cc8:	08 95       	ret

00000cca <DIO_enuSetPortValue>:
/*                 : Arg.2: Copy_u8Val:                                     */
/*                                        DIO_INPTU_PIN  ,  DIO_OUTPUT_PIN  */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuSetPortValue(u8 Copy_u8PortID, u8 Copy_u8Val)
{
     cca:	df 93       	push	r29
     ccc:	cf 93       	push	r28
     cce:	00 d0       	rcall	.+0      	; 0xcd0 <DIO_enuSetPortValue+0x6>
     cd0:	00 d0       	rcall	.+0      	; 0xcd2 <DIO_enuSetPortValue+0x8>
     cd2:	0f 92       	push	r0
     cd4:	cd b7       	in	r28, 0x3d	; 61
     cd6:	de b7       	in	r29, 0x3e	; 62
     cd8:	8a 83       	std	Y+2, r24	; 0x02
     cda:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuerrorState = ES_NOK ;
     cdc:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8PortID <= DIO_PORTD )
     cde:	8a 81       	ldd	r24, Y+2	; 0x02
     ce0:	84 30       	cpi	r24, 0x04	; 4
     ce2:	a8 f5       	brcc	.+106    	; 0xd4e <DIO_enuSetPortValue+0x84>
	{
		switch( Copy_u8PortID )
     ce4:	8a 81       	ldd	r24, Y+2	; 0x02
     ce6:	28 2f       	mov	r18, r24
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	3d 83       	std	Y+5, r19	; 0x05
     cec:	2c 83       	std	Y+4, r18	; 0x04
     cee:	8c 81       	ldd	r24, Y+4	; 0x04
     cf0:	9d 81       	ldd	r25, Y+5	; 0x05
     cf2:	81 30       	cpi	r24, 0x01	; 1
     cf4:	91 05       	cpc	r25, r1
     cf6:	d1 f0       	breq	.+52     	; 0xd2c <DIO_enuSetPortValue+0x62>
     cf8:	2c 81       	ldd	r18, Y+4	; 0x04
     cfa:	3d 81       	ldd	r19, Y+5	; 0x05
     cfc:	22 30       	cpi	r18, 0x02	; 2
     cfe:	31 05       	cpc	r19, r1
     d00:	2c f4       	brge	.+10     	; 0xd0c <DIO_enuSetPortValue+0x42>
     d02:	8c 81       	ldd	r24, Y+4	; 0x04
     d04:	9d 81       	ldd	r25, Y+5	; 0x05
     d06:	00 97       	sbiw	r24, 0x00	; 0
     d08:	61 f0       	breq	.+24     	; 0xd22 <DIO_enuSetPortValue+0x58>
     d0a:	1e c0       	rjmp	.+60     	; 0xd48 <DIO_enuSetPortValue+0x7e>
     d0c:	2c 81       	ldd	r18, Y+4	; 0x04
     d0e:	3d 81       	ldd	r19, Y+5	; 0x05
     d10:	22 30       	cpi	r18, 0x02	; 2
     d12:	31 05       	cpc	r19, r1
     d14:	81 f0       	breq	.+32     	; 0xd36 <DIO_enuSetPortValue+0x6c>
     d16:	8c 81       	ldd	r24, Y+4	; 0x04
     d18:	9d 81       	ldd	r25, Y+5	; 0x05
     d1a:	83 30       	cpi	r24, 0x03	; 3
     d1c:	91 05       	cpc	r25, r1
     d1e:	81 f0       	breq	.+32     	; 0xd40 <DIO_enuSetPortValue+0x76>
     d20:	13 c0       	rjmp	.+38     	; 0xd48 <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA :
			PORTA = Copy_u8Val;
     d22:	eb e3       	ldi	r30, 0x3B	; 59
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	8b 81       	ldd	r24, Y+3	; 0x03
     d28:	80 83       	st	Z, r24
     d2a:	0e c0       	rjmp	.+28     	; 0xd48 <DIO_enuSetPortValue+0x7e>
			break;

		case DIO_PORTB :
			PORTB = Copy_u8Val;
     d2c:	e8 e3       	ldi	r30, 0x38	; 56
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	8b 81       	ldd	r24, Y+3	; 0x03
     d32:	80 83       	st	Z, r24
     d34:	09 c0       	rjmp	.+18     	; 0xd48 <DIO_enuSetPortValue+0x7e>
			break;

		case DIO_PORTC :
			PORTC = Copy_u8Val;
     d36:	e5 e3       	ldi	r30, 0x35	; 53
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	8b 81       	ldd	r24, Y+3	; 0x03
     d3c:	80 83       	st	Z, r24
     d3e:	04 c0       	rjmp	.+8      	; 0xd48 <DIO_enuSetPortValue+0x7e>
			break;

		case DIO_PORTD :
			PORTD = Copy_u8Val;
     d40:	e2 e3       	ldi	r30, 0x32	; 50
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	8b 81       	ldd	r24, Y+3	; 0x03
     d46:	80 83       	st	Z, r24
			break;
		}

		Local_enuerrorState = ES_OK;
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	89 83       	std	Y+1, r24	; 0x01
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <DIO_enuSetPortValue+0x88>

	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
     d4e:	83 e0       	ldi	r24, 0x03	; 3
     d50:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuerrorState  ;
     d52:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuSetPortValue().
     d54:	0f 90       	pop	r0
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
     d5c:	0f 90       	pop	r0
     d5e:	cf 91       	pop	r28
     d60:	df 91       	pop	r29
     d62:	08 95       	ret

00000d64 <DIO_enuToggelPort>:
/*                                        DIO_PORTA      ,   DIO_PORTA      */
/*                                        DIO_PORTA      ,   DIO_PORTA      */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuToggelPort(u8  Copy_u8PortID )
{
     d64:	df 93       	push	r29
     d66:	cf 93       	push	r28
     d68:	00 d0       	rcall	.+0      	; 0xd6a <DIO_enuToggelPort+0x6>
     d6a:	00 d0       	rcall	.+0      	; 0xd6c <DIO_enuToggelPort+0x8>
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
     d70:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuerrorState = ES_NOK ;
     d72:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8PortID <= DIO_PORTD )
     d74:	8a 81       	ldd	r24, Y+2	; 0x02
     d76:	84 30       	cpi	r24, 0x04	; 4
     d78:	08 f0       	brcs	.+2      	; 0xd7c <DIO_enuToggelPort+0x18>
     d7a:	41 c0       	rjmp	.+130    	; 0xdfe <DIO_enuToggelPort+0x9a>
	{
		switch( Copy_u8PortID )
     d7c:	8a 81       	ldd	r24, Y+2	; 0x02
     d7e:	28 2f       	mov	r18, r24
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	3c 83       	std	Y+4, r19	; 0x04
     d84:	2b 83       	std	Y+3, r18	; 0x03
     d86:	8b 81       	ldd	r24, Y+3	; 0x03
     d88:	9c 81       	ldd	r25, Y+4	; 0x04
     d8a:	81 30       	cpi	r24, 0x01	; 1
     d8c:	91 05       	cpc	r25, r1
     d8e:	e9 f0       	breq	.+58     	; 0xdca <DIO_enuToggelPort+0x66>
     d90:	2b 81       	ldd	r18, Y+3	; 0x03
     d92:	3c 81       	ldd	r19, Y+4	; 0x04
     d94:	22 30       	cpi	r18, 0x02	; 2
     d96:	31 05       	cpc	r19, r1
     d98:	2c f4       	brge	.+10     	; 0xda4 <DIO_enuToggelPort+0x40>
     d9a:	8b 81       	ldd	r24, Y+3	; 0x03
     d9c:	9c 81       	ldd	r25, Y+4	; 0x04
     d9e:	00 97       	sbiw	r24, 0x00	; 0
     da0:	61 f0       	breq	.+24     	; 0xdba <DIO_enuToggelPort+0x56>
     da2:	2a c0       	rjmp	.+84     	; 0xdf8 <DIO_enuToggelPort+0x94>
     da4:	2b 81       	ldd	r18, Y+3	; 0x03
     da6:	3c 81       	ldd	r19, Y+4	; 0x04
     da8:	22 30       	cpi	r18, 0x02	; 2
     daa:	31 05       	cpc	r19, r1
     dac:	b1 f0       	breq	.+44     	; 0xdda <DIO_enuToggelPort+0x76>
     dae:	8b 81       	ldd	r24, Y+3	; 0x03
     db0:	9c 81       	ldd	r25, Y+4	; 0x04
     db2:	83 30       	cpi	r24, 0x03	; 3
     db4:	91 05       	cpc	r25, r1
     db6:	c9 f0       	breq	.+50     	; 0xdea <DIO_enuToggelPort+0x86>
     db8:	1f c0       	rjmp	.+62     	; 0xdf8 <DIO_enuToggelPort+0x94>
		{
		case DIO_PORTA :
			PORTA = ~PORTA;
     dba:	ab e3       	ldi	r26, 0x3B	; 59
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	eb e3       	ldi	r30, 0x3B	; 59
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	80 95       	com	r24
     dc6:	8c 93       	st	X, r24
     dc8:	17 c0       	rjmp	.+46     	; 0xdf8 <DIO_enuToggelPort+0x94>
			break;

		case DIO_PORTB :
			PORTB = ~PORTB;
     dca:	a8 e3       	ldi	r26, 0x38	; 56
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	e8 e3       	ldi	r30, 0x38	; 56
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	80 95       	com	r24
     dd6:	8c 93       	st	X, r24
     dd8:	0f c0       	rjmp	.+30     	; 0xdf8 <DIO_enuToggelPort+0x94>
			break;

		case DIO_PORTC :
			PORTC = ~PORTC;
     dda:	a5 e3       	ldi	r26, 0x35	; 53
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	e5 e3       	ldi	r30, 0x35	; 53
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	80 95       	com	r24
     de6:	8c 93       	st	X, r24
     de8:	07 c0       	rjmp	.+14     	; 0xdf8 <DIO_enuToggelPort+0x94>
			break;

		case DIO_PORTD :
			PORTD = ~PORTD ;
     dea:	a2 e3       	ldi	r26, 0x32	; 50
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e2 e3       	ldi	r30, 0x32	; 50
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	80 95       	com	r24
     df6:	8c 93       	st	X, r24
			break;
		}

		Local_enuerrorState = ES_OK;
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	89 83       	std	Y+1, r24	; 0x01
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <DIO_enuToggelPort+0x9e>

	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
     dfe:	83 e0       	ldi	r24, 0x03	; 3
     e00:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuerrorState  ;
     e02:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuToggelPort().
     e04:	0f 90       	pop	r0
     e06:	0f 90       	pop	r0
     e08:	0f 90       	pop	r0
     e0a:	0f 90       	pop	r0
     e0c:	cf 91       	pop	r28
     e0e:	df 91       	pop	r29
     e10:	08 95       	ret

00000e12 <DIO_enuGetPortVlaue>:
/*                                                                          */
/*                 : Arg.2: Address of u8 variable.                         */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuGetPortVlaue(u8 Copy_u8PortID, u8* Copy_pu8PortVal)
{
     e12:	df 93       	push	r29
     e14:	cf 93       	push	r28
     e16:	00 d0       	rcall	.+0      	; 0xe18 <DIO_enuGetPortVlaue+0x6>
     e18:	00 d0       	rcall	.+0      	; 0xe1a <DIO_enuGetPortVlaue+0x8>
     e1a:	00 d0       	rcall	.+0      	; 0xe1c <DIO_enuGetPortVlaue+0xa>
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
     e20:	8a 83       	std	Y+2, r24	; 0x02
     e22:	7c 83       	std	Y+4, r23	; 0x04
     e24:	6b 83       	std	Y+3, r22	; 0x03
	//Local Variable to
	ES_t Local_enuerrorState = ES_NOK ;
     e26:	19 82       	std	Y+1, r1	; 0x01

	// Check to ensure that the passed address is not equal Null.
	if( Copy_pu8PortVal != NULL )
     e28:	8b 81       	ldd	r24, Y+3	; 0x03
     e2a:	9c 81       	ldd	r25, Y+4	; 0x04
     e2c:	00 97       	sbiw	r24, 0x00	; 0
     e2e:	09 f4       	brne	.+2      	; 0xe32 <DIO_enuGetPortVlaue+0x20>
     e30:	43 c0       	rjmp	.+134    	; 0xeb8 <DIO_enuGetPortVlaue+0xa6>
	{
		// Check to ensure that the passed PortID is in range.
		if( Copy_u8PortID <= DIO_PORTD )
     e32:	8a 81       	ldd	r24, Y+2	; 0x02
     e34:	84 30       	cpi	r24, 0x04	; 4
     e36:	e8 f5       	brcc	.+122    	; 0xeb2 <DIO_enuGetPortVlaue+0xa0>
		{

			/**********************************************************
			 * Switching for the suitable case .
			 **********************************************************/
			switch( Copy_u8PortID )
     e38:	8a 81       	ldd	r24, Y+2	; 0x02
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	3e 83       	std	Y+6, r19	; 0x06
     e40:	2d 83       	std	Y+5, r18	; 0x05
     e42:	8d 81       	ldd	r24, Y+5	; 0x05
     e44:	9e 81       	ldd	r25, Y+6	; 0x06
     e46:	81 30       	cpi	r24, 0x01	; 1
     e48:	91 05       	cpc	r25, r1
     e4a:	e1 f0       	breq	.+56     	; 0xe84 <DIO_enuGetPortVlaue+0x72>
     e4c:	2d 81       	ldd	r18, Y+5	; 0x05
     e4e:	3e 81       	ldd	r19, Y+6	; 0x06
     e50:	22 30       	cpi	r18, 0x02	; 2
     e52:	31 05       	cpc	r19, r1
     e54:	2c f4       	brge	.+10     	; 0xe60 <DIO_enuGetPortVlaue+0x4e>
     e56:	8d 81       	ldd	r24, Y+5	; 0x05
     e58:	9e 81       	ldd	r25, Y+6	; 0x06
     e5a:	00 97       	sbiw	r24, 0x00	; 0
     e5c:	61 f0       	breq	.+24     	; 0xe76 <DIO_enuGetPortVlaue+0x64>
     e5e:	26 c0       	rjmp	.+76     	; 0xeac <DIO_enuGetPortVlaue+0x9a>
     e60:	2d 81       	ldd	r18, Y+5	; 0x05
     e62:	3e 81       	ldd	r19, Y+6	; 0x06
     e64:	22 30       	cpi	r18, 0x02	; 2
     e66:	31 05       	cpc	r19, r1
     e68:	a1 f0       	breq	.+40     	; 0xe92 <DIO_enuGetPortVlaue+0x80>
     e6a:	8d 81       	ldd	r24, Y+5	; 0x05
     e6c:	9e 81       	ldd	r25, Y+6	; 0x06
     e6e:	83 30       	cpi	r24, 0x03	; 3
     e70:	91 05       	cpc	r25, r1
     e72:	b1 f0       	breq	.+44     	; 0xea0 <DIO_enuGetPortVlaue+0x8e>
     e74:	1b c0       	rjmp	.+54     	; 0xeac <DIO_enuGetPortVlaue+0x9a>
			{
			case DIO_PORTA :
				*Copy_pu8PortVal = PINA;
     e76:	e9 e3       	ldi	r30, 0x39	; 57
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	eb 81       	ldd	r30, Y+3	; 0x03
     e7e:	fc 81       	ldd	r31, Y+4	; 0x04
     e80:	80 83       	st	Z, r24
     e82:	14 c0       	rjmp	.+40     	; 0xeac <DIO_enuGetPortVlaue+0x9a>
				break;

			case DIO_PORTB :
				*Copy_pu8PortVal = PINB;
     e84:	e6 e3       	ldi	r30, 0x36	; 54
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	eb 81       	ldd	r30, Y+3	; 0x03
     e8c:	fc 81       	ldd	r31, Y+4	; 0x04
     e8e:	80 83       	st	Z, r24
     e90:	0d c0       	rjmp	.+26     	; 0xeac <DIO_enuGetPortVlaue+0x9a>
				break;

			case DIO_PORTC :
				*Copy_pu8PortVal = PINC;
     e92:	e3 e3       	ldi	r30, 0x33	; 51
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	eb 81       	ldd	r30, Y+3	; 0x03
     e9a:	fc 81       	ldd	r31, Y+4	; 0x04
     e9c:	80 83       	st	Z, r24
     e9e:	06 c0       	rjmp	.+12     	; 0xeac <DIO_enuGetPortVlaue+0x9a>
				break;

			case DIO_PORTD :
				*Copy_pu8PortVal = PIND ;
     ea0:	e0 e3       	ldi	r30, 0x30	; 48
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	eb 81       	ldd	r30, Y+3	; 0x03
     ea8:	fc 81       	ldd	r31, Y+4	; 0x04
     eaa:	80 83       	st	Z, r24
				break;
			}

			Local_enuerrorState = ES_OK;
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	89 83       	std	Y+1, r24	; 0x01
     eb0:	05 c0       	rjmp	.+10     	; 0xebc <DIO_enuGetPortVlaue+0xaa>
		else
		{
			/**********************************************************
			 * Handle Out Of Range case.
			 **********************************************************/
			Local_enuerrorState = ES_OUT_OF_RANGE;
     eb2:	83 e0       	ldi	r24, 0x03	; 3
     eb4:	89 83       	std	Y+1, r24	; 0x01
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <DIO_enuGetPortVlaue+0xaa>
	else
	{
		/**********************************************************
		 * Handle null pointer case.
		 **********************************************************/
		Local_enuerrorState = ES_NULL_POINTER;
     eb8:	82 e0       	ldi	r24, 0x02	; 2
     eba:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuerrorState  ;
     ebc:	89 81       	ldd	r24, Y+1	; 0x01

}//End of DIO_enuGetPortVlaue().
     ebe:	26 96       	adiw	r28, 0x06	; 6
     ec0:	0f b6       	in	r0, 0x3f	; 63
     ec2:	f8 94       	cli
     ec4:	de bf       	out	0x3e, r29	; 62
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	cd bf       	out	0x3d, r28	; 61
     eca:	cf 91       	pop	r28
     ecc:	df 91       	pop	r29
     ece:	08 95       	ret

00000ed0 <DIO_enuSetPinDirection>:
/*                 : Arg.3: Copy_u8Dir.                                     */
/*                                       DIO_INPTU_PIN   ,   DIO_OUTPUT_PIN */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID, u8 Copy_u8PinID , u8 Copy_u8Dir)
{
     ed0:	df 93       	push	r29
     ed2:	cf 93       	push	r28
     ed4:	00 d0       	rcall	.+0      	; 0xed6 <DIO_enuSetPinDirection+0x6>
     ed6:	00 d0       	rcall	.+0      	; 0xed8 <DIO_enuSetPinDirection+0x8>
     ed8:	00 d0       	rcall	.+0      	; 0xeda <DIO_enuSetPinDirection+0xa>
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
     ede:	8a 83       	std	Y+2, r24	; 0x02
     ee0:	6b 83       	std	Y+3, r22	; 0x03
     ee2:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuerrorState = ES_NOK ;
     ee4:	19 82       	std	Y+1, r1	; 0x01

	if( (Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <= DIO_PIN7) &&( Copy_u8Dir<= OUTPUT_PIN))
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
     ee8:	84 30       	cpi	r24, 0x04	; 4
     eea:	08 f0       	brcs	.+2      	; 0xeee <DIO_enuSetPinDirection+0x1e>
     eec:	dc c0       	rjmp	.+440    	; 0x10a6 <DIO_enuSetPinDirection+0x1d6>
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	88 30       	cpi	r24, 0x08	; 8
     ef2:	08 f0       	brcs	.+2      	; 0xef6 <DIO_enuSetPinDirection+0x26>
     ef4:	d8 c0       	rjmp	.+432    	; 0x10a6 <DIO_enuSetPinDirection+0x1d6>
     ef6:	8c 81       	ldd	r24, Y+4	; 0x04
     ef8:	82 30       	cpi	r24, 0x02	; 2
     efa:	08 f0       	brcs	.+2      	; 0xefe <DIO_enuSetPinDirection+0x2e>
     efc:	d4 c0       	rjmp	.+424    	; 0x10a6 <DIO_enuSetPinDirection+0x1d6>
	{

		/**********************************************************
		 * Switching for the suitable case .
		 **********************************************************/
		switch( Copy_u8PortID )
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	28 2f       	mov	r18, r24
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	3e 83       	std	Y+6, r19	; 0x06
     f06:	2d 83       	std	Y+5, r18	; 0x05
     f08:	8d 81       	ldd	r24, Y+5	; 0x05
     f0a:	9e 81       	ldd	r25, Y+6	; 0x06
     f0c:	81 30       	cpi	r24, 0x01	; 1
     f0e:	91 05       	cpc	r25, r1
     f10:	09 f4       	brne	.+2      	; 0xf14 <DIO_enuSetPinDirection+0x44>
     f12:	43 c0       	rjmp	.+134    	; 0xf9a <DIO_enuSetPinDirection+0xca>
     f14:	2d 81       	ldd	r18, Y+5	; 0x05
     f16:	3e 81       	ldd	r19, Y+6	; 0x06
     f18:	22 30       	cpi	r18, 0x02	; 2
     f1a:	31 05       	cpc	r19, r1
     f1c:	2c f4       	brge	.+10     	; 0xf28 <DIO_enuSetPinDirection+0x58>
     f1e:	8d 81       	ldd	r24, Y+5	; 0x05
     f20:	9e 81       	ldd	r25, Y+6	; 0x06
     f22:	00 97       	sbiw	r24, 0x00	; 0
     f24:	71 f0       	breq	.+28     	; 0xf42 <DIO_enuSetPinDirection+0x72>
     f26:	bc c0       	rjmp	.+376    	; 0x10a0 <DIO_enuSetPinDirection+0x1d0>
     f28:	2d 81       	ldd	r18, Y+5	; 0x05
     f2a:	3e 81       	ldd	r19, Y+6	; 0x06
     f2c:	22 30       	cpi	r18, 0x02	; 2
     f2e:	31 05       	cpc	r19, r1
     f30:	09 f4       	brne	.+2      	; 0xf34 <DIO_enuSetPinDirection+0x64>
     f32:	5f c0       	rjmp	.+190    	; 0xff2 <DIO_enuSetPinDirection+0x122>
     f34:	8d 81       	ldd	r24, Y+5	; 0x05
     f36:	9e 81       	ldd	r25, Y+6	; 0x06
     f38:	83 30       	cpi	r24, 0x03	; 3
     f3a:	91 05       	cpc	r25, r1
     f3c:	09 f4       	brne	.+2      	; 0xf40 <DIO_enuSetPinDirection+0x70>
     f3e:	85 c0       	rjmp	.+266    	; 0x104a <DIO_enuSetPinDirection+0x17a>
     f40:	af c0       	rjmp	.+350    	; 0x10a0 <DIO_enuSetPinDirection+0x1d0>
		{
		case DIO_PORTA :
			if( Copy_u8Dir == INPTU_PIN)
     f42:	8c 81       	ldd	r24, Y+4	; 0x04
     f44:	88 23       	and	r24, r24
     f46:	a9 f4       	brne	.+42     	; 0xf72 <DIO_enuSetPinDirection+0xa2>
			{
				DDRA &=~(DIO_MASK_BIT<<Copy_u8PinID);
     f48:	aa e3       	ldi	r26, 0x3A	; 58
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	ea e3       	ldi	r30, 0x3A	; 58
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	48 2f       	mov	r20, r24
     f54:	8b 81       	ldd	r24, Y+3	; 0x03
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	02 2e       	mov	r0, r18
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <DIO_enuSetPinDirection+0x96>
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	0a 94       	dec	r0
     f68:	e2 f7       	brpl	.-8      	; 0xf62 <DIO_enuSetPinDirection+0x92>
     f6a:	80 95       	com	r24
     f6c:	84 23       	and	r24, r20
     f6e:	8c 93       	st	X, r24
     f70:	97 c0       	rjmp	.+302    	; 0x10a0 <DIO_enuSetPinDirection+0x1d0>
			}
			else
			{
				DDRA |=(DIO_MASK_BIT<<Copy_u8PinID);
     f72:	aa e3       	ldi	r26, 0x3A	; 58
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	ea e3       	ldi	r30, 0x3A	; 58
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	48 2f       	mov	r20, r24
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	02 2e       	mov	r0, r18
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <DIO_enuSetPinDirection+0xc0>
     f8c:	88 0f       	add	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	0a 94       	dec	r0
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <DIO_enuSetPinDirection+0xbc>
     f94:	84 2b       	or	r24, r20
     f96:	8c 93       	st	X, r24
     f98:	83 c0       	rjmp	.+262    	; 0x10a0 <DIO_enuSetPinDirection+0x1d0>
			}

			break;

		case DIO_PORTB :
			if( Copy_u8Dir == INPTU_PIN)
     f9a:	8c 81       	ldd	r24, Y+4	; 0x04
     f9c:	88 23       	and	r24, r24
     f9e:	a9 f4       	brne	.+42     	; 0xfca <DIO_enuSetPinDirection+0xfa>
			{
				DDRB &=~(DIO_MASK_BIT<<Copy_u8PinID);
     fa0:	a7 e3       	ldi	r26, 0x37	; 55
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e7 e3       	ldi	r30, 0x37	; 55
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	48 2f       	mov	r20, r24
     fac:	8b 81       	ldd	r24, Y+3	; 0x03
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	02 2e       	mov	r0, r18
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <DIO_enuSetPinDirection+0xee>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	0a 94       	dec	r0
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <DIO_enuSetPinDirection+0xea>
     fc2:	80 95       	com	r24
     fc4:	84 23       	and	r24, r20
     fc6:	8c 93       	st	X, r24
     fc8:	6b c0       	rjmp	.+214    	; 0x10a0 <DIO_enuSetPinDirection+0x1d0>
			}
			else
			{
				DDRB |=(DIO_MASK_BIT<<Copy_u8PinID);
     fca:	a7 e3       	ldi	r26, 0x37	; 55
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e7 e3       	ldi	r30, 0x37	; 55
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	48 2f       	mov	r20, r24
     fd6:	8b 81       	ldd	r24, Y+3	; 0x03
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	02 2e       	mov	r0, r18
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <DIO_enuSetPinDirection+0x118>
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	0a 94       	dec	r0
     fea:	e2 f7       	brpl	.-8      	; 0xfe4 <DIO_enuSetPinDirection+0x114>
     fec:	84 2b       	or	r24, r20
     fee:	8c 93       	st	X, r24
     ff0:	57 c0       	rjmp	.+174    	; 0x10a0 <DIO_enuSetPinDirection+0x1d0>
			}
			break;

		case DIO_PORTC :

			if( Copy_u8Dir == INPTU_PIN)
     ff2:	8c 81       	ldd	r24, Y+4	; 0x04
     ff4:	88 23       	and	r24, r24
     ff6:	a9 f4       	brne	.+42     	; 0x1022 <DIO_enuSetPinDirection+0x152>
			{
				DDRC &=~(DIO_MASK_BIT<<Copy_u8PinID);
     ff8:	a4 e3       	ldi	r26, 0x34	; 52
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e4 e3       	ldi	r30, 0x34	; 52
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	48 2f       	mov	r20, r24
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	02 2e       	mov	r0, r18
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <DIO_enuSetPinDirection+0x146>
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	0a 94       	dec	r0
    1018:	e2 f7       	brpl	.-8      	; 0x1012 <DIO_enuSetPinDirection+0x142>
    101a:	80 95       	com	r24
    101c:	84 23       	and	r24, r20
    101e:	8c 93       	st	X, r24
    1020:	3f c0       	rjmp	.+126    	; 0x10a0 <DIO_enuSetPinDirection+0x1d0>
			}
			else
			{
				DDRC |=(DIO_MASK_BIT<<Copy_u8PinID);
    1022:	a4 e3       	ldi	r26, 0x34	; 52
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e4 e3       	ldi	r30, 0x34	; 52
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	48 2f       	mov	r20, r24
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	02 2e       	mov	r0, r18
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <DIO_enuSetPinDirection+0x170>
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	0a 94       	dec	r0
    1042:	e2 f7       	brpl	.-8      	; 0x103c <DIO_enuSetPinDirection+0x16c>
    1044:	84 2b       	or	r24, r20
    1046:	8c 93       	st	X, r24
    1048:	2b c0       	rjmp	.+86     	; 0x10a0 <DIO_enuSetPinDirection+0x1d0>
			}
			break;

		case DIO_PORTD :
			if( Copy_u8Dir == INPTU_PIN)
    104a:	8c 81       	ldd	r24, Y+4	; 0x04
    104c:	88 23       	and	r24, r24
    104e:	a9 f4       	brne	.+42     	; 0x107a <DIO_enuSetPinDirection+0x1aa>
			{
				DDRD &=~(DIO_MASK_BIT<<Copy_u8PinID);
    1050:	a1 e3       	ldi	r26, 0x31	; 49
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e1 e3       	ldi	r30, 0x31	; 49
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	48 2f       	mov	r20, r24
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	02 2e       	mov	r0, r18
    1068:	02 c0       	rjmp	.+4      	; 0x106e <DIO_enuSetPinDirection+0x19e>
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	0a 94       	dec	r0
    1070:	e2 f7       	brpl	.-8      	; 0x106a <DIO_enuSetPinDirection+0x19a>
    1072:	80 95       	com	r24
    1074:	84 23       	and	r24, r20
    1076:	8c 93       	st	X, r24
    1078:	13 c0       	rjmp	.+38     	; 0x10a0 <DIO_enuSetPinDirection+0x1d0>
			}
			else
			{
				DDRD |=(DIO_MASK_BIT<<Copy_u8PinID);
    107a:	a1 e3       	ldi	r26, 0x31	; 49
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e1 e3       	ldi	r30, 0x31	; 49
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	48 2f       	mov	r20, r24
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	02 2e       	mov	r0, r18
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <DIO_enuSetPinDirection+0x1c8>
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	0a 94       	dec	r0
    109a:	e2 f7       	brpl	.-8      	; 0x1094 <DIO_enuSetPinDirection+0x1c4>
    109c:	84 2b       	or	r24, r20
    109e:	8c 93       	st	X, r24
			}
			break;

		}
		Local_enuerrorState = ES_OK;
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	89 83       	std	Y+1, r24	; 0x01
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <DIO_enuSetPinDirection+0x1da>
	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
    10a6:	83 e0       	ldi	r24, 0x03	; 3
    10a8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuerrorState  ;
    10aa:	89 81       	ldd	r24, Y+1	; 0x01

}//End of DIO_enuSetPinDirection().
    10ac:	26 96       	adiw	r28, 0x06	; 6
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	f8 94       	cli
    10b2:	de bf       	out	0x3e, r29	; 62
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	cd bf       	out	0x3d, r28	; 61
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <DIO_enuSetPinValue>:
/*                 : Arg.3: Copy_u8Val.                                     */
/*                                        DIO_LOW        ,   DIO_HIGH       */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuSetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID ,u8 Copy_u8Val)
{
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	00 d0       	rcall	.+0      	; 0x10c4 <DIO_enuSetPinValue+0x6>
    10c4:	00 d0       	rcall	.+0      	; 0x10c6 <DIO_enuSetPinValue+0x8>
    10c6:	00 d0       	rcall	.+0      	; 0x10c8 <DIO_enuSetPinValue+0xa>
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	8a 83       	std	Y+2, r24	; 0x02
    10ce:	6b 83       	std	Y+3, r22	; 0x03
    10d0:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuerrorState = ES_NOK ;
    10d2:	19 82       	std	Y+1, r1	; 0x01

	if( (Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <= DIO_PIN7) &&( Copy_u8Val<=DIO_HIGH))
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	84 30       	cpi	r24, 0x04	; 4
    10d8:	08 f0       	brcs	.+2      	; 0x10dc <DIO_enuSetPinValue+0x1e>
    10da:	dc c0       	rjmp	.+440    	; 0x1294 <DIO_enuSetPinValue+0x1d6>
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	88 30       	cpi	r24, 0x08	; 8
    10e0:	08 f0       	brcs	.+2      	; 0x10e4 <DIO_enuSetPinValue+0x26>
    10e2:	d8 c0       	rjmp	.+432    	; 0x1294 <DIO_enuSetPinValue+0x1d6>
    10e4:	8c 81       	ldd	r24, Y+4	; 0x04
    10e6:	82 30       	cpi	r24, 0x02	; 2
    10e8:	08 f0       	brcs	.+2      	; 0x10ec <DIO_enuSetPinValue+0x2e>
    10ea:	d4 c0       	rjmp	.+424    	; 0x1294 <DIO_enuSetPinValue+0x1d6>
	{

		/**********************************************************
		 * Switching for the suitable case .
		 **********************************************************/
		switch( Copy_u8PortID )
    10ec:	8a 81       	ldd	r24, Y+2	; 0x02
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	3e 83       	std	Y+6, r19	; 0x06
    10f4:	2d 83       	std	Y+5, r18	; 0x05
    10f6:	8d 81       	ldd	r24, Y+5	; 0x05
    10f8:	9e 81       	ldd	r25, Y+6	; 0x06
    10fa:	81 30       	cpi	r24, 0x01	; 1
    10fc:	91 05       	cpc	r25, r1
    10fe:	09 f4       	brne	.+2      	; 0x1102 <DIO_enuSetPinValue+0x44>
    1100:	43 c0       	rjmp	.+134    	; 0x1188 <DIO_enuSetPinValue+0xca>
    1102:	2d 81       	ldd	r18, Y+5	; 0x05
    1104:	3e 81       	ldd	r19, Y+6	; 0x06
    1106:	22 30       	cpi	r18, 0x02	; 2
    1108:	31 05       	cpc	r19, r1
    110a:	2c f4       	brge	.+10     	; 0x1116 <DIO_enuSetPinValue+0x58>
    110c:	8d 81       	ldd	r24, Y+5	; 0x05
    110e:	9e 81       	ldd	r25, Y+6	; 0x06
    1110:	00 97       	sbiw	r24, 0x00	; 0
    1112:	71 f0       	breq	.+28     	; 0x1130 <DIO_enuSetPinValue+0x72>
    1114:	bc c0       	rjmp	.+376    	; 0x128e <DIO_enuSetPinValue+0x1d0>
    1116:	2d 81       	ldd	r18, Y+5	; 0x05
    1118:	3e 81       	ldd	r19, Y+6	; 0x06
    111a:	22 30       	cpi	r18, 0x02	; 2
    111c:	31 05       	cpc	r19, r1
    111e:	09 f4       	brne	.+2      	; 0x1122 <DIO_enuSetPinValue+0x64>
    1120:	5f c0       	rjmp	.+190    	; 0x11e0 <DIO_enuSetPinValue+0x122>
    1122:	8d 81       	ldd	r24, Y+5	; 0x05
    1124:	9e 81       	ldd	r25, Y+6	; 0x06
    1126:	83 30       	cpi	r24, 0x03	; 3
    1128:	91 05       	cpc	r25, r1
    112a:	09 f4       	brne	.+2      	; 0x112e <DIO_enuSetPinValue+0x70>
    112c:	85 c0       	rjmp	.+266    	; 0x1238 <DIO_enuSetPinValue+0x17a>
    112e:	af c0       	rjmp	.+350    	; 0x128e <DIO_enuSetPinValue+0x1d0>
		{
		case DIO_PORTA :
			if( Copy_u8Val == DIO_LOW)
    1130:	8c 81       	ldd	r24, Y+4	; 0x04
    1132:	88 23       	and	r24, r24
    1134:	a9 f4       	brne	.+42     	; 0x1160 <DIO_enuSetPinValue+0xa2>
			{
				PORTA &=~(DIO_MASK_BIT<<Copy_u8PinID);
    1136:	ab e3       	ldi	r26, 0x3B	; 59
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	eb e3       	ldi	r30, 0x3B	; 59
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	48 2f       	mov	r20, r24
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	02 2e       	mov	r0, r18
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <DIO_enuSetPinValue+0x96>
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	0a 94       	dec	r0
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <DIO_enuSetPinValue+0x92>
    1158:	80 95       	com	r24
    115a:	84 23       	and	r24, r20
    115c:	8c 93       	st	X, r24
    115e:	97 c0       	rjmp	.+302    	; 0x128e <DIO_enuSetPinValue+0x1d0>
			}
			else
			{
				PORTA |=(DIO_MASK_BIT<<Copy_u8PinID);
    1160:	ab e3       	ldi	r26, 0x3B	; 59
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	eb e3       	ldi	r30, 0x3B	; 59
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	48 2f       	mov	r20, r24
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	02 2e       	mov	r0, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <DIO_enuSetPinValue+0xc0>
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	0a 94       	dec	r0
    1180:	e2 f7       	brpl	.-8      	; 0x117a <DIO_enuSetPinValue+0xbc>
    1182:	84 2b       	or	r24, r20
    1184:	8c 93       	st	X, r24
    1186:	83 c0       	rjmp	.+262    	; 0x128e <DIO_enuSetPinValue+0x1d0>
			}

			break;

		case DIO_PORTB :
			if( Copy_u8Val == DIO_LOW)
    1188:	8c 81       	ldd	r24, Y+4	; 0x04
    118a:	88 23       	and	r24, r24
    118c:	a9 f4       	brne	.+42     	; 0x11b8 <DIO_enuSetPinValue+0xfa>
			{
				PORTB &=~(DIO_MASK_BIT<<Copy_u8PinID);
    118e:	a8 e3       	ldi	r26, 0x38	; 56
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e8 e3       	ldi	r30, 0x38	; 56
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	48 2f       	mov	r20, r24
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	02 2e       	mov	r0, r18
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <DIO_enuSetPinValue+0xee>
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	0a 94       	dec	r0
    11ae:	e2 f7       	brpl	.-8      	; 0x11a8 <DIO_enuSetPinValue+0xea>
    11b0:	80 95       	com	r24
    11b2:	84 23       	and	r24, r20
    11b4:	8c 93       	st	X, r24
    11b6:	6b c0       	rjmp	.+214    	; 0x128e <DIO_enuSetPinValue+0x1d0>
			}
			else
			{
				PORTB |=(DIO_MASK_BIT<<Copy_u8PinID);
    11b8:	a8 e3       	ldi	r26, 0x38	; 56
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e8 e3       	ldi	r30, 0x38	; 56
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	48 2f       	mov	r20, r24
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	02 2e       	mov	r0, r18
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <DIO_enuSetPinValue+0x118>
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	0a 94       	dec	r0
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <DIO_enuSetPinValue+0x114>
    11da:	84 2b       	or	r24, r20
    11dc:	8c 93       	st	X, r24
    11de:	57 c0       	rjmp	.+174    	; 0x128e <DIO_enuSetPinValue+0x1d0>

			break;

		case DIO_PORTC :

			if( Copy_u8Val == DIO_LOW)
    11e0:	8c 81       	ldd	r24, Y+4	; 0x04
    11e2:	88 23       	and	r24, r24
    11e4:	a9 f4       	brne	.+42     	; 0x1210 <DIO_enuSetPinValue+0x152>
			{
				PORTC &=~(DIO_MASK_BIT<<Copy_u8PinID);
    11e6:	a5 e3       	ldi	r26, 0x35	; 53
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	e5 e3       	ldi	r30, 0x35	; 53
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	48 2f       	mov	r20, r24
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	02 2e       	mov	r0, r18
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <DIO_enuSetPinValue+0x146>
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	0a 94       	dec	r0
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <DIO_enuSetPinValue+0x142>
    1208:	80 95       	com	r24
    120a:	84 23       	and	r24, r20
    120c:	8c 93       	st	X, r24
    120e:	3f c0       	rjmp	.+126    	; 0x128e <DIO_enuSetPinValue+0x1d0>
			}
			else
			{
				PORTC |=(DIO_MASK_BIT<<Copy_u8PinID);
    1210:	a5 e3       	ldi	r26, 0x35	; 53
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	e5 e3       	ldi	r30, 0x35	; 53
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	48 2f       	mov	r20, r24
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	28 2f       	mov	r18, r24
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	02 2e       	mov	r0, r18
    1228:	02 c0       	rjmp	.+4      	; 0x122e <DIO_enuSetPinValue+0x170>
    122a:	88 0f       	add	r24, r24
    122c:	99 1f       	adc	r25, r25
    122e:	0a 94       	dec	r0
    1230:	e2 f7       	brpl	.-8      	; 0x122a <DIO_enuSetPinValue+0x16c>
    1232:	84 2b       	or	r24, r20
    1234:	8c 93       	st	X, r24
    1236:	2b c0       	rjmp	.+86     	; 0x128e <DIO_enuSetPinValue+0x1d0>
			}

			break;

		case DIO_PORTD :
			if( Copy_u8Val == DIO_LOW)
    1238:	8c 81       	ldd	r24, Y+4	; 0x04
    123a:	88 23       	and	r24, r24
    123c:	a9 f4       	brne	.+42     	; 0x1268 <DIO_enuSetPinValue+0x1aa>
			{
				PORTD &=~(DIO_MASK_BIT<<Copy_u8PinID);
    123e:	a2 e3       	ldi	r26, 0x32	; 50
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	e2 e3       	ldi	r30, 0x32	; 50
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	48 2f       	mov	r20, r24
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	02 2e       	mov	r0, r18
    1256:	02 c0       	rjmp	.+4      	; 0x125c <DIO_enuSetPinValue+0x19e>
    1258:	88 0f       	add	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	0a 94       	dec	r0
    125e:	e2 f7       	brpl	.-8      	; 0x1258 <DIO_enuSetPinValue+0x19a>
    1260:	80 95       	com	r24
    1262:	84 23       	and	r24, r20
    1264:	8c 93       	st	X, r24
    1266:	13 c0       	rjmp	.+38     	; 0x128e <DIO_enuSetPinValue+0x1d0>
			}
			else
			{
				PORTD |=(DIO_MASK_BIT<<Copy_u8PinID);
    1268:	a2 e3       	ldi	r26, 0x32	; 50
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e2 e3       	ldi	r30, 0x32	; 50
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	48 2f       	mov	r20, r24
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	02 2e       	mov	r0, r18
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <DIO_enuSetPinValue+0x1c8>
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	0a 94       	dec	r0
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <DIO_enuSetPinValue+0x1c4>
    128a:	84 2b       	or	r24, r20
    128c:	8c 93       	st	X, r24
			}

			break;

		}
		Local_enuerrorState = ES_OK;
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	89 83       	std	Y+1, r24	; 0x01
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <DIO_enuSetPinValue+0x1da>
	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
    1294:	83 e0       	ldi	r24, 0x03	; 3
    1296:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuerrorState  ;
    1298:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuSetPinValue().
    129a:	26 96       	adiw	r28, 0x06	; 6
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	f8 94       	cli
    12a0:	de bf       	out	0x3e, r29	; 62
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	cd bf       	out	0x3d, r28	; 61
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <DIO_enuToggelPin>:
/*                                        DIO_PIN2       ,   DIO_PIN6       */
/*                                        DIO_PIN3       ,   DIO_PIN7       */
/* Return          : ERROR_STATE eum.                                       */
/****************************************************************************/
ES_t DIO_enuToggelPin(u8  Copy_u8PortID, u8 Copy_u8PinID  )
{
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	00 d0       	rcall	.+0      	; 0x12b2 <DIO_enuToggelPin+0x6>
    12b2:	00 d0       	rcall	.+0      	; 0x12b4 <DIO_enuToggelPin+0x8>
    12b4:	0f 92       	push	r0
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
    12ba:	8a 83       	std	Y+2, r24	; 0x02
    12bc:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuerrorState = ES_NOK ;
    12be:	19 82       	std	Y+1, r1	; 0x01

	if( (Copy_u8PortID <= DIO_PORTD) &&  (Copy_u8PinID <= DIO_PIN7) )
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	84 30       	cpi	r24, 0x04	; 4
    12c4:	08 f0       	brcs	.+2      	; 0x12c8 <DIO_enuToggelPin+0x1c>
    12c6:	75 c0       	rjmp	.+234    	; 0x13b2 <DIO_enuToggelPin+0x106>
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	88 30       	cpi	r24, 0x08	; 8
    12cc:	08 f0       	brcs	.+2      	; 0x12d0 <DIO_enuToggelPin+0x24>
    12ce:	71 c0       	rjmp	.+226    	; 0x13b2 <DIO_enuToggelPin+0x106>
	{
		/**********************************************************
		 * Switching for the suitable case .
		 **********************************************************/
		switch( Copy_u8PortID )
    12d0:	8a 81       	ldd	r24, Y+2	; 0x02
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	3d 83       	std	Y+5, r19	; 0x05
    12d8:	2c 83       	std	Y+4, r18	; 0x04
    12da:	8c 81       	ldd	r24, Y+4	; 0x04
    12dc:	9d 81       	ldd	r25, Y+5	; 0x05
    12de:	81 30       	cpi	r24, 0x01	; 1
    12e0:	91 05       	cpc	r25, r1
    12e2:	49 f1       	breq	.+82     	; 0x1336 <DIO_enuToggelPin+0x8a>
    12e4:	2c 81       	ldd	r18, Y+4	; 0x04
    12e6:	3d 81       	ldd	r19, Y+5	; 0x05
    12e8:	22 30       	cpi	r18, 0x02	; 2
    12ea:	31 05       	cpc	r19, r1
    12ec:	2c f4       	brge	.+10     	; 0x12f8 <DIO_enuToggelPin+0x4c>
    12ee:	8c 81       	ldd	r24, Y+4	; 0x04
    12f0:	9d 81       	ldd	r25, Y+5	; 0x05
    12f2:	00 97       	sbiw	r24, 0x00	; 0
    12f4:	61 f0       	breq	.+24     	; 0x130e <DIO_enuToggelPin+0x62>
    12f6:	5a c0       	rjmp	.+180    	; 0x13ac <DIO_enuToggelPin+0x100>
    12f8:	2c 81       	ldd	r18, Y+4	; 0x04
    12fa:	3d 81       	ldd	r19, Y+5	; 0x05
    12fc:	22 30       	cpi	r18, 0x02	; 2
    12fe:	31 05       	cpc	r19, r1
    1300:	71 f1       	breq	.+92     	; 0x135e <DIO_enuToggelPin+0xb2>
    1302:	8c 81       	ldd	r24, Y+4	; 0x04
    1304:	9d 81       	ldd	r25, Y+5	; 0x05
    1306:	83 30       	cpi	r24, 0x03	; 3
    1308:	91 05       	cpc	r25, r1
    130a:	e9 f1       	breq	.+122    	; 0x1386 <DIO_enuToggelPin+0xda>
    130c:	4f c0       	rjmp	.+158    	; 0x13ac <DIO_enuToggelPin+0x100>
		{
		case DIO_PORTA :
			PORTA ^=(DIO_MASK_BIT<<Copy_u8PinID);
    130e:	ab e3       	ldi	r26, 0x3B	; 59
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	eb e3       	ldi	r30, 0x3B	; 59
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	48 2f       	mov	r20, r24
    131a:	8b 81       	ldd	r24, Y+3	; 0x03
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	02 2e       	mov	r0, r18
    1326:	02 c0       	rjmp	.+4      	; 0x132c <DIO_enuToggelPin+0x80>
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	0a 94       	dec	r0
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <DIO_enuToggelPin+0x7c>
    1330:	84 27       	eor	r24, r20
    1332:	8c 93       	st	X, r24
    1334:	3b c0       	rjmp	.+118    	; 0x13ac <DIO_enuToggelPin+0x100>
			break;

		case DIO_PORTB :
			PORTB ^=(DIO_MASK_BIT<<Copy_u8PinID);
    1336:	a8 e3       	ldi	r26, 0x38	; 56
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	e8 e3       	ldi	r30, 0x38	; 56
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	48 2f       	mov	r20, r24
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	02 2e       	mov	r0, r18
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <DIO_enuToggelPin+0xa8>
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	0a 94       	dec	r0
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <DIO_enuToggelPin+0xa4>
    1358:	84 27       	eor	r24, r20
    135a:	8c 93       	st	X, r24
    135c:	27 c0       	rjmp	.+78     	; 0x13ac <DIO_enuToggelPin+0x100>
			break;

		case DIO_PORTC :
			PORTC ^=(DIO_MASK_BIT<<Copy_u8PinID);
    135e:	a5 e3       	ldi	r26, 0x35	; 53
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	e5 e3       	ldi	r30, 0x35	; 53
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	48 2f       	mov	r20, r24
    136a:	8b 81       	ldd	r24, Y+3	; 0x03
    136c:	28 2f       	mov	r18, r24
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	02 2e       	mov	r0, r18
    1376:	02 c0       	rjmp	.+4      	; 0x137c <DIO_enuToggelPin+0xd0>
    1378:	88 0f       	add	r24, r24
    137a:	99 1f       	adc	r25, r25
    137c:	0a 94       	dec	r0
    137e:	e2 f7       	brpl	.-8      	; 0x1378 <DIO_enuToggelPin+0xcc>
    1380:	84 27       	eor	r24, r20
    1382:	8c 93       	st	X, r24
    1384:	13 c0       	rjmp	.+38     	; 0x13ac <DIO_enuToggelPin+0x100>
			break;

		case DIO_PORTD :
			PORTD ^=(DIO_MASK_BIT<<Copy_u8PinID);
    1386:	a2 e3       	ldi	r26, 0x32	; 50
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	e2 e3       	ldi	r30, 0x32	; 50
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	48 2f       	mov	r20, r24
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	02 2e       	mov	r0, r18
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <DIO_enuToggelPin+0xf8>
    13a0:	88 0f       	add	r24, r24
    13a2:	99 1f       	adc	r25, r25
    13a4:	0a 94       	dec	r0
    13a6:	e2 f7       	brpl	.-8      	; 0x13a0 <DIO_enuToggelPin+0xf4>
    13a8:	84 27       	eor	r24, r20
    13aa:	8c 93       	st	X, r24
			break;
		}

		Local_enuerrorState = ES_OK;
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	89 83       	std	Y+1, r24	; 0x01
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <DIO_enuToggelPin+0x10a>

	}
	else
	{
		Local_enuerrorState = ES_OUT_OF_RANGE;
    13b2:	83 e0       	ldi	r24, 0x03	; 3
    13b4:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuerrorState  ;
    13b6:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuToggelPin().
    13b8:	0f 90       	pop	r0
    13ba:	0f 90       	pop	r0
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	cf 91       	pop	r28
    13c4:	df 91       	pop	r29
    13c6:	08 95       	ret

000013c8 <DIO_enuGetPinVlaue>:
/*                 : Arg.3: Address of u8 variable.                              */
/*                                                                               */
/* Return          : ERROR_STATE eum.                                            */
/*********************************************************************************/
ES_t DIO_enuGetPinVlaue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8* Copy_pu8PinVal)
{
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
    13d0:	27 97       	sbiw	r28, 0x07	; 7
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	de bf       	out	0x3e, r29	; 62
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	cd bf       	out	0x3d, r28	; 61
    13dc:	8a 83       	std	Y+2, r24	; 0x02
    13de:	6b 83       	std	Y+3, r22	; 0x03
    13e0:	5d 83       	std	Y+5, r21	; 0x05
    13e2:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuerrorState = ES_NOK ;
    13e4:	19 82       	std	Y+1, r1	; 0x01

	// Check to ensure that the passed address is not equal Null.
	if( Copy_pu8PinVal != NULL )
    13e6:	8c 81       	ldd	r24, Y+4	; 0x04
    13e8:	9d 81       	ldd	r25, Y+5	; 0x05
    13ea:	00 97       	sbiw	r24, 0x00	; 0
    13ec:	09 f4       	brne	.+2      	; 0x13f0 <DIO_enuGetPinVlaue+0x28>
    13ee:	7e c0       	rjmp	.+252    	; 0x14ec <DIO_enuGetPinVlaue+0x124>
	{
		if( (Copy_u8PortID <= DIO_PORTD) &&  (Copy_u8PinID <= DIO_PIN7) )
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	84 30       	cpi	r24, 0x04	; 4
    13f4:	08 f0       	brcs	.+2      	; 0x13f8 <DIO_enuGetPinVlaue+0x30>
    13f6:	77 c0       	rjmp	.+238    	; 0x14e6 <DIO_enuGetPinVlaue+0x11e>
    13f8:	8b 81       	ldd	r24, Y+3	; 0x03
    13fa:	88 30       	cpi	r24, 0x08	; 8
    13fc:	08 f0       	brcs	.+2      	; 0x1400 <DIO_enuGetPinVlaue+0x38>
    13fe:	73 c0       	rjmp	.+230    	; 0x14e6 <DIO_enuGetPinVlaue+0x11e>
		{
			/**********************************************************
			 * Switching for the suitable case .
			 **********************************************************/
			switch( Copy_u8PortID )
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	3f 83       	std	Y+7, r19	; 0x07
    1408:	2e 83       	std	Y+6, r18	; 0x06
    140a:	4e 81       	ldd	r20, Y+6	; 0x06
    140c:	5f 81       	ldd	r21, Y+7	; 0x07
    140e:	41 30       	cpi	r20, 0x01	; 1
    1410:	51 05       	cpc	r21, r1
    1412:	59 f1       	breq	.+86     	; 0x146a <DIO_enuGetPinVlaue+0xa2>
    1414:	8e 81       	ldd	r24, Y+6	; 0x06
    1416:	9f 81       	ldd	r25, Y+7	; 0x07
    1418:	82 30       	cpi	r24, 0x02	; 2
    141a:	91 05       	cpc	r25, r1
    141c:	34 f4       	brge	.+12     	; 0x142a <DIO_enuGetPinVlaue+0x62>
    141e:	2e 81       	ldd	r18, Y+6	; 0x06
    1420:	3f 81       	ldd	r19, Y+7	; 0x07
    1422:	21 15       	cp	r18, r1
    1424:	31 05       	cpc	r19, r1
    1426:	69 f0       	breq	.+26     	; 0x1442 <DIO_enuGetPinVlaue+0x7a>
    1428:	5b c0       	rjmp	.+182    	; 0x14e0 <DIO_enuGetPinVlaue+0x118>
    142a:	4e 81       	ldd	r20, Y+6	; 0x06
    142c:	5f 81       	ldd	r21, Y+7	; 0x07
    142e:	42 30       	cpi	r20, 0x02	; 2
    1430:	51 05       	cpc	r21, r1
    1432:	79 f1       	breq	.+94     	; 0x1492 <DIO_enuGetPinVlaue+0xca>
    1434:	8e 81       	ldd	r24, Y+6	; 0x06
    1436:	9f 81       	ldd	r25, Y+7	; 0x07
    1438:	83 30       	cpi	r24, 0x03	; 3
    143a:	91 05       	cpc	r25, r1
    143c:	09 f4       	brne	.+2      	; 0x1440 <DIO_enuGetPinVlaue+0x78>
    143e:	3d c0       	rjmp	.+122    	; 0x14ba <DIO_enuGetPinVlaue+0xf2>
    1440:	4f c0       	rjmp	.+158    	; 0x14e0 <DIO_enuGetPinVlaue+0x118>
			{
			case DIO_PORTA :
				*Copy_pu8PinVal = (PINA>>Copy_u8PinID)&DIO_MASK_BIT;
    1442:	e9 e3       	ldi	r30, 0x39	; 57
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	88 2f       	mov	r24, r24
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	a9 01       	movw	r20, r18
    1454:	02 c0       	rjmp	.+4      	; 0x145a <DIO_enuGetPinVlaue+0x92>
    1456:	55 95       	asr	r21
    1458:	47 95       	ror	r20
    145a:	8a 95       	dec	r24
    145c:	e2 f7       	brpl	.-8      	; 0x1456 <DIO_enuGetPinVlaue+0x8e>
    145e:	ca 01       	movw	r24, r20
    1460:	81 70       	andi	r24, 0x01	; 1
    1462:	ec 81       	ldd	r30, Y+4	; 0x04
    1464:	fd 81       	ldd	r31, Y+5	; 0x05
    1466:	80 83       	st	Z, r24
    1468:	3b c0       	rjmp	.+118    	; 0x14e0 <DIO_enuGetPinVlaue+0x118>
				break;

			case DIO_PORTB :
				*Copy_pu8PinVal = (PINB>>Copy_u8PinID)&DIO_MASK_BIT;
    146a:	e6 e3       	ldi	r30, 0x36	; 54
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	88 2f       	mov	r24, r24
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	a9 01       	movw	r20, r18
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <DIO_enuGetPinVlaue+0xba>
    147e:	55 95       	asr	r21
    1480:	47 95       	ror	r20
    1482:	8a 95       	dec	r24
    1484:	e2 f7       	brpl	.-8      	; 0x147e <DIO_enuGetPinVlaue+0xb6>
    1486:	ca 01       	movw	r24, r20
    1488:	81 70       	andi	r24, 0x01	; 1
    148a:	ec 81       	ldd	r30, Y+4	; 0x04
    148c:	fd 81       	ldd	r31, Y+5	; 0x05
    148e:	80 83       	st	Z, r24
    1490:	27 c0       	rjmp	.+78     	; 0x14e0 <DIO_enuGetPinVlaue+0x118>
				break;

			case DIO_PORTC :
				*Copy_pu8PinVal = (PINC>>Copy_u8PinID)&DIO_MASK_BIT;
    1492:	e3 e3       	ldi	r30, 0x33	; 51
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	28 2f       	mov	r18, r24
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	88 2f       	mov	r24, r24
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	a9 01       	movw	r20, r18
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <DIO_enuGetPinVlaue+0xe2>
    14a6:	55 95       	asr	r21
    14a8:	47 95       	ror	r20
    14aa:	8a 95       	dec	r24
    14ac:	e2 f7       	brpl	.-8      	; 0x14a6 <DIO_enuGetPinVlaue+0xde>
    14ae:	ca 01       	movw	r24, r20
    14b0:	81 70       	andi	r24, 0x01	; 1
    14b2:	ec 81       	ldd	r30, Y+4	; 0x04
    14b4:	fd 81       	ldd	r31, Y+5	; 0x05
    14b6:	80 83       	st	Z, r24
    14b8:	13 c0       	rjmp	.+38     	; 0x14e0 <DIO_enuGetPinVlaue+0x118>
				break;

			case DIO_PORTD :
				*Copy_pu8PinVal = (PIND>>Copy_u8PinID)&DIO_MASK_BIT;
    14ba:	e0 e3       	ldi	r30, 0x30	; 48
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	28 2f       	mov	r18, r24
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	88 2f       	mov	r24, r24
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	a9 01       	movw	r20, r18
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <DIO_enuGetPinVlaue+0x10a>
    14ce:	55 95       	asr	r21
    14d0:	47 95       	ror	r20
    14d2:	8a 95       	dec	r24
    14d4:	e2 f7       	brpl	.-8      	; 0x14ce <DIO_enuGetPinVlaue+0x106>
    14d6:	ca 01       	movw	r24, r20
    14d8:	81 70       	andi	r24, 0x01	; 1
    14da:	ec 81       	ldd	r30, Y+4	; 0x04
    14dc:	fd 81       	ldd	r31, Y+5	; 0x05
    14de:	80 83       	st	Z, r24
				break;
			}

			Local_enuerrorState = ES_OK;
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	89 83       	std	Y+1, r24	; 0x01
    14e4:	05 c0       	rjmp	.+10     	; 0x14f0 <DIO_enuGetPinVlaue+0x128>

		}
		else
		{
			Local_enuerrorState = ES_OUT_OF_RANGE;
    14e6:	83 e0       	ldi	r24, 0x03	; 3
    14e8:	89 83       	std	Y+1, r24	; 0x01
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <DIO_enuGetPinVlaue+0x128>
	else
	{
		/**********************************************************
		 * Handle null pointer case.
		 **********************************************************/
		Local_enuerrorState = ES_NULL_POINTER;
    14ec:	82 e0       	ldi	r24, 0x02	; 2
    14ee:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_enuerrorState  ;
    14f0:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuGetPinVlaue().
    14f2:	27 96       	adiw	r28, 0x07	; 7
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	f8 94       	cli
    14f8:	de bf       	out	0x3e, r29	; 62
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	cd bf       	out	0x3d, r28	; 61
    14fe:	cf 91       	pop	r28
    1500:	df 91       	pop	r29
    1502:	08 95       	ret

00001504 <GPS_inlinevidAsciiToInt>:
//
//
//}

void GPS_inlinevidAsciiToInt(const u8* GPS_p2Constu8_DataBuffer , f32** Copy_pf32Lat , f32** Copy_pf32Long , u8** Copy_pu8LatDir , u8** Copy_pu8LongDir  )
{
    1504:	0f 93       	push	r16
    1506:	1f 93       	push	r17
    1508:	df 93       	push	r29
    150a:	cf 93       	push	r28
    150c:	cd b7       	in	r28, 0x3d	; 61
    150e:	de b7       	in	r29, 0x3e	; 62
    1510:	2f 97       	sbiw	r28, 0x0f	; 15
    1512:	0f b6       	in	r0, 0x3f	; 63
    1514:	f8 94       	cli
    1516:	de bf       	out	0x3e, r29	; 62
    1518:	0f be       	out	0x3f, r0	; 63
    151a:	cd bf       	out	0x3d, r28	; 61
    151c:	9f 83       	std	Y+7, r25	; 0x07
    151e:	8e 83       	std	Y+6, r24	; 0x06
    1520:	79 87       	std	Y+9, r23	; 0x09
    1522:	68 87       	std	Y+8, r22	; 0x08
    1524:	5b 87       	std	Y+11, r21	; 0x0b
    1526:	4a 87       	std	Y+10, r20	; 0x0a
    1528:	3d 87       	std	Y+13, r19	; 0x0d
    152a:	2c 87       	std	Y+12, r18	; 0x0c
    152c:	1f 87       	std	Y+15, r17	; 0x0f
    152e:	0e 87       	std	Y+14, r16	; 0x0e


	u16 Local_u16TempLat  = 0 ;
    1530:	1d 82       	std	Y+5, r1	; 0x05
    1532:	1c 82       	std	Y+4, r1	; 0x04
	u16 Local_u16TempLong = 0 ;
    1534:	1b 82       	std	Y+3, r1	; 0x03
    1536:	1a 82       	std	Y+2, r1	; 0x02

	u8 Local_u8Temp = 10 ;
    1538:	8a e0       	ldi	r24, 0x0A	; 10
    153a:	89 83       	std	Y+1, r24	; 0x01
    153c:	05 c0       	rjmp	.+10     	; 0x1548 <GPS_inlinevidAsciiToInt+0x44>
	//  0.........  10  ....  15 ....  20  .  22  .......... 33  .  35  .............................
	//  043338.100  ,   5404  .  2675  ,   N  ,   00159.7569  ,  W  ,   1,10,4.00,100.0,M,50.0,M,,*72
	//  |
	while( *GPS_p2Constu8_DataBuffer != ',' )
	{
		GPS_p2Constu8_DataBuffer++;
    153e:	8e 81       	ldd	r24, Y+6	; 0x06
    1540:	9f 81       	ldd	r25, Y+7	; 0x07
    1542:	01 96       	adiw	r24, 0x01	; 1
    1544:	9f 83       	std	Y+7, r25	; 0x07
    1546:	8e 83       	std	Y+6, r24	; 0x06
	u8 Local_u8Temp = 10 ;

	//  0.........  10  ....  15 ....  20  .  22  .......... 33  .  35  .............................
	//  043338.100  ,   5404  .  2675  ,   N  ,   00159.7569  ,  W  ,   1,10,4.00,100.0,M,50.0,M,,*72
	//  |
	while( *GPS_p2Constu8_DataBuffer != ',' )
    1548:	ee 81       	ldd	r30, Y+6	; 0x06
    154a:	ff 81       	ldd	r31, Y+7	; 0x07
    154c:	80 81       	ld	r24, Z
    154e:	8c 32       	cpi	r24, 0x2C	; 44
    1550:	b1 f7       	brne	.-20     	; 0x153e <GPS_inlinevidAsciiToInt+0x3a>
	//  043338.100  ,   5404  .  2675  ,   N  ,   00159.7569  ,  W  ,   1,10,4.00,100.0,M,50.0,M,,*72
	//              |
	//P2Data:       10


	GPS_p2Constu8_DataBuffer++;
    1552:	8e 81       	ldd	r24, Y+6	; 0x06
    1554:	9f 81       	ldd	r25, Y+7	; 0x07
    1556:	01 96       	adiw	r24, 0x01	; 1
    1558:	9f 83       	std	Y+7, r25	; 0x07
    155a:	8e 83       	std	Y+6, r24	; 0x06
	do
	{
		// 540 4.2675
		// |

		Local_u16TempLat *= 10;
    155c:	8c 81       	ldd	r24, Y+4	; 0x04
    155e:	9d 81       	ldd	r25, Y+5	; 0x05
    1560:	9c 01       	movw	r18, r24
    1562:	22 0f       	add	r18, r18
    1564:	33 1f       	adc	r19, r19
    1566:	c9 01       	movw	r24, r18
    1568:	88 0f       	add	r24, r24
    156a:	99 1f       	adc	r25, r25
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	82 0f       	add	r24, r18
    1572:	93 1f       	adc	r25, r19
    1574:	9d 83       	std	Y+5, r25	; 0x05
    1576:	8c 83       	std	Y+4, r24	; 0x04

		Local_u16TempLat += ((u16)(*(GPS_p2Constu8_DataBuffer)-0x30));
    1578:	ee 81       	ldd	r30, Y+6	; 0x06
    157a:	ff 81       	ldd	r31, Y+7	; 0x07
    157c:	80 81       	ld	r24, Z
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	8c 81       	ldd	r24, Y+4	; 0x04
    1584:	9d 81       	ldd	r25, Y+5	; 0x05
    1586:	82 0f       	add	r24, r18
    1588:	93 1f       	adc	r25, r19
    158a:	c0 97       	sbiw	r24, 0x30	; 48
    158c:	9d 83       	std	Y+5, r25	; 0x05
    158e:	8c 83       	std	Y+4, r24	; 0x04
		//iter_#1      		0+5 = 5
		//iter_#2          50+4 = 54
		//iter_#3         540+0 = 540
		//iter_#4        5400+4 = 5404

		GPS_p2Constu8_DataBuffer++;
    1590:	8e 81       	ldd	r24, Y+6	; 0x06
    1592:	9f 81       	ldd	r25, Y+7	; 0x07
    1594:	01 96       	adiw	r24, 0x01	; 1
    1596:	9f 83       	std	Y+7, r25	; 0x07
    1598:	8e 83       	std	Y+6, r24	; 0x06

	}while( (*GPS_p2Constu8_DataBuffer) != '.');
    159a:	ee 81       	ldd	r30, Y+6	; 0x06
    159c:	ff 81       	ldd	r31, Y+7	; 0x07
    159e:	80 81       	ld	r24, Z
    15a0:	8e 32       	cpi	r24, 0x2E	; 46
    15a2:	e1 f6       	brne	.-72     	; 0x155c <GPS_inlinevidAsciiToInt+0x58>
	//  0.........  10  ....  15 ....  20  .  22  .......... 33  .  35  .............................
	//  043338.100  ,   5404  .  2675  ,   N  ,   00159.7569  ,  W  ,   1,10,4.00,100.0,M,50.0,M,,*72
	//                                 |
	//P2Data:                          20

	GPS_p2Constu8_DataBuffer++;
    15a4:	8e 81       	ldd	r24, Y+6	; 0x06
    15a6:	9f 81       	ldd	r25, Y+7	; 0x07
    15a8:	01 96       	adiw	r24, 0x01	; 1
    15aa:	9f 83       	std	Y+7, r25	; 0x07
    15ac:	8e 83       	std	Y+6, r24	; 0x06
	do
	{
		// 5404.2675,
		//          |

		Local_u16TempLat += ((u16)(*(GPS_p2Constu8_DataBuffer)-0x30)/Local_u8Temp);
    15ae:	ee 81       	ldd	r30, Y+6	; 0x06
    15b0:	ff 81       	ldd	r31, Y+7	; 0x07
    15b2:	80 81       	ld	r24, Z
    15b4:	88 2f       	mov	r24, r24
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	c0 97       	sbiw	r24, 0x30	; 48
    15ba:	ac 01       	movw	r20, r24
    15bc:	89 81       	ldd	r24, Y+1	; 0x01
    15be:	28 2f       	mov	r18, r24
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	ca 01       	movw	r24, r20
    15c4:	b9 01       	movw	r22, r18
    15c6:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__udivmodhi4>
    15ca:	cb 01       	movw	r24, r22
    15cc:	9c 01       	movw	r18, r24
    15ce:	8c 81       	ldd	r24, Y+4	; 0x04
    15d0:	9d 81       	ldd	r25, Y+5	; 0x05
    15d2:	82 0f       	add	r24, r18
    15d4:	93 1f       	adc	r25, r19
    15d6:	9d 83       	std	Y+5, r25	; 0x05
    15d8:	8c 83       	std	Y+4, r24	; 0x04

		Local_u8Temp *= 10 ;
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	88 2f       	mov	r24, r24
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	9c 01       	movw	r18, r24
    15e2:	22 0f       	add	r18, r18
    15e4:	33 1f       	adc	r19, r19
    15e6:	c9 01       	movw	r24, r18
    15e8:	88 0f       	add	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	88 0f       	add	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	82 0f       	add	r24, r18
    15f2:	93 1f       	adc	r25, r19
    15f4:	89 83       	std	Y+1, r24	; 0x01
		//iter_#2  Local_u16TempLat=   5404.2 + 0.06=  5404.26
		//iter_#3                      5404.26 + 0.007=  5404.267
		//iter_#4                      5404.267 + 0.0005=  5404.2675


		GPS_p2Constu8_DataBuffer++;
    15f6:	8e 81       	ldd	r24, Y+6	; 0x06
    15f8:	9f 81       	ldd	r25, Y+7	; 0x07
    15fa:	01 96       	adiw	r24, 0x01	; 1
    15fc:	9f 83       	std	Y+7, r25	; 0x07
    15fe:	8e 83       	std	Y+6, r24	; 0x06


	}while( *(GPS_p2Constu8_DataBuffer) != ',');
    1600:	ee 81       	ldd	r30, Y+6	; 0x06
    1602:	ff 81       	ldd	r31, Y+7	; 0x07
    1604:	80 81       	ld	r24, Z
    1606:	8c 32       	cpi	r24, 0x2C	; 44
    1608:	91 f6       	brne	.-92     	; 0x15ae <GPS_inlinevidAsciiToInt+0xaa>

	//  0.........  10  ....  15 ....  20  .  22  .......... 33  .  35  .............................
	//  043338.100  ,   5404  .  2675  ,   N  ,   00159.7569  ,  W  ,   1,10,4.00,100.0,M,50.0,M,,*72
	//  P2Data:                        |
	//
	GPS_p2Constu8_DataBuffer++;
    160a:	8e 81       	ldd	r24, Y+6	; 0x06
    160c:	9f 81       	ldd	r25, Y+7	; 0x07
    160e:	01 96       	adiw	r24, 0x01	; 1
    1610:	9f 83       	std	Y+7, r25	; 0x07
    1612:	8e 83       	std	Y+6, r24	; 0x06
	//  0.........  10  ....  15 ....  20  .  22  .......... 33  .  35  .............................
	//  043338.100  ,   5404  .  2675  ,   N  ,   00159.7569  ,  W  ,   1,10,4.00,100.0,M,50.0,M,,*72
	//  P2Data:                            |


	**Copy_pu8LatDir = *GPS_p2Constu8_DataBuffer ;
    1614:	ec 85       	ldd	r30, Y+12	; 0x0c
    1616:	fd 85       	ldd	r31, Y+13	; 0x0d
    1618:	a0 81       	ld	r26, Z
    161a:	b1 81       	ldd	r27, Z+1	; 0x01
    161c:	ee 81       	ldd	r30, Y+6	; 0x06
    161e:	ff 81       	ldd	r31, Y+7	; 0x07
    1620:	80 81       	ld	r24, Z
    1622:	8c 93       	st	X, r24

	GPS_p2Constu8_DataBuffer++;
    1624:	8e 81       	ldd	r24, Y+6	; 0x06
    1626:	9f 81       	ldd	r25, Y+7	; 0x07
    1628:	01 96       	adiw	r24, 0x01	; 1
    162a:	9f 83       	std	Y+7, r25	; 0x07
    162c:	8e 83       	std	Y+6, r24	; 0x06

	//  0.........  10  ....  15 ....  20  .  22  .......... 33  .  35  .............................
	//  043338.100  ,   5404  .  2675  ,   N  ,   00159.7569  ,  W  ,   1,10,4.00,100.0,M,50.0,M,,*72
	//  P2Data:                               |

	GPS_p2Constu8_DataBuffer++;
    162e:	8e 81       	ldd	r24, Y+6	; 0x06
    1630:	9f 81       	ldd	r25, Y+7	; 0x07
    1632:	01 96       	adiw	r24, 0x01	; 1
    1634:	9f 83       	std	Y+7, r25	; 0x07
    1636:	8e 83       	std	Y+6, r24	; 0x06
	do
	{
		// 00159.7569
		// |

		Local_u16TempLong *= 10;
    1638:	8a 81       	ldd	r24, Y+2	; 0x02
    163a:	9b 81       	ldd	r25, Y+3	; 0x03
    163c:	9c 01       	movw	r18, r24
    163e:	22 0f       	add	r18, r18
    1640:	33 1f       	adc	r19, r19
    1642:	c9 01       	movw	r24, r18
    1644:	88 0f       	add	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	88 0f       	add	r24, r24
    164a:	99 1f       	adc	r25, r25
    164c:	82 0f       	add	r24, r18
    164e:	93 1f       	adc	r25, r19
    1650:	9b 83       	std	Y+3, r25	; 0x03
    1652:	8a 83       	std	Y+2, r24	; 0x02

		Local_u16TempLong += ((u16)((*GPS_p2Constu8_DataBuffer)-0x30));
    1654:	ee 81       	ldd	r30, Y+6	; 0x06
    1656:	ff 81       	ldd	r31, Y+7	; 0x07
    1658:	80 81       	ld	r24, Z
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	9b 81       	ldd	r25, Y+3	; 0x03
    1662:	82 0f       	add	r24, r18
    1664:	93 1f       	adc	r25, r19
    1666:	c0 97       	sbiw	r24, 0x30	; 48
    1668:	9b 83       	std	Y+3, r25	; 0x03
    166a:	8a 83       	std	Y+2, r24	; 0x02
		//iter_#2          0 + 0 = 0
		//iter_#3          0 + 1 = 1
		//iter_#4         10 + 5 = 15
		//iter_#4        150 + 9 = 159

		GPS_p2Constu8_DataBuffer++;
    166c:	8e 81       	ldd	r24, Y+6	; 0x06
    166e:	9f 81       	ldd	r25, Y+7	; 0x07
    1670:	01 96       	adiw	r24, 0x01	; 1
    1672:	9f 83       	std	Y+7, r25	; 0x07
    1674:	8e 83       	std	Y+6, r24	; 0x06


	}while( (*GPS_p2Constu8_DataBuffer) != '.');
    1676:	ee 81       	ldd	r30, Y+6	; 0x06
    1678:	ff 81       	ldd	r31, Y+7	; 0x07
    167a:	80 81       	ld	r24, Z
    167c:	8e 32       	cpi	r24, 0x2E	; 46
    167e:	e1 f6       	brne	.-72     	; 0x1638 <GPS_inlinevidAsciiToInt+0x134>


	// 00159.7569
	//      |
	GPS_p2Constu8_DataBuffer++;
    1680:	8e 81       	ldd	r24, Y+6	; 0x06
    1682:	9f 81       	ldd	r25, Y+7	; 0x07
    1684:	01 96       	adiw	r24, 0x01	; 1
    1686:	9f 83       	std	Y+7, r25	; 0x07
    1688:	8e 83       	std	Y+6, r24	; 0x06

	// 00159.7569
	//       |

	Local_u8Temp = 10 ;
    168a:	8a e0       	ldi	r24, 0x0A	; 10
    168c:	89 83       	std	Y+1, r24	; 0x01
	{

		// 00159.7569,W
		//       |

		Local_u16TempLong += ((u16)((*GPS_p2Constu8_DataBuffer)-0x30)/Local_u8Temp);
    168e:	ee 81       	ldd	r30, Y+6	; 0x06
    1690:	ff 81       	ldd	r31, Y+7	; 0x07
    1692:	80 81       	ld	r24, Z
    1694:	88 2f       	mov	r24, r24
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	c0 97       	sbiw	r24, 0x30	; 48
    169a:	ac 01       	movw	r20, r24
    169c:	89 81       	ldd	r24, Y+1	; 0x01
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	ca 01       	movw	r24, r20
    16a4:	b9 01       	movw	r22, r18
    16a6:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__udivmodhi4>
    16aa:	cb 01       	movw	r24, r22
    16ac:	9c 01       	movw	r18, r24
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	9b 81       	ldd	r25, Y+3	; 0x03
    16b2:	82 0f       	add	r24, r18
    16b4:	93 1f       	adc	r25, r19
    16b6:	9b 83       	std	Y+3, r25	; 0x03
    16b8:	8a 83       	std	Y+2, r24	; 0x02

		Local_u8Temp *= 10 ;
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	88 2f       	mov	r24, r24
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	9c 01       	movw	r18, r24
    16c2:	22 0f       	add	r18, r18
    16c4:	33 1f       	adc	r19, r19
    16c6:	c9 01       	movw	r24, r18
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	82 0f       	add	r24, r18
    16d2:	93 1f       	adc	r25, r19
    16d4:	89 83       	std	Y+1, r24	; 0x01
		//iter_#2  Local_u16TempLat= 159.7+0.05 =  159.75           100
		//iter_#3                  159.75+0.006 =  159.756          1000
		//iter_#4                 159.756+0.0009 = 159.7569         10000                                   10000


		GPS_p2Constu8_DataBuffer++;
    16d6:	8e 81       	ldd	r24, Y+6	; 0x06
    16d8:	9f 81       	ldd	r25, Y+7	; 0x07
    16da:	01 96       	adiw	r24, 0x01	; 1
    16dc:	9f 83       	std	Y+7, r25	; 0x07
    16de:	8e 83       	std	Y+6, r24	; 0x06


	}while( (*GPS_p2Constu8_DataBuffer) != ',');
    16e0:	ee 81       	ldd	r30, Y+6	; 0x06
    16e2:	ff 81       	ldd	r31, Y+7	; 0x07
    16e4:	80 81       	ld	r24, Z
    16e6:	8c 32       	cpi	r24, 0x2C	; 44
    16e8:	91 f6       	brne	.-92     	; 0x168e <GPS_inlinevidAsciiToInt+0x18a>

	// 00159.7569,W
	//           |


	GPS_p2Constu8_DataBuffer++;
    16ea:	8e 81       	ldd	r24, Y+6	; 0x06
    16ec:	9f 81       	ldd	r25, Y+7	; 0x07
    16ee:	01 96       	adiw	r24, 0x01	; 1
    16f0:	9f 83       	std	Y+7, r25	; 0x07
    16f2:	8e 83       	std	Y+6, r24	; 0x06
	// 00159.7569,W
	//            |

	**Copy_pu8LongDir = *GPS_p2Constu8_DataBuffer;
    16f4:	ee 85       	ldd	r30, Y+14	; 0x0e
    16f6:	ff 85       	ldd	r31, Y+15	; 0x0f
    16f8:	a0 81       	ld	r26, Z
    16fa:	b1 81       	ldd	r27, Z+1	; 0x01
    16fc:	ee 81       	ldd	r30, Y+6	; 0x06
    16fe:	ff 81       	ldd	r31, Y+7	; 0x07
    1700:	80 81       	ld	r24, Z
    1702:	8c 93       	st	X, r24

	**Copy_pf32Long   = Local_u16TempLong;
    1704:	ea 85       	ldd	r30, Y+10	; 0x0a
    1706:	fb 85       	ldd	r31, Y+11	; 0x0b
    1708:	00 81       	ld	r16, Z
    170a:	11 81       	ldd	r17, Z+1	; 0x01
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	9b 81       	ldd	r25, Y+3	; 0x03
    1710:	cc 01       	movw	r24, r24
    1712:	a0 e0       	ldi	r26, 0x00	; 0
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	bc 01       	movw	r22, r24
    1718:	cd 01       	movw	r24, r26
    171a:	0e 94 a3 02 	call	0x546	; 0x546 <__floatunsisf>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	f8 01       	movw	r30, r16
    1724:	80 83       	st	Z, r24
    1726:	91 83       	std	Z+1, r25	; 0x01
    1728:	a2 83       	std	Z+2, r26	; 0x02
    172a:	b3 83       	std	Z+3, r27	; 0x03
	**Copy_pf32Lat    = Local_u16TempLat ;
    172c:	e8 85       	ldd	r30, Y+8	; 0x08
    172e:	f9 85       	ldd	r31, Y+9	; 0x09
    1730:	00 81       	ld	r16, Z
    1732:	11 81       	ldd	r17, Z+1	; 0x01
    1734:	8c 81       	ldd	r24, Y+4	; 0x04
    1736:	9d 81       	ldd	r25, Y+5	; 0x05
    1738:	cc 01       	movw	r24, r24
    173a:	a0 e0       	ldi	r26, 0x00	; 0
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	bc 01       	movw	r22, r24
    1740:	cd 01       	movw	r24, r26
    1742:	0e 94 a3 02 	call	0x546	; 0x546 <__floatunsisf>
    1746:	dc 01       	movw	r26, r24
    1748:	cb 01       	movw	r24, r22
    174a:	f8 01       	movw	r30, r16
    174c:	80 83       	st	Z, r24
    174e:	91 83       	std	Z+1, r25	; 0x01
    1750:	a2 83       	std	Z+2, r26	; 0x02
    1752:	b3 83       	std	Z+3, r27	; 0x03

}//End of GPS_inlinevidAsciiToInt().
    1754:	2f 96       	adiw	r28, 0x0f	; 15
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	de bf       	out	0x3e, r29	; 62
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	cd bf       	out	0x3d, r28	; 61
    1760:	cf 91       	pop	r28
    1762:	df 91       	pop	r29
    1764:	1f 91       	pop	r17
    1766:	0f 91       	pop	r16
    1768:	08 95       	ret

0000176a <GPS_enuInit>:
 *                   according to the PGS Configurable structure.           *
 * Argument Type   : None .                                                 *
 * Return Type     : Error state of type ES_t.                              *
 **....................*****************************************************/
ES_t GPS_enuInit(void)
{
    176a:	df 93       	push	r29
    176c:	cf 93       	push	r28
    176e:	00 d0       	rcall	.+0      	; 0x1770 <GPS_enuInit+0x6>
    1770:	0f 92       	push	r0
    1772:	cd b7       	in	r28, 0x3d	; 61
    1774:	de b7       	in	r29, 0x3e	; 62

	ES_t Local_enuErrorState = ES_NOK ;
    1776:	19 82       	std	Y+1, r1	; 0x01


	//Read the Status of gps module and make the appropriate configuration.
	switch( GPS.GPS_STATE_t )
    1778:	80 91 68 01 	lds	r24, 0x0168
    177c:	28 2f       	mov	r18, r24
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	3b 83       	std	Y+3, r19	; 0x03
    1782:	2a 83       	std	Y+2, r18	; 0x02
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	9b 81       	ldd	r25, Y+3	; 0x03
    1788:	00 97       	sbiw	r24, 0x00	; 0
    178a:	31 f0       	breq	.+12     	; 0x1798 <GPS_enuInit+0x2e>
    178c:	2a 81       	ldd	r18, Y+2	; 0x02
    178e:	3b 81       	ldd	r19, Y+3	; 0x03
    1790:	21 30       	cpi	r18, 0x01	; 1
    1792:	31 05       	cpc	r19, r1
    1794:	41 f1       	breq	.+80     	; 0x17e6 <GPS_enuInit+0x7c>
    1796:	29 c0       	rjmp	.+82     	; 0x17ea <GPS_enuInit+0x80>

		/****************************************************************************
		 *-Initialize the Direction of pins that the gps module is connected on to  *
		 * be an output pins and Set the suitable value for each.                                                       *
		 ****************************************************************************/
		DIO_enuSetPinDirection( GPS.GPS_VCC_PORT , GPS.GPS_VCC_PIN , DIO_OUTPUT_PIN );
    1798:	80 91 69 01 	lds	r24, 0x0169
    179c:	90 91 6a 01 	lds	r25, 0x016A
    17a0:	69 2f       	mov	r22, r25
    17a2:	41 e0       	ldi	r20, 0x01	; 1
    17a4:	0e 94 68 07 	call	0xed0	; 0xed0 <DIO_enuSetPinDirection>
		DIO_enuSetPinValue( GPS.GPS_VCC_PORT , GPS.GPS_VCC_PIN , DIO_HIGH );
    17a8:	80 91 69 01 	lds	r24, 0x0169
    17ac:	90 91 6a 01 	lds	r25, 0x016A
    17b0:	69 2f       	mov	r22, r25
    17b2:	41 e0       	ldi	r20, 0x01	; 1
    17b4:	0e 94 5f 08 	call	0x10be	; 0x10be <DIO_enuSetPinValue>

		DIO_enuSetPinDirection( GPS.GPS_GND_PORT , GPS.GPS_GND_PIN , DIO_OUTPUT_PIN );
    17b8:	80 91 6b 01 	lds	r24, 0x016B
    17bc:	90 91 6c 01 	lds	r25, 0x016C
    17c0:	69 2f       	mov	r22, r25
    17c2:	41 e0       	ldi	r20, 0x01	; 1
    17c4:	0e 94 68 07 	call	0xed0	; 0xed0 <DIO_enuSetPinDirection>
		DIO_enuSetPinValue( GPS.GPS_GND_PORT , GPS.GPS_GND_PIN , DIO_LOW );
    17c8:	80 91 6b 01 	lds	r24, 0x016B
    17cc:	90 91 6c 01 	lds	r25, 0x016C
    17d0:	69 2f       	mov	r22, r25
    17d2:	40 e0       	ldi	r20, 0x00	; 0
    17d4:	0e 94 5f 08 	call	0x10be	; 0x10be <DIO_enuSetPinValue>

		GPS_CLEAR_ALL_FLAGSE();
    17d8:	10 92 b4 01 	sts	0x01B4, r1

		//Initiate the UART to receive read the gps output.
		UART_enuInit();
    17dc:	0e 94 11 05 	call	0xa22	; 0xa22 <UART_enuInit>

		Local_enuErrorState = ES_OK ;
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	89 83       	std	Y+1, r24	; 0x01
    17e4:	02 c0       	rjmp	.+4      	; 0x17ea <GPS_enuInit+0x80>

		break ;

	case gps_off :
		//Do nothing.
		Local_enuErrorState = ES_OK ;
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	89 83       	std	Y+1, r24	; 0x01
	default:
		break;

	}//End of switch.

	return Local_enuErrorState ;
    17ea:	89 81       	ldd	r24, Y+1	; 0x01

}//End of GPS_enuInit(void).
    17ec:	0f 90       	pop	r0
    17ee:	0f 90       	pop	r0
    17f0:	0f 90       	pop	r0
    17f2:	cf 91       	pop	r28
    17f4:	df 91       	pop	r29
    17f6:	08 95       	ret

000017f8 <GPS_enuGetLocation>:
 *                   Argu.4:         Address of u8 variable  --->  ~  ~ Longitude  ~ (E,w,N or S)                  *
 * Return Type     : Error state of type ES_t.                                                                     *
 **.....................................................................................................************/
//   GPS_inlinevidAsciiToInt( u8 const* GPS_constu8_Buffer , f32** Copy_pf32Lat , f32** Copy_pf32Long  , u8** Copy_pu8LatDir , u8** Copy_pu8LongDir  )
ES_t GPS_enuGetLocation(f32* Copy_pf32Lat , f32* Copy_pf32Long , u8* Copy_pu8LatDir , u8* Copy_pu8LongDir )
{
    17f8:	0f 93       	push	r16
    17fa:	1f 93       	push	r17
    17fc:	df 93       	push	r29
    17fe:	cf 93       	push	r28
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
    1804:	2b 97       	sbiw	r28, 0x0b	; 11
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	f8 94       	cli
    180a:	de bf       	out	0x3e, r29	; 62
    180c:	0f be       	out	0x3f, r0	; 63
    180e:	cd bf       	out	0x3d, r28	; 61
    1810:	9d 83       	std	Y+5, r25	; 0x05
    1812:	8c 83       	std	Y+4, r24	; 0x04
    1814:	7f 83       	std	Y+7, r23	; 0x07
    1816:	6e 83       	std	Y+6, r22	; 0x06
    1818:	59 87       	std	Y+9, r21	; 0x09
    181a:	48 87       	std	Y+8, r20	; 0x08
    181c:	3b 87       	std	Y+11, r19	; 0x0b
    181e:	2a 87       	std	Y+10, r18	; 0x0a

	ES_t Local_enuErrorState = ES_NOK ;
    1820:	1a 82       	std	Y+2, r1	; 0x02


	if(( Copy_pf32Lat != NULL) && (Copy_pf32Long != NULL) && ( Copy_pu8LatDir != NULL)&& ( Copy_pu8LongDir !=  NULL))
    1822:	8c 81       	ldd	r24, Y+4	; 0x04
    1824:	9d 81       	ldd	r25, Y+5	; 0x05
    1826:	00 97       	sbiw	r24, 0x00	; 0
    1828:	09 f4       	brne	.+2      	; 0x182c <GPS_enuGetLocation+0x34>
    182a:	8a c0       	rjmp	.+276    	; 0x1940 <GPS_enuGetLocation+0x148>
    182c:	8e 81       	ldd	r24, Y+6	; 0x06
    182e:	9f 81       	ldd	r25, Y+7	; 0x07
    1830:	00 97       	sbiw	r24, 0x00	; 0
    1832:	09 f4       	brne	.+2      	; 0x1836 <GPS_enuGetLocation+0x3e>
    1834:	85 c0       	rjmp	.+266    	; 0x1940 <GPS_enuGetLocation+0x148>
    1836:	88 85       	ldd	r24, Y+8	; 0x08
    1838:	99 85       	ldd	r25, Y+9	; 0x09
    183a:	00 97       	sbiw	r24, 0x00	; 0
    183c:	09 f4       	brne	.+2      	; 0x1840 <GPS_enuGetLocation+0x48>
    183e:	80 c0       	rjmp	.+256    	; 0x1940 <GPS_enuGetLocation+0x148>
    1840:	8a 85       	ldd	r24, Y+10	; 0x0a
    1842:	9b 85       	ldd	r25, Y+11	; 0x0b
    1844:	00 97       	sbiw	r24, 0x00	; 0
    1846:	09 f4       	brne	.+2      	; 0x184a <GPS_enuGetLocation+0x52>
    1848:	7b c0       	rjmp	.+246    	; 0x1940 <GPS_enuGetLocation+0x148>
	{

		u8 Local_u8TempChar =  0  ;
    184a:	1b 82       	std	Y+3, r1	; 0x03
		u8 Local_u8Counter  =  0  ;
    184c:	19 82       	std	Y+1, r1	; 0x01


		UART_enuRecieveByte(&Local_u8TempChar);
    184e:	ce 01       	movw	r24, r28
    1850:	03 96       	adiw	r24, 0x03	; 3
    1852:	0e 94 72 05 	call	0xae4	; 0xae4 <UART_enuRecieveByte>
		do
		{
			/************************************************
			 * 1.Catch the Start of line '$'.               *
			 ************************************************/
			if(Local_u8TempChar != '$')
    1856:	8b 81       	ldd	r24, Y+3	; 0x03
    1858:	84 32       	cpi	r24, 0x24	; 36
    185a:	39 f0       	breq	.+14     	; 0x186a <GPS_enuGetLocation+0x72>
			{
				do
				{
					UART_enuRecieveByte(&Local_u8TempChar);
    185c:	ce 01       	movw	r24, r28
    185e:	03 96       	adiw	r24, 0x03	; 3
    1860:	0e 94 72 05 	call	0xae4	; 0xae4 <UART_enuRecieveByte>

				}while( Local_u8TempChar!= '$' );
    1864:	8b 81       	ldd	r24, Y+3	; 0x03
    1866:	84 32       	cpi	r24, 0x24	; 36
    1868:	c9 f7       	brne	.-14     	; 0x185c <GPS_enuGetLocation+0x64>
			 *                                      $GP  RMC, *
			 *                                      $GP  GSA, *
			 *                                      $GP  RMC, *
			 *                                                *
			 **************************************************/
			UART_enuRecieveByte(&Local_u8TempChar);
    186a:	ce 01       	movw	r24, r28
    186c:	03 96       	adiw	r24, 0x03	; 3
    186e:	0e 94 72 05 	call	0xae4	; 0xae4 <UART_enuRecieveByte>
			UART_enuRecieveByte(&Local_u8TempChar);
    1872:	ce 01       	movw	r24, r28
    1874:	03 96       	adiw	r24, 0x03	; 3
    1876:	0e 94 72 05 	call	0xae4	; 0xae4 <UART_enuRecieveByte>

			/************************************************
			 * 3.Read more one character and make sure it's *
			 *   'G' Not 'R'.                              *
			 ************************************************/
			UART_enuRecieveByte(&Local_u8TempChar);
    187a:	ce 01       	movw	r24, r28
    187c:	03 96       	adiw	r24, 0x03	; 3
    187e:	0e 94 72 05 	call	0xae4	; 0xae4 <UART_enuRecieveByte>

			if(Local_u8TempChar == 'G')
    1882:	8b 81       	ldd	r24, Y+3	; 0x03
    1884:	87 34       	cpi	r24, 0x47	; 71
    1886:	09 f0       	breq	.+2      	; 0x188a <GPS_enuGetLocation+0x92>
    1888:	3f c0       	rjmp	.+126    	; 0x1908 <GPS_enuGetLocation+0x110>

				/************************************************
				 * 4.Read more one character and make sure it's *
				 *   'G' Not 'M'or 'S'.                         *
				 ************************************************/
				UART_enuRecieveByte(&Local_u8TempChar);
    188a:	ce 01       	movw	r24, r28
    188c:	03 96       	adiw	r24, 0x03	; 3
    188e:	0e 94 72 05 	call	0xae4	; 0xae4 <UART_enuRecieveByte>

				if(Local_u8TempChar == 'G')
    1892:	8b 81       	ldd	r24, Y+3	; 0x03
    1894:	87 34       	cpi	r24, 0x47	; 71
    1896:	c1 f5       	brne	.+112    	; 0x1908 <GPS_enuGetLocation+0x110>

					/************************************************
					 * 5.Read more one character and make sure it's *
					 *   'A' Not 'C'.                               *
					 ************************************************/
					UART_enuRecieveByte(&Local_u8TempChar);
    1898:	ce 01       	movw	r24, r28
    189a:	03 96       	adiw	r24, 0x03	; 3
    189c:	0e 94 72 05 	call	0xae4	; 0xae4 <UART_enuRecieveByte>

					if(Local_u8TempChar == 'A')
    18a0:	8b 81       	ldd	r24, Y+3	; 0x03
    18a2:	81 34       	cpi	r24, 0x41	; 65
    18a4:	89 f5       	brne	.+98     	; 0x1908 <GPS_enuGetLocation+0x110>

						/************************************************
						 * 6.Read more one character and make sure it's *
						 *   ',' (Check is an Optional Step).           *
						 ************************************************/
						UART_enuRecieveByte(&Local_u8TempChar);
    18a6:	ce 01       	movw	r24, r28
    18a8:	03 96       	adiw	r24, 0x03	; 3
    18aa:	0e 94 72 05 	call	0xae4	; 0xae4 <UART_enuRecieveByte>
						if( Local_u8TempChar == ',' )
    18ae:	8b 81       	ldd	r24, Y+3	; 0x03
    18b0:	8c 32       	cpi	r24, 0x2C	; 44
    18b2:	51 f5       	brne	.+84     	; 0x1908 <GPS_enuGetLocation+0x110>
							 *    Hint:-                                    *
							 *          lines always ends with \n character.*
							 ************************************************/
							do
							{
								UART_enuRecieveByte(&Local_u8TempChar);
    18b4:	ce 01       	movw	r24, r28
    18b6:	03 96       	adiw	r24, 0x03	; 3
    18b8:	0e 94 72 05 	call	0xae4	; 0xae4 <UART_enuRecieveByte>

								GPS_u8Buffer[Local_u8Counter++]=Local_u8TempChar;
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
    18be:	88 2f       	mov	r24, r24
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	2b 81       	ldd	r18, Y+3	; 0x03
    18c4:	fc 01       	movw	r30, r24
    18c6:	e3 59       	subi	r30, 0x93	; 147
    18c8:	fe 4f       	sbci	r31, 0xFE	; 254
    18ca:	20 83       	st	Z, r18
    18cc:	89 81       	ldd	r24, Y+1	; 0x01
    18ce:	8f 5f       	subi	r24, 0xFF	; 255
    18d0:	89 83       	std	Y+1, r24	; 0x01

							}while( Local_u8TempChar != '\n'  );
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	8a 30       	cpi	r24, 0x0A	; 10
    18d6:	71 f7       	brne	.-36     	; 0x18b4 <GPS_enuGetLocation+0xbc>
							 *                                                         *
							 *         $GPGGA,143219.775,,,,,0,10,,,M,,M,,*70          *
							 *         $GPGGA,181430.343,5404.2675,N,00159.7569,W...   *
							 * index-->       012........[12].......                   *
							 **********************************************************/
							if(GPS_u8Buffer[12] != ',')
    18d8:	80 91 79 01 	lds	r24, 0x0179
    18dc:	8c 32       	cpi	r24, 0x2C	; 44
    18de:	31 f0       	breq	.+12     	; 0x18ec <GPS_enuGetLocation+0xf4>
							{

								//Set flag to break the outer do while() loop.
								GPS_SET_LINE_FLAG();
    18e0:	80 91 b4 01 	lds	r24, 0x01B4
    18e4:	81 60       	ori	r24, 0x01	; 1
    18e6:	80 93 b4 01 	sts	0x01B4, r24
    18ea:	0e c0       	rjmp	.+28     	; 0x1908 <GPS_enuGetLocation+0x110>
								 * -Empty $GPGGA line. So, Reset the buffer and *
								 *  read another $GPGGA line.                   *
								 ************************************************/
								do
								{
									GPS_u8Buffer[Local_u8Counter--]='X';
    18ec:	89 81       	ldd	r24, Y+1	; 0x01
    18ee:	88 2f       	mov	r24, r24
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	fc 01       	movw	r30, r24
    18f4:	e3 59       	subi	r30, 0x93	; 147
    18f6:	fe 4f       	sbci	r31, 0xFE	; 254
    18f8:	88 e5       	ldi	r24, 0x58	; 88
    18fa:	80 83       	st	Z, r24
    18fc:	89 81       	ldd	r24, Y+1	; 0x01
    18fe:	81 50       	subi	r24, 0x01	; 1
    1900:	89 83       	std	Y+1, r24	; 0x01

								}while( Local_u8Counter != 0 );
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	88 23       	and	r24, r24
    1906:	91 f7       	brne	.-28     	; 0x18ec <GPS_enuGetLocation+0xf4>
			else
			{
				//-Hit 'R' Instead of 'G'.
			}

		}while( !(GPS_Flags.FLAG.GPGGA_LINE_FLAG) );
    1908:	80 91 b4 01 	lds	r24, 0x01B4
    190c:	81 70       	andi	r24, 0x01	; 1
    190e:	88 23       	and	r24, r24
    1910:	09 f4       	brne	.+2      	; 0x1914 <GPS_enuGetLocation+0x11c>
    1912:	a1 cf       	rjmp	.-190    	; 0x1856 <GPS_enuGetLocation+0x5e>

		//****************************************************************//
		//****************************************************************//


		GPS_inlinevidAsciiToInt( GPS_u8Buffer , &Copy_pf32Lat , &Copy_pf32Long , &Copy_pu8LatDir , &Copy_pu8LongDir  );
    1914:	8d e6       	ldi	r24, 0x6D	; 109
    1916:	91 e0       	ldi	r25, 0x01	; 1
    1918:	9e 01       	movw	r18, r28
    191a:	2c 5f       	subi	r18, 0xFC	; 252
    191c:	3f 4f       	sbci	r19, 0xFF	; 255
    191e:	ae 01       	movw	r20, r28
    1920:	4a 5f       	subi	r20, 0xFA	; 250
    1922:	5f 4f       	sbci	r21, 0xFF	; 255
    1924:	fe 01       	movw	r30, r28
    1926:	38 96       	adiw	r30, 0x08	; 8
    1928:	de 01       	movw	r26, r28
    192a:	1a 96       	adiw	r26, 0x0a	; 10
    192c:	b9 01       	movw	r22, r18
    192e:	9f 01       	movw	r18, r30
    1930:	8d 01       	movw	r16, r26
    1932:	0e 94 82 0a 	call	0x1504	; 0x1504 <GPS_inlinevidAsciiToInt>


		GPS_CLEAR_ALL_FLAGSE();
    1936:	10 92 b4 01 	sts	0x01B4, r1
						//****************************************************************//




						Local_enuErrorState = ES_OK ;
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	8a 83       	std	Y+2, r24	; 0x02
    193e:	02 c0       	rjmp	.+4      	; 0x1944 <GPS_enuGetLocation+0x14c>


	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER ;
    1940:	82 e0       	ldi	r24, 0x02	; 2
    1942:	8a 83       	std	Y+2, r24	; 0x02
	}


	//func();
	return Local_enuErrorState ;
    1944:	8a 81       	ldd	r24, Y+2	; 0x02

}//End of GPS_enuGetLocation.
    1946:	2b 96       	adiw	r28, 0x0b	; 11
    1948:	0f b6       	in	r0, 0x3f	; 63
    194a:	f8 94       	cli
    194c:	de bf       	out	0x3e, r29	; 62
    194e:	0f be       	out	0x3f, r0	; 63
    1950:	cd bf       	out	0x3d, r28	; 61
    1952:	cf 91       	pop	r28
    1954:	df 91       	pop	r29
    1956:	1f 91       	pop	r17
    1958:	0f 91       	pop	r16
    195a:	08 95       	ret

0000195c <main>:

u8 lat;
u8 lon;

int main(void)
{
    195c:	0f 93       	push	r16
    195e:	1f 93       	push	r17
    1960:	df 93       	push	r29
    1962:	cf 93       	push	r28
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62

	GPS_enuInit();
    1968:	0e 94 b5 0b 	call	0x176a	; 0x176a <GPS_enuInit>

	//int i = 3 ;

	UART_enuSendByte('M');
    196c:	8d e4       	ldi	r24, 0x4D	; 77
    196e:	0e 94 3f 05 	call	0xa7e	; 0xa7e <UART_enuSendByte>
	UART_enuSendByte('a');
    1972:	81 e6       	ldi	r24, 0x61	; 97
    1974:	0e 94 3f 05 	call	0xa7e	; 0xa7e <UART_enuSendByte>
	UART_enuSendByte('i');
    1978:	89 e6       	ldi	r24, 0x69	; 105
    197a:	0e 94 3f 05 	call	0xa7e	; 0xa7e <UART_enuSendByte>
	UART_enuSendByte('n');
    197e:	8e e6       	ldi	r24, 0x6E	; 110
    1980:	0e 94 3f 05 	call	0xa7e	; 0xa7e <UART_enuSendByte>

	GPS_enuGetLocation(&var1 , &var2 , &lat , &lon );
    1984:	8e eb       	ldi	r24, 0xBE	; 190
    1986:	91 e0       	ldi	r25, 0x01	; 1
    1988:	48 2f       	mov	r20, r24
    198a:	89 eb       	ldi	r24, 0xB9	; 185
    198c:	91 e0       	ldi	r25, 0x01	; 1
    198e:	58 2f       	mov	r21, r24
    1990:	85 eb       	ldi	r24, 0xB5	; 181
    1992:	91 e0       	ldi	r25, 0x01	; 1
    1994:	2a eb       	ldi	r18, 0xBA	; 186
    1996:	31 e0       	ldi	r19, 0x01	; 1
    1998:	b9 01       	movw	r22, r18
    199a:	25 2f       	mov	r18, r21
    199c:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <GPS_enuGetLocation>
	while(1)
	{
		//ES_t GPS_enuGetLocation(f32* Copy_pf32Lat , f32* Copy_pf32Long , u8 Copy_pu8LatDir , u8 Copy_pu8LongDir );

		//GPS_enuGetLocation(&var1 , &var2 , &lat , &lon );
		UART_enuSendByte(' ');
    19a0:	80 e2       	ldi	r24, 0x20	; 32
    19a2:	0e 94 3f 05 	call	0xa7e	; 0xa7e <UART_enuSendByte>
		UART_enuSendByte(' ');
    19a6:	80 e2       	ldi	r24, 0x20	; 32
    19a8:	0e 94 3f 05 	call	0xa7e	; 0xa7e <UART_enuSendByte>
		UART_enuSendByte('w');
    19ac:	87 e7       	ldi	r24, 0x77	; 119
    19ae:	0e 94 3f 05 	call	0xa7e	; 0xa7e <UART_enuSendByte>
		UART_enuSendByte('h');
    19b2:	88 e6       	ldi	r24, 0x68	; 104
    19b4:	0e 94 3f 05 	call	0xa7e	; 0xa7e <UART_enuSendByte>
		UART_enuSendByte('i');
    19b8:	89 e6       	ldi	r24, 0x69	; 105
    19ba:	0e 94 3f 05 	call	0xa7e	; 0xa7e <UART_enuSendByte>
		UART_enuSendByte('l');
    19be:	8c e6       	ldi	r24, 0x6C	; 108
    19c0:	0e 94 3f 05 	call	0xa7e	; 0xa7e <UART_enuSendByte>
		UART_enuSendByte('e');
    19c4:	85 e6       	ldi	r24, 0x65	; 101
    19c6:	0e 94 3f 05 	call	0xa7e	; 0xa7e <UART_enuSendByte>
		UART_enuSendByte('(');
    19ca:	88 e2       	ldi	r24, 0x28	; 40
    19cc:	0e 94 3f 05 	call	0xa7e	; 0xa7e <UART_enuSendByte>
		UART_enuSendByte('1');
    19d0:	81 e3       	ldi	r24, 0x31	; 49
    19d2:	0e 94 3f 05 	call	0xa7e	; 0xa7e <UART_enuSendByte>
		UART_enuSendByte(')');
    19d6:	89 e2       	ldi	r24, 0x29	; 41
    19d8:	0e 94 3f 05 	call	0xa7e	; 0xa7e <UART_enuSendByte>
		(*(u8*)0x33)= lat;
    19dc:	e3 e3       	ldi	r30, 0x33	; 51
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 91 be 01 	lds	r24, 0x01BE
    19e4:	80 83       	st	Z, r24
		(*(u8*)0x36)= lon;
    19e6:	e6 e3       	ldi	r30, 0x36	; 54
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 91 b9 01 	lds	r24, 0x01B9
    19ee:	80 83       	st	Z, r24

		(*(u8*)0x53)= (u8)var1;
    19f0:	03 e5       	ldi	r16, 0x53	; 83
    19f2:	10 e0       	ldi	r17, 0x00	; 0
    19f4:	80 91 b5 01 	lds	r24, 0x01B5
    19f8:	90 91 b6 01 	lds	r25, 0x01B6
    19fc:	a0 91 b7 01 	lds	r26, 0x01B7
    1a00:	b0 91 b8 01 	lds	r27, 0x01B8
    1a04:	bc 01       	movw	r22, r24
    1a06:	cd 01       	movw	r24, r26
    1a08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	f8 01       	movw	r30, r16
    1a12:	80 83       	st	Z, r24
		(*(u8*)0x52)= (u8)var2;
    1a14:	02 e5       	ldi	r16, 0x52	; 82
    1a16:	10 e0       	ldi	r17, 0x00	; 0
    1a18:	80 91 ba 01 	lds	r24, 0x01BA
    1a1c:	90 91 bb 01 	lds	r25, 0x01BB
    1a20:	a0 91 bc 01 	lds	r26, 0x01BC
    1a24:	b0 91 bd 01 	lds	r27, 0x01BD
    1a28:	bc 01       	movw	r22, r24
    1a2a:	cd 01       	movw	r24, r26
    1a2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	f8 01       	movw	r30, r16
    1a36:	80 83       	st	Z, r24
    1a38:	ff cf       	rjmp	.-2      	; 0x1a38 <main+0xdc>

00001a3a <__udivmodhi4>:
    1a3a:	aa 1b       	sub	r26, r26
    1a3c:	bb 1b       	sub	r27, r27
    1a3e:	51 e1       	ldi	r21, 0x11	; 17
    1a40:	07 c0       	rjmp	.+14     	; 0x1a50 <__udivmodhi4_ep>

00001a42 <__udivmodhi4_loop>:
    1a42:	aa 1f       	adc	r26, r26
    1a44:	bb 1f       	adc	r27, r27
    1a46:	a6 17       	cp	r26, r22
    1a48:	b7 07       	cpc	r27, r23
    1a4a:	10 f0       	brcs	.+4      	; 0x1a50 <__udivmodhi4_ep>
    1a4c:	a6 1b       	sub	r26, r22
    1a4e:	b7 0b       	sbc	r27, r23

00001a50 <__udivmodhi4_ep>:
    1a50:	88 1f       	adc	r24, r24
    1a52:	99 1f       	adc	r25, r25
    1a54:	5a 95       	dec	r21
    1a56:	a9 f7       	brne	.-22     	; 0x1a42 <__udivmodhi4_loop>
    1a58:	80 95       	com	r24
    1a5a:	90 95       	com	r25
    1a5c:	bc 01       	movw	r22, r24
    1a5e:	cd 01       	movw	r24, r26
    1a60:	08 95       	ret

00001a62 <__prologue_saves__>:
    1a62:	2f 92       	push	r2
    1a64:	3f 92       	push	r3
    1a66:	4f 92       	push	r4
    1a68:	5f 92       	push	r5
    1a6a:	6f 92       	push	r6
    1a6c:	7f 92       	push	r7
    1a6e:	8f 92       	push	r8
    1a70:	9f 92       	push	r9
    1a72:	af 92       	push	r10
    1a74:	bf 92       	push	r11
    1a76:	cf 92       	push	r12
    1a78:	df 92       	push	r13
    1a7a:	ef 92       	push	r14
    1a7c:	ff 92       	push	r15
    1a7e:	0f 93       	push	r16
    1a80:	1f 93       	push	r17
    1a82:	cf 93       	push	r28
    1a84:	df 93       	push	r29
    1a86:	cd b7       	in	r28, 0x3d	; 61
    1a88:	de b7       	in	r29, 0x3e	; 62
    1a8a:	ca 1b       	sub	r28, r26
    1a8c:	db 0b       	sbc	r29, r27
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	f8 94       	cli
    1a92:	de bf       	out	0x3e, r29	; 62
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	cd bf       	out	0x3d, r28	; 61
    1a98:	09 94       	ijmp

00001a9a <__epilogue_restores__>:
    1a9a:	2a 88       	ldd	r2, Y+18	; 0x12
    1a9c:	39 88       	ldd	r3, Y+17	; 0x11
    1a9e:	48 88       	ldd	r4, Y+16	; 0x10
    1aa0:	5f 84       	ldd	r5, Y+15	; 0x0f
    1aa2:	6e 84       	ldd	r6, Y+14	; 0x0e
    1aa4:	7d 84       	ldd	r7, Y+13	; 0x0d
    1aa6:	8c 84       	ldd	r8, Y+12	; 0x0c
    1aa8:	9b 84       	ldd	r9, Y+11	; 0x0b
    1aaa:	aa 84       	ldd	r10, Y+10	; 0x0a
    1aac:	b9 84       	ldd	r11, Y+9	; 0x09
    1aae:	c8 84       	ldd	r12, Y+8	; 0x08
    1ab0:	df 80       	ldd	r13, Y+7	; 0x07
    1ab2:	ee 80       	ldd	r14, Y+6	; 0x06
    1ab4:	fd 80       	ldd	r15, Y+5	; 0x05
    1ab6:	0c 81       	ldd	r16, Y+4	; 0x04
    1ab8:	1b 81       	ldd	r17, Y+3	; 0x03
    1aba:	aa 81       	ldd	r26, Y+2	; 0x02
    1abc:	b9 81       	ldd	r27, Y+1	; 0x01
    1abe:	ce 0f       	add	r28, r30
    1ac0:	d1 1d       	adc	r29, r1
    1ac2:	0f b6       	in	r0, 0x3f	; 63
    1ac4:	f8 94       	cli
    1ac6:	de bf       	out	0x3e, r29	; 62
    1ac8:	0f be       	out	0x3f, r0	; 63
    1aca:	cd bf       	out	0x3d, r28	; 61
    1acc:	ed 01       	movw	r28, r26
    1ace:	08 95       	ret

00001ad0 <_exit>:
    1ad0:	f8 94       	cli

00001ad2 <__stop_program>:
    1ad2:	ff cf       	rjmp	.-2      	; 0x1ad2 <__stop_program>
